#================= Open with a program that supports ANSI (like `bat`) =================#

#================= Server hangs at the end =================#

> npm_repl_prototype@1.0.0 debug /app
> DEBUG=* node server.js

  [35;1mexpress:application [0mset "x-powered-by" to [33mtrue[39m [35m+0ms[0m
  [35;1mexpress:application [0mset "etag" to [32m'weak'[39m [35m+4ms[0m
  [35;1mexpress:application [0mset "etag fn" to [36m[Function: generateETag][39m [35m+0ms[0m
  [35;1mexpress:application [0mset "env" to [32m'development'[39m [35m+2ms[0m
  [35;1mexpress:application [0mset "query parser" to [32m'extended'[39m [35m+0ms[0m
  [35;1mexpress:application [0mset "query parser fn" to [36m[Function: parseExtendedQueryString][39m [35m+0ms[0m
  [35;1mexpress:application [0mset "subdomain offset" to [33m2[39m [35m+0ms[0m
  [35;1mexpress:application [0mset "trust proxy" to [33mfalse[39m [35m+1ms[0m
  [35;1mexpress:application [0mset "trust proxy fn" to [36m[Function: trustNone][39m [35m+0ms[0m
  [35;1mexpress:application [0mbooting in development mode [35m+0ms[0m
  [35;1mexpress:application [0mset "view" to [36m[Function: View][39m [35m+1ms[0m
  [35;1mexpress:application [0mset "views" to [32m'/app/views'[39m [35m+0ms[0m
  [35;1mexpress:application [0mset "jsonp callback name" to [32m'callback'[39m [35m+0ms[0m
  [31;1mexpress:router [0muse [32m'/'[39m query [31m+2ms[0m
  [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+1ms[0m
  [31;1mexpress:router [0muse [32m'/'[39m expressInit [31m+0ms[0m
  [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+0ms[0m
  [31;1mexpress:router [0muse [32m'/'[39m textParser [31m+1ms[0m
  [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+0ms[0m
  [31;1mexpress:router [0muse [32m'/'[39m serveStatic [31m+0ms[0m
  [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+1ms[0m
  [33;1msocket.io:server [0minitializing namespace / [33m+0ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":0,"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":0,"nsp":"/"} as 0 [32m+0ms[0m
  [33;1msocket.io:server [0mcreating engine.io instance with opts {"path":"/socket.io","initialPacket":["0"]} [33m+2ms[0m
  [33;1msocket.io:server [0mattaching client serving req handler [33m+17ms[0m
  [33;1mexpress:router:route [0mnew [32m'/:room'[39m [33m+24ms[0m
  [33;1mexpress:router:layer [0mnew [32m'/:room'[39m [33m+0ms[0m
  [33;1mexpress:router:route [0mget [32m'/:room'[39m [33m+1ms[0m
  [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+0ms[0m
  [32;1mserver [0mListening on port: 3000... [32m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+0ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjWYh" [35m+1ms[0m
  [35;1mengine [0mhandshaking client "c_okeXEnbRR0kDbNAAAA" [35m+5ms[0m
  [34;1mengine:socket [0msending packet "open" ({"sid":"c_okeXEnbRR0kDbNAAAA","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+2ms[0m
  [31;1mengine:polling [0mwriting "96:0{"sid":"c_okeXEnbRR0kDbNAAAA","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+1ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+6ms[0m
  [33;1msocket.io:server [0mincoming connection with id c_okeXEnbRR0kDbNAAAA [33m+372ms[0m
  [33;1msocket.io:client [0mconnecting to namespace / [33m+0ms[0m
  [36;1msocket.io:namespace [0madding socket to nsp / [36m+0ms[0m
  [36;1msocket.io:socket [0msocket connected - writing packet [36m+0ms[0m
  [36;1msocket.io:socket [0mjoining room c_okeXEnbRR0kDbNAAAA [36m+1ms[0m
  [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
  [32;1mserver [0mio.on("connection", (socket) => { [32m+367ms[0m
  [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
 [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+396ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+7ms[0m
  [36;1msocket.io:socket [0mjoined room c_okeXEnbRR0kDbNAAAA [36m+3ms[0m
  [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA [32m+2ms[0m
  [32;1mserver [0m  [initRepl] lang: ruby, welcome_msg: WELCOME TO SPACECRAFT!
 [32m+1ms[0m
  [32;1mRepl [0m[kill()] this.process: [1mnull[22m [32m+0ms[0m
  [32;1mRepl [0mRepl process killed. [32m+1ms[0m
  [32;1mRepl [0m[Repl.init(language = "ruby")] [32m+0ms[0m
  [32;1mRepl [0m  INITIALIZED command: irb [32m+5ms[0m
  [32;1mRepl [0m  this.process: UnixTerminal {
  [32;1mRepl [0m  _internalee:
  [32;1mRepl [0m   EventEmitter {
  [32;1mRepl [0m     _events: [Object: null prototype] {},
  [32;1mRepl [0m     _eventsCount: [33m0[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
  [32;1mRepl [0m  _socket:
  [32;1mRepl [0m   PipeSocket {
  [32;1mRepl [0m     connecting: [33mfalse[39m,
  [32;1mRepl [0m     _hadError: [33mfalse[39m,
  [32;1mRepl [0m     _handle:
  [32;1mRepl [0m      Pipe {
  [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
  [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
  [32;1mRepl [0m     _parent: [1mnull[22m,
  [32;1mRepl [0m     _host: [1mnull[22m,
  [32;1mRepl [0m     _readableState:
  [32;1mRepl [0m      ReadableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        pipes: [1mnull[22m,
  [32;1mRepl [0m        pipesCount: [33m0[39m,
  [32;1mRepl [0m        flowing: [1mnull[22m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        endEmitted: [33mfalse[39m,
  [32;1mRepl [0m        reading: [33mfalse[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        needReadable: [33mfalse[39m,
  [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
  [32;1mRepl [0m        readableListening: [33mfalse[39m,
  [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        awaitDrain: [33m0[39m,
  [32;1mRepl [0m        readingMore: [33mfalse[39m,
  [32;1mRepl [0m        decoder:
  [32;1mRepl [0m         StringDecoder {
  [32;1mRepl [0m           encoding: [32m'utf8'[39m,
  [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
  [32;1mRepl [0m        encoding: [32m'utf8'[39m },
  [32;1mRepl [0m     readable: [33mfalse[39m,
  [32;1mRepl [0m     _events:
  [32;1mRepl [0m      [Object: null prototype] {
  [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
  [32;1mRepl [0m        error: [36m[Function][39m,
  [32;1mRepl [0m        close: [36m[Function][39m },
  [32;1mRepl [0m     _eventsCount: [33m3[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
  [32;1mRepl [0m     _writableState:
  [32;1mRepl [0m      WritableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        finalCalled: [33mfalse[39m,
  [32;1mRepl [0m        needDrain: [33mfalse[39m,
  [32;1mRepl [0m        ending: [33mfalse[39m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        finished: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        writing: [33mfalse[39m,
  [32;1mRepl [0m        corked: [33m0[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
  [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
  [32;1mRepl [0m        writecb: [1mnull[22m,
  [32;1mRepl [0m        writelen: [33m0[39m,
  [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        pendingcb: [33m0[39m,
  [32;1mRepl [0m        prefinished: [33mfalse[39m,
  [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
  [32;1mRepl [0m        corkedRequestsFree:
  [32;1mRepl [0m         { next: [1mnull[22m,
  [32;1mRepl [0m           entry: [1mnull[22m,
  [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
  [32;1mRepl [0m     writable: [33mfalse[39m,
  [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
  [32;1mRepl [0m     _sockname: [1mnull[22m,
  [32;1mRepl [0m     _pendingData: [1mnull[22m,
  [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
  [32;1mRepl [0m     server: [1mnull[22m,
  [32;1mRepl [0m     _server: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m85[39m,
  [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
  [32;1mRepl [0m  _pid: [33m28[39m,
  [32;1mRepl [0m  _fd: [33m22[39m,
  [32;1mRepl [0m  _pty: [32m'/dev/pts/1'[39m,
  [32;1mRepl [0m  _file: [32m'irb'[39m,
  [32;1mRepl [0m  _name: [32m'xterm'[39m,
  [32;1mRepl [0m  _readable: [33mtrue[39m,
  [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "ruby" [32m+0ms[0m
  [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+4ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+5ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+43ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjcfL" [35m+1ms[0m
  [35;1mengine [0mhandshaking client "RkPQe0ACGgzXQWtoAAAB" [35m+0ms[0m
  [34;1mengine:socket [0msending packet "open" ({"sid":"RkPQe0ACGgzXQWtoAAAB","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+29ms[0m
  [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+41ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [31;1mengine:polling [0mwriting "96:0{"sid":"RkPQe0ACGgzXQWtoAAAB","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+1ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
  [33;1msocket.io:server [0mincoming connection with id RkPQe0ACGgzXQWtoAAAB [33m+36ms[0m
  [33;1msocket.io:client [0mconnecting to namespace / [33m+32ms[0m
  [36;1msocket.io:namespace [0madding socket to nsp / [36m+36ms[0m
  [36;1msocket.io:socket [0msocket connected - writing packet [36m+30ms[0m
  [36;1msocket.io:socket [0mjoining room RkPQe0ACGgzXQWtoAAAB [36m+0ms[0m
  [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+1ms[0m
  [32;1mserver [0mio.on("connection", (socket) => { [32m+30ms[0m
  [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
 [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+32ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+1ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+3ms[0m
  [36;1msocket.io:socket [0mjoined room RkPQe0ACGgzXQWtoAAAB [36m+1ms[0m
  [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+7ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+3ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+35ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjil-" [35m+0ms[0m
  [35;1mengine [0mhandshaking client "5w35iYhEWQm_iAN5AAAC" [35m+1ms[0m
  [34;1mengine:socket [0msending packet "open" ({"sid":"5w35iYhEWQm_iAN5AAAC","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+31ms[0m
  [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+34ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [31;1mengine:polling [0mwriting "96:0{"sid":"5w35iYhEWQm_iAN5AAAC","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+1ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
  [33;1msocket.io:server [0mincoming connection with id 5w35iYhEWQm_iAN5AAAC [33m+35ms[0m
  [33;1msocket.io:client [0mconnecting to namespace / [33m+34ms[0m
  [36;1msocket.io:namespace [0madding socket to nsp / [36m+35ms[0m
  [36;1msocket.io:socket [0msocket connected - writing packet [36m+33ms[0m
  [36;1msocket.io:socket [0mjoining room 5w35iYhEWQm_iAN5AAAC [36m+1ms[0m
  [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
  [32;1mserver [0mio.on("connection", (socket) => { [32m+34ms[0m
  [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
 [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+35ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+3ms[0m
  [36;1msocket.io:socket [0mjoined room 5w35iYhEWQm_iAN5AAAC [36m+1ms[0m
  [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+6ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+2ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+34ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjose" [35m+0ms[0m
  [35;1mengine [0mhandshaking client "XbDiEVEDIgI7xA2-AAAD" [35m+1ms[0m
  [34;1mengine:socket [0msending packet "open" ({"sid":"XbDiEVEDIgI7xA2-AAAD","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+31ms[0m
  [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+34ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [31;1mengine:polling [0mwriting "96:0{"sid":"XbDiEVEDIgI7xA2-AAAD","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
  [33;1msocket.io:server [0mincoming connection with id XbDiEVEDIgI7xA2-AAAD [33m+35ms[0m
  [33;1msocket.io:client [0mconnecting to namespace / [33m+33ms[0m
  [36;1msocket.io:namespace [0madding socket to nsp / [36m+34ms[0m
  [36;1msocket.io:socket [0msocket connected - writing packet [36m+32ms[0m
  [36;1msocket.io:socket [0mjoining room XbDiEVEDIgI7xA2-AAAD [36m+0ms[0m
  [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
  [32;1mserver [0mio.on("connection", (socket) => { [32m+32ms[0m
  [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
 [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+33ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+1ms[0m
  [36;1msocket.io:socket [0mjoined room XbDiEVEDIgI7xA2-AAAD [36m+1ms[0m
  [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC,XbDiEVEDIgI7xA2-AAAD [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+3ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+38ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjqdE&sid=XbDiEVEDIgI7xA2-AAAD" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+38ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+36ms[0m
  [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+3ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [35;1mengine [0mupgrading existing transport [35m+33ms[0m
  [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+36ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+8ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+4ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjqdr&sid=XbDiEVEDIgI7xA2-AAAD" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+37ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+4ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [33;1mengine:ws [0mreceived "2probe" [33m+0ms[0m
  [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+3ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+3ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):001:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "irb(main):001:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "irb(main):001:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "irb(main):001:0> ") [32m+0ms[0m
  [32;1mserver [0m    data: "irb(main):001:0> " [32m+147ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} [32m+148ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+148ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+76ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+1ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [31;1mengine:polling [0mwriting "89:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]" [31m+76ms[0m
  [33;1mengine:ws [0mreceived "5" [33m+80ms[0m
  [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+33ms[0m
  [31;1mengine:polling [0mclosing [31m+34ms[0m
  [31;1mengine:polling [0mtransport discarded - closing right away [31m+0ms[0m
  [31;1mexpress:router [0mdispatching GET / [31m+5s[0m
  [31;1mexpress:router [0mquery  : / [31m+1ms[0m
  [31;1mexpress:router [0mexpressInit  : / [31m+1ms[0m
  [31;1mexpress:router [0mtextParser  : / [31m+0ms[0m
  [32;1mbody-parser:text [0mskip empty body [32m+0ms[0m
  [31;1mexpress:router [0mserveStatic  : / [31m+1ms[0m
  [36;1msend [0mstat "/app/public/index.html" [36m+0ms[0m
  [36;1msend [0mpipe "/app/public/index.html" [36m+2ms[0m
  [36;1msend [0maccept ranges [36m+0ms[0m
  [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
  [36;1msend [0mmodified Thu, 15 Nov 2018 07:15:53 GMT [36m+0ms[0m
  [36;1msend [0metag W/"28c-1671639e828" [36m+1ms[0m
  [36;1msend [0mcontent-type text/html [36m+0ms[0m
  [33;1msocket.io:client [0mclient close with reason transport close [33m+4s[0m
  [36;1msocket.io:socket [0mclosing socket - reason transport close [36m+4s[0m
  [32;1mserver [0m  ["disconnect"] [32m+4s[0m
  [32;1mserver [0m    [io of / .clients] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC [32m+1ms[0m
  [31;1mexpress:router [0mdispatching GET /main.js [31m+52ms[0m
  [31;1mexpress:router [0mquery  : /main.js [31m+0ms[0m
  [31;1mexpress:router [0mexpressInit  : /main.js [31m+1ms[0m
  [31;1mexpress:router [0mtextParser  : /main.js [31m+0ms[0m
  [32;1mbody-parser:text [0mskip empty body [32m+53ms[0m
  [31;1mexpress:router [0mserveStatic  : /main.js [31m+1ms[0m
  [36;1msend [0mstat "/app/public/main.js" [36m+50ms[0m
  [36;1msend [0mpipe "/app/public/main.js" [36m+1ms[0m
  [36;1msend [0maccept ranges [36m+0ms[0m
  [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
  [36;1msend [0mmodified Thu, 15 Nov 2018 14:12:09 GMT [36m+0ms[0m
  [36;1msend [0metag W/"1250ee-16717b702a8" [36m+0ms[0m
  [36;1msend [0mcontent-type application/javascript [36m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+5s[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjrnE" [35m+0ms[0m
  [35;1mengine [0mhandshaking client "1a_lX5Xy_gODM1F3AAAE" [35m+0ms[0m
  [34;1mengine:socket [0msending packet "open" ({"sid":"1a_lX5Xy_gODM1F3AAAE","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+5s[0m
  [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+5s[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [31;1mengine:polling [0mwriting "96:0{"sid":"1a_lX5Xy_gODM1F3AAAE","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
  [33;1msocket.io:server [0mincoming connection with id 1a_lX5Xy_gODM1F3AAAE [33m+5s[0m
  [33;1msocket.io:client [0mconnecting to namespace / [33m+452ms[0m
  [36;1msocket.io:namespace [0madding socket to nsp / [36m+5s[0m
  [36;1msocket.io:socket [0msocket connected - writing packet [36m+452ms[0m
  [36;1msocket.io:socket [0mjoining room 1a_lX5Xy_gODM1F3AAAE [36m+0ms[0m
  [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
  [32;1mserver [0mio.on("connection", (socket) => { [32m+451ms[0m
  [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
 [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+2ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+5s[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+2ms[0m
  [36;1msocket.io:socket [0mjoined room 1a_lX5Xy_gODM1F3AAAE [36m+2ms[0m
  [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC,1a_lX5Xy_gODM1F3AAAE [32m+1ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+151ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjrpY&sid=1a_lX5Xy_gODM1F3AAAE" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+1ms[0m
  [31;1mengine:polling [0msetting request [31m+151ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+148ms[0m
  [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
  [35;1mengine [0mupgrading existing transport [35m+29ms[0m
  [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+29ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+10ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjrqE&sid=1a_lX5Xy_gODM1F3AAAE" [35m+1ms[0m
  [35;1mengine [0msetting new request for existing client [35m+1ms[0m
  [31;1mengine:polling [0msetting request [31m+41ms[0m
  [33;1mengine:ws [0mreceived "2probe" [33m+5s[0m
  [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
  [34;1mengine:socket [0mwriting a noop packet to polling for fast upgrade [34m+134ms[0m
  [31;1mengine:polling [0mwriting "1:6" [31m+123ms[0m
  [33;1mengine:ws [0mreceived "5" [33m+132ms[0m
  [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+31ms[0m
  [31;1mengine:polling [0mclosing [31m+31ms[0m
  [31;1mengine:polling [0mtransport discarded - closing right away [31m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+2s[0m
  [34;1mengine:socket [0mpacket [34m+2s[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+3s[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+3s[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+3s[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"1\"}]"] [33m+3s[0m
  [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":"1"}]) [34m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"1\"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":"1"}]) [34m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"1\"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":"1"}]) [34m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+234ms[0m
  [34;1mengine:socket [0mpacket [34m+233ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+233ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+233ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+233ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"\"}]"] [33m+233ms[0m
  [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":""}]) [34m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"\"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":""}]) [34m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"\"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":""}]) [34m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+8s[0m
  [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 1
)] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = => 1
)] result: "1
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1
=> 1
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1
=> 1
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):002:0> )] result: "1
=> 1
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "1
=> 1
", result: "1
=> 1
irb(main):002:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1
=> 1
irb(main):002:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1
=> 1
irb(main):002:0>  [32m+12ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+19ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+14ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]" [33m+14ms[0m
  [31;1mengine:polling [0mclosing [31m+25s[0m
  [31;1mengine:polling [0mtransport not writable - buffering orderly close [31m+1ms[0m
  [33;1msocket.io:client [0mclient close with reason ping timeout [33m+22s[0m
  [36;1msocket.io:socket [0mclosing socket - reason ping timeout [36m+22s[0m
  [32;1mserver [0m  ["disconnect"] [32m+22s[0m
  [32;1mserver [0m    [io of / .clients] error: null, clients: RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC,1a_lX5Xy_gODM1F3AAAE [32m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+22s[0m
  [34;1mengine:socket [0mpacket [34m+22s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [31;1mengine:polling [0mclosing [31m+23ms[0m
  [31;1mengine:polling [0mtransport not writable - buffering orderly close [31m+0ms[0m
  [33;1msocket.io:client [0mclient close with reason ping timeout [33m+23ms[0m
  [36;1msocket.io:socket [0mclosing socket - reason ping timeout [36m+23ms[0m
  [32;1mserver [0m  ["disconnect"] [32m+23ms[0m
  [32;1mserver [0m    [io of / .clients] error: null, clients: 5w35iYhEWQm_iAN5AAAC,1a_lX5Xy_gODM1F3AAAE [32m+1ms[0m
  [31;1mengine:polling [0mclosing [31m+35ms[0m
  [31;1mengine:polling [0mtransport not writable - buffering orderly close [31m+0ms[0m
  [33;1msocket.io:client [0mclient close with reason ping timeout [33m+35ms[0m
  [36;1msocket.io:socket [0mclosing socket - reason ping timeout [36m+35ms[0m
  [32;1mserver [0m  ["disconnect"] [32m+34ms[0m
  [32;1mserver [0m    [io of / .clients] error: null, clients: 1a_lX5Xy_gODM1F3AAAE [32m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+1ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+25s[0m
  [34;1mengine:socket [0mpacket [34m+25s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+2s[0m
  [34;1mengine:socket [0mpacket [34m+2s[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+12m[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+12m[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+12m[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+214ms[0m
  [34;1mengine:socket [0mpacket [34m+214ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+213ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+213ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+213ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+12m[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):003:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):003:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):003:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):003:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):003:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):003:0> \"}]"] [33m+12m[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+256ms[0m
  [34;1mengine:socket [0mpacket [34m+256ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+256ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+265ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+257ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+262ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):004:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):004:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):004:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):004:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):004:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):004:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):004:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):004:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):004:0> \"}]"] [33m+269ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):004:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):004:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+445ms[0m
  [34;1mengine:socket [0mpacket [34m+445ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+445ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+454ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+446ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+74ms[0m
  [34;1mengine:socket [0mpacket [34m+74ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+73ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+73ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+73ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+67ms[0m
  [34;1mengine:socket [0mpacket [34m+67ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+67ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+68ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+68ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+109ms[0m
  [34;1mengine:socket [0mpacket [34m+109ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+108ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+108ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+108ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+701ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):005:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):005:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):005:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):005:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):005:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):005:0> \"}]"] [33m+709ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+176ms[0m
  [34;1mengine:socket [0mpacket [34m+177ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+177ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+185ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+177ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+183ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):006:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):006:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):006:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):006:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):006:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):006:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):006:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):006:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):006:0> \"}]"] [33m+191ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):006:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):006:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+124ms[0m
  [34;1mengine:socket [0mpacket [34m+124ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+124ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+132ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+124ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+24ms[0m
  [34;1mengine:socket [0mpacket [34m+24ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+23ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+24ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+24ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+33ms[0m
  [34;1mengine:socket [0mpacket [34m+33ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+34ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+34ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+79ms[0m
  [34;1mengine:socket [0mpacket [34m+79ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+79ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+79ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+79ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+268ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):007:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):007:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):007:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):007:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):007:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):007:0> \"}]"] [33m+274ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+106ms[0m
  [34;1mengine:socket [0mpacket [34m+107ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+107ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+115ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+107ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+87ms[0m
  [34;1mengine:socket [0mpacket [34m+87ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+88ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+88ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+88ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+157ms[0m
  [34;1mengine:socket [0mpacket [34m+158ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+157ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+157ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+157ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"213"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"213"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"213"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 213 } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "213", bufferInterval = 5, write = true)] [32m+365ms[0m
  [32;1mRepl [0m  this.process.write('213' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 213
=> 213
irb(main):008:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "213
=> 213
irb(main):008:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "213
=> 213
irb(main):008:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "213
=> 213
irb(main):008:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 213
=> 213
irb(main):008:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}],"nsp":"/"} as 2["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"213\\r\\n=> 213\\r\\nirb(main):008:0> \"}]"] [33m+374ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+138ms[0m
  [34;1mengine:socket [0mpacket [34m+139ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+140ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+150ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+141ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+150ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):009:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):009:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):009:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):009:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):009:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):009:0> \"}]"] [33m+161ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}]" [33m+14ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+122ms[0m
  [34;1mengine:socket [0mpacket [34m+123ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+123ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+136ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+125ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+131ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):010:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):010:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):010:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):010:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):010:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):010:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):010:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):010:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):010:0> \"}]"] [33m+141ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):010:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):010:0> "}]" [33m+13ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+63ms[0m
  [34;1mengine:socket [0mpacket [34m+64ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+65ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+76ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+66ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+107ms[0m
  [34;1mengine:socket [0mpacket [34m+106ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+105ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+106ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+106ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+178ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):011:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):011:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):011:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):011:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):011:0>  [32m+3ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}],"nsp":"/"} [32m+3ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):011:0> \"}]"] [33m+187ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}]) [34m+4ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}]" [33m+5ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"33"}]" [33m+163ms[0m
  [34;1mengine:socket [0mpacket [34m+163ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"33"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [32m+163ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [36m+167ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"33"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"33"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 33 } [32m+165ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} as 2["syncLine",{"line":"33"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"333"}]" [33m+163ms[0m
  [34;1mengine:socket [0mpacket [34m+163ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"333"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"333"}]} [32m+162ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"333"}]} [36m+162ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"333"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"333"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 333 } [32m+163ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"333"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"333"}],"nsp":"/"} as 2["syncLine",{"line":"333"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+110ms[0m
  [34;1mengine:socket [0mpacket [34m+110ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+110ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+110ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+110ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"333"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"333"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"333"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"333"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"333"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"333"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 333 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "333", bufferInterval = 5, write = true)] [32m+444ms[0m
  [32;1mRepl [0m  this.process.write('333' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 333
=> 333
irb(main):012:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "333
=> 333
irb(main):012:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "333
=> 333
irb(main):012:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "333
=> 333
irb(main):012:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 333
=> 333
irb(main):012:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}],"nsp":"/"} as 2["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"333\\r\\n=> 333\\r\\nirb(main):012:0> \"}]"] [33m+451ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+29ms[0m
  [34;1mengine:socket [0mpacket [34m+29ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+30ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+38ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+31ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+129ms[0m
  [34;1mengine:socket [0mpacket [34m+129ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+128ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+129ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+129ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+166ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):013:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):013:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):013:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):013:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):013:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):013:0> \"}]"] [33m+177ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+23ms[0m
  [34;1mengine:socket [0mpacket [34m+23ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+24ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+35ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+25ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"33"}]" [33m+186ms[0m
  [34;1mengine:socket [0mpacket [34m+186ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"33"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [32m+184ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [36m+186ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"33"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"33"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 33 } [32m+186ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} as 2["syncLine",{"line":"33"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"331"}]" [33m+102ms[0m
  [34;1mengine:socket [0mpacket [34m+102ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"331"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"331"}]} [32m+102ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"331"}]} [36m+102ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"331"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"331"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 331 } [32m+102ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"331"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"331"}],"nsp":"/"} as 2["syncLine",{"line":"331"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3312 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3312"}],"nsp":"/"} as 2["syncLine",{"line":"3312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"33123"}]" [33m+304ms[0m
  [34;1mengine:socket [0mpacket [34m+305ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"33123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"33123"}]} [32m+303ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"33123"}]} [36m+304ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"33123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"33123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 33123 } [32m+304ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"33123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"33123"}],"nsp":"/"} as 2["syncLine",{"line":"33123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"331232"}]" [33m+68ms[0m
  [34;1mengine:socket [0mpacket [34m+67ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"331232"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"331232"}]} [32m+66ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"331232"}]} [36m+68ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"331232"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"331232"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 331232 } [32m+68ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"331232"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"331232"}],"nsp":"/"} as 2["syncLine",{"line":"331232"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+4ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+3ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"331232"}]" [33m+3ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"331232"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"331232"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"331232"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"331232"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"331232"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 331232 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "331232", bufferInterval = 5, write = true)] [32m+698ms[0m
  [32;1mRepl [0m  this.process.write('331232' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 331232
=> 331232
irb(main):014:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "331232
=> 331232
irb(main):014:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "331232
=> 331232
irb(main):014:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "331232
=> 331232
irb(main):014:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 331232
=> 331232
irb(main):014:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}],"nsp":"/"} as 2["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"331232\\r\\n=> 331232\\r\\nirb(main):014:0> \"}]"] [33m+709ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}]" [33m+13ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+11ms[0m
  [34;1mengine:socket [0mpacket [34m+11ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+13ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+24ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+142ms[0m
  [34;1mengine:socket [0mpacket [34m+143ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+141ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+142ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+143ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+162ms[0m
  [32;1mRepl [0m  this.process.write('1' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 1
=> 1
irb(main):015:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1
=> 1
irb(main):015:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1
=> 1
irb(main):015:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1
=> 1
irb(main):015:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1
=> 1
irb(main):015:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):015:0> \"}]"] [33m+172ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}]" [33m+13ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+21ms[0m
  [34;1mengine:socket [0mpacket [34m+23ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+23ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+25ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+42ms[0m
  [34;1mengine:socket [0mpacket [34m+41ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+40ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+42ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+41ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+81ms[0m
  [34;1mengine:socket [0mpacket [34m+81ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+80ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+81ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+81ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+156ms[0m
  [34;1mengine:socket [0mpacket [34m+156ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+155ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+155ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+156ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"213"}]" [33m+14ms[0m
  [34;1mengine:socket [0mpacket [34m+14ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"213"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [32m+14ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"213"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 213 } [32m+14ms[0m
  [32;1mRepl [0m[bufferWrite(string = "213", bufferInterval = 5, write = true)] [32m+317ms[0m
  [32;1mRepl [0m  this.process.write('213' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 213
=> 213
irb(main):016:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "213
=> 213
irb(main):016:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "213
=> 213
irb(main):016:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "213
=> 213
irb(main):016:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 213
=> 213
irb(main):016:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}],"nsp":"/"} [32m+14ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}],"nsp":"/"} as 2["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"213\\r\\n=> 213\\r\\nirb(main):016:0> \"}]"] [33m+331ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}]) [34m+16ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}]" [33m+17ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+76ms[0m
  [34;1mengine:socket [0mpacket [34m+77ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+78ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+94ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+82ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+55ms[0m
  [34;1mengine:socket [0mpacket [34m+54ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+51ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+53ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+53ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+4ms[0m
  [34;1mengine:socket [0mpacket [34m+4ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+3ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+36ms[0m
  [34;1mengine:socket [0mpacket [34m+36ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+35ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+36ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+36ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+3ms[0m
  [34;1mengine:socket [0mpacket [34m+3ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+179ms[0m
  [32;1mRepl [0m  this.process.write('312' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 312
=> 312
irb(main):017:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "312
=> 312
irb(main):017:0> " [32m+2ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "312
=> 312
irb(main):017:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "312
=> 312
irb(main):017:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 312
=> 312
irb(main):017:0>  [32m+18ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}],"nsp":"/"} [32m+20ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):017:0> \"}]"] [33m+195ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}]) [34m+21ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}]" [33m+21ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+109ms[0m
  [34;1mengine:socket [0mpacket [34m+109ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+110ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+129ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+112ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+4ms[0m
  [34;1mengine:socket [0mpacket [34m+4ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+3ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+4ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+118ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):018:0> )] result: "
" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):018:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):018:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):018:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):018:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):018:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):018:0> \"}]"] [33m+125ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):018:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):018:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+18ms[0m
  [34;1mengine:socket [0mpacket [34m+18ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+18ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+29ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+19ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+61ms[0m
  [34;1mengine:socket [0mpacket [34m+61ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+59ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+61ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+61ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"313"}]" [33m+253ms[0m
  [34;1mengine:socket [0mpacket [34m+253ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"313"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"313"}]} [32m+251ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"313"}]} [36m+252ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"313"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"313"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 313 } [32m+253ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"313"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"313"}],"nsp":"/"} as 2["syncLine",{"line":"313"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"313"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"313"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"313"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"313"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"313"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"313"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 313 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "313", bufferInterval = 5, write = true)] [32m+342ms[0m
  [32;1mRepl [0m  this.process.write('313' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 313
=> 313
)] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):019:0> )] result: "313
=> 313
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "313
=> 313
irb(main):019:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "313
=> 313
irb(main):019:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "313
=> 313
irb(main):019:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 313
=> 313
irb(main):019:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}],"nsp":"/"} as 2["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"313\\r\\n=> 313\\r\\nirb(main):019:0> \"}]"] [33m+350ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+151ms[0m
  [34;1mengine:socket [0mpacket [34m+152ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+153ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+162ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+154ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+3ms[0m
  [34;1mengine:socket [0mpacket [34m+3ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+2ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+164ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
=> 12
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):020:0> )] result: "12
=> 12
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
irb(main):020:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
irb(main):020:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):020:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):020:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):020:0> \"}]"] [33m+173ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+46ms[0m
  [34;1mengine:socket [0mpacket [34m+46ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+48ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+58ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+49ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+38ms[0m
  [34;1mengine:socket [0mpacket [34m+38ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+37ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+37ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+37ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+92ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
)] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):021:0> )] result: "3
=> 3
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "3
=> 3
", result: "3
=> 3
irb(main):021:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):021:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):021:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}],"nsp":"/"} [32m+14ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):021:0> \"}]"] [33m+106ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}]) [34m+15ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}]" [33m+15ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+49ms[0m
  [34;1mengine:socket [0mpacket [34m+49ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+50ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+64ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+51ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+78ms[0m
  [34;1mengine:socket [0mpacket [34m+78ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+76ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+77ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+78ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"132"}]" [33m+144ms[0m
  [34;1mengine:socket [0mpacket [34m+145ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"132"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"132"}]} [32m+144ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"132"}]} [36m+144ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"132"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"132"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 132 } [32m+145ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"132"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"132"}],"nsp":"/"} as 2["syncLine",{"line":"132"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1323"}]" [33m+52ms[0m
  [34;1mengine:socket [0mpacket [34m+51ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1323"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1323"}]} [32m+50ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1323"}]} [36m+51ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1323"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1323"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1323 } [32m+51ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1323"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1323"}],"nsp":"/"} as 2["syncLine",{"line":"1323"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+16ms[0m
  [34;1mengine:socket [0mpacket [34m+16ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+15ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+16ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+17ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1323"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1323"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1323"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1323"}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1323"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1323"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1323 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1323", bufferInterval = 5, write = true)] [32m+344ms[0m
  [32;1mRepl [0m  this.process.write('1323' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 1323
=> 1323
)] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1323
=> 1323
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1323
=> 1323
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):022:0> )] result: "1323
=> 1323
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+4ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "1323
=> 1323
", result: "1323
=> 1323
irb(main):022:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1323
=> 1323
irb(main):022:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1323
=> 1323
irb(main):022:0>  [32m+14ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}],"nsp":"/"} [32m+14ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}],"nsp":"/"} as 2["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1323\\r\\n=> 1323\\r\\nirb(main):022:0> \"}]"] [33m+356ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}]) [34m+15ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}]" [33m+16ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+52ms[0m
  [34;1mengine:socket [0mpacket [34m+52ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+54ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+68ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+55ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+63ms[0m
  [34;1mengine:socket [0mpacket [34m+63ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+61ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+63ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+62ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+120ms[0m
  [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 1
=> 1
irb(main):023:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1
=> 1
irb(main):023:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1
=> 1
irb(main):023:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1
=> 1
irb(main):023:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1
=> 1
irb(main):023:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):023:0> \"}]"] [33m+128ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+8ms[0m
  [34;1mengine:socket [0mpacket [34m+8ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+8ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+18ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+122ms[0m
  [34;1mengine:socket [0mpacket [34m+122ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+121ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+121ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+121ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+7ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+0ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+139ms[0m
  [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 312
)] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = => 312
)] result: "312
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "312
=> 312
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "312
=> 312
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):024:0> )] result: "312
=> 312
" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+4ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "312
=> 312
", result: "312
=> 312
irb(main):024:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "312
=> 312
irb(main):024:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 312
=> 312
irb(main):024:0>  [32m+12ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):024:0> \"}]"] [33m+150ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+79ms[0m
  [34;1mengine:socket [0mpacket [34m+79ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+80ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+92ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+80ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"32"}]" [33m+77ms[0m
  [34;1mengine:socket [0mpacket [34m+77ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"32"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [32m+77ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [36m+77ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"32"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"32"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 32 } [32m+77ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} as 2["syncLine",{"line":"32"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"32"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"32"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"32"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"32"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 32 } [32m+0ms[0m
  [32;1mRepl [0m[bufferWrite(string = "32", bufferInterval = 5, write = true)] [32m+163ms[0m
  [32;1mRepl [0m  this.process.write('32' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 32
=> 32
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):025:0> )] result: "32
=> 32
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "32
=> 32
irb(main):025:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "32
=> 32
irb(main):025:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "32
=> 32
irb(main):025:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 32
=> 32
irb(main):025:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}],"nsp":"/"} as 2["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"32\\r\\n=> 32\\r\\nirb(main):025:0> \"}]"] [33m+170ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+10ms[0m
  [34;1mengine:socket [0mpacket [34m+10ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+10ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+18ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+58ms[0m
  [34;1mengine:socket [0mpacket [34m+58ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+57ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+58ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+58ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+52ms[0m
  [34;1mengine:socket [0mpacket [34m+52ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+51ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+52ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+52ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"13"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"13"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"13"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"13"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 13 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "13", bufferInterval = 5, write = true)] [32m+126ms[0m
  [32;1mRepl [0m  this.process.write('13' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 13
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 13
)] result: "13
" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):026:0> )] result: "13
=> 13
" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "13
=> 13
irb(main):026:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "13
=> 13
irb(main):026:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "13
=> 13
irb(main):026:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 13
=> 13
irb(main):026:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}],"nsp":"/"} as 2["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"13\\r\\n=> 13\\r\\nirb(main):026:0> \"}]"] [33m+134ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+53ms[0m
  [34;1mengine:socket [0mpacket [34m+53ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+53ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+62ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+57ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+3ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+66ms[0m
  [34;1mengine:socket [0mpacket [34m+66ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+62ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+66ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+64ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+64ms[0m
  [34;1mengine:socket [0mpacket [34m+64ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+64ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+64ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+64ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"13"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"13"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"13"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"13"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 13 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "13", bufferInterval = 5, write = true)] [32m+190ms[0m
  [32;1mRepl [0m  this.process.write('13' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 13
=> 13
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):027:0> )] result: "13
=> 13
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "13
=> 13
irb(main):027:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "13
=> 13
irb(main):027:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "13
=> 13
irb(main):027:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 13
=> 13
irb(main):027:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}],"nsp":"/"} as 2["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"13\\r\\n=> 13\\r\\nirb(main):027:0> \"}]"] [33m+197ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+43ms[0m
  [34;1mengine:socket [0mpacket [34m+43ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+43ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+51ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+44ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+12ms[0m
  [34;1mengine:socket [0mpacket [34m+12ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+12ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+13ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+75ms[0m
  [34;1mengine:socket [0mpacket [34m+75ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+74ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+74ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+75ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2131"}]" [33m+132ms[0m
  [34;1mengine:socket [0mpacket [34m+132ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2131"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131"}]} [32m+132ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131"}]} [36m+132ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2131"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2131"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2131 } [32m+132ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2131"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2131"}],"nsp":"/"} as 2["syncLine",{"line":"2131"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21313"}]" [33m+86ms[0m
  [34;1mengine:socket [0mpacket [34m+87ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21313"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21313"}]} [32m+86ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21313"}]} [36m+86ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21313"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21313"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 21313 } [32m+86ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21313"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21313"}],"nsp":"/"} as 2["syncLine",{"line":"21313"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213131"}]" [33m+151ms[0m
  [34;1mengine:socket [0mpacket [34m+150ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213131"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213131"}]} [32m+150ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213131"}]} [36m+150ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213131"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213131"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 213131 } [32m+150ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213131"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213131"}],"nsp":"/"} as 2["syncLine",{"line":"213131"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2131312"}]" [33m+34ms[0m
  [34;1mengine:socket [0mpacket [34m+34ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2131312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131312"}]} [32m+33ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131312"}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2131312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2131312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2131312 } [32m+34ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2131312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2131312"}],"nsp":"/"} as 2["syncLine",{"line":"2131312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+23ms[0m
  [34;1mengine:socket [0mpacket [34m+24ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+24ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+24ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+24ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2131312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2131312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2131312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2131312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2131312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2131312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 2131312 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "2131312", bufferInterval = 5, write = true)] [32m+563ms[0m
  [32;1mRepl [0m  this.process.write('2131312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 2131312
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 2131312
)] result: "2131312
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "2131312
=> 2131312
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "2131312
=> 2131312
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):028:0> )] result: "2131312
=> 2131312
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "2131312
=> 2131312
", result: "2131312
=> 2131312
irb(main):028:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "2131312
=> 2131312
irb(main):028:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 2131312
=> 2131312
irb(main):028:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}],"nsp":"/"} [32m+13ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}],"nsp":"/"} as 2["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2131312\\r\\n=> 2131312\\r\\nirb(main):028:0> \"}]"] [33m+575ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}]" [33m+13ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+19ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+160ms[0m
  [34;1mengine:socket [0mpacket [34m+160ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+160ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+160ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+160ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+172ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 3
)] result: "3
" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):029:0> )] result: "3
=> 3
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):029:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):029:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):029:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):029:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):029:0> \"}]"] [33m+179ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+115ms[0m
  [34;1mengine:socket [0mpacket [34m+115ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+115ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+122ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+8ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+123ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+8ms[0m
  [34;1mengine:socket [0mpacket [34m+9ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+124ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):030:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+5ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):030:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):030:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):030:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):030:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):030:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):030:0> \"}]"] [33m+135ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):030:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):030:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+171ms[0m
  [34;1mengine:socket [0mpacket [34m+171ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+171ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+183ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+172ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+15ms[0m
  [34;1mengine:socket [0mpacket [34m+15ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+14ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+14ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+0ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+187ms[0m
  [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 1
=> 1
irb(main):031:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1
=> 1
irb(main):031:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1
=> 1
irb(main):031:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1
=> 1
irb(main):031:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1
=> 1
irb(main):031:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):031:0> \"}]"] [33m+195ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+10ms[0m
  [34;1mengine:socket [0mpacket [34m+10ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+10ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+19ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+12ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"23"}]" [33m+53ms[0m
  [34;1mengine:socket [0mpacket [34m+54ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"23"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [32m+53ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [36m+53ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"23"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"23"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 23 } [32m+53ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} as 2["syncLine",{"line":"23"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+81ms[0m
  [34;1mengine:socket [0mpacket [34m+80ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+79ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+80ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+81ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"23"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"23"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"23"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"23"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 23 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "23", bufferInterval = 5, write = true)] [32m+152ms[0m
  [32;1mRepl [0m  this.process.write('23' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 23
=> 23
irb(main):032:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "23
=> 23
irb(main):032:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "23
=> 23
irb(main):032:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "23
=> 23
irb(main):032:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 23
=> 23
irb(main):032:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}],"nsp":"/"} as 2["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"23\\r\\n=> 23\\r\\nirb(main):032:0> \"}]"] [33m+160ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+47ms[0m
  [34;1mengine:socket [0mpacket [34m+47ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+48ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+58ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+49ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+2ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+31ms[0m
  [34;1mengine:socket [0mpacket [34m+31ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+30ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+31ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+31ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+162ms[0m
  [34;1mengine:socket [0mpacket [34m+163ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+161ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+162ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+163ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+8ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+7ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+41ms[0m
  [34;1mengine:socket [0mpacket [34m+41ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+41ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+41ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+41ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+302ms[0m
  [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123123
=> 123123
irb(main):033:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123123
=> 123123
irb(main):033:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123123
=> 123123
irb(main):033:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123123
=> 123123
irb(main):033:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123123
=> 123123
irb(main):033:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):033:0> \"}]"] [33m+311ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+114ms[0m
  [34;1mengine:socket [0mpacket [34m+114ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+115ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+126ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+115ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+21ms[0m
  [34;1mengine:socket [0mpacket [34m+21ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+20ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+21ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+21ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+144ms[0m
  [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 1
=> 1
irb(main):034:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1
=> 1
irb(main):034:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1
=> 1
irb(main):034:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1
=> 1
irb(main):034:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1
=> 1
irb(main):034:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):034:0> \"}]"] [33m+154ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}]" [33m+13ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+17ms[0m
  [34;1mengine:socket [0mpacket [34m+17ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+19ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+30ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+19ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"32"}]" [33m+133ms[0m
  [34;1mengine:socket [0mpacket [34m+133ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"32"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [32m+131ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [36m+133ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"32"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"32"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 32 } [32m+133ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} as 2["syncLine",{"line":"32"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"32"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"32"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"32"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"32"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 32 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "32", bufferInterval = 5, write = true)] [32m+161ms[0m
  [32;1mRepl [0m  this.process.write('32' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 32
=> 32
irb(main):035:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "32
=> 32
irb(main):035:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "32
=> 32
irb(main):035:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "32
=> 32
irb(main):035:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 32
=> 32
irb(main):035:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}],"nsp":"/"} as 2["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"32\\r\\n=> 32\\r\\nirb(main):035:0> \"}]"] [33m+170ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+13ms[0m
  [34;1mengine:socket [0mpacket [34m+13ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+14ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+26ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+15ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+40ms[0m
  [34;1mengine:socket [0mpacket [34m+41ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+40ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+40ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+41ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"131"}]" [33m+126ms[0m
  [34;1mengine:socket [0mpacket [34m+125ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"131"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"131"}]} [32m+124ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"131"}]} [36m+125ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"131"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"131"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 131 } [32m+125ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"131"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"131"}],"nsp":"/"} as 2["syncLine",{"line":"131"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1312"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1312 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1312"}],"nsp":"/"} as 2["syncLine",{"line":"1312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+2ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1312"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1312"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1312"}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1312 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1312", bufferInterval = 5, write = true)] [32m+191ms[0m
  [32;1mRepl [0m  this.process.write('1312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 1312
=> 1312
irb(main):036:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1312
=> 1312
irb(main):036:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1312
=> 1312
irb(main):036:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1312
=> 1312
irb(main):036:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1312
=> 1312
irb(main):036:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}],"nsp":"/"} as 2["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1312\\r\\n=> 1312\\r\\nirb(main):036:0> \"}]"] [33m+202ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}]" [33m+13ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+47ms[0m
  [34;1mengine:socket [0mpacket [34m+47ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+47ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+59ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+48ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+111ms[0m
  [34;1mengine:socket [0mpacket [34m+111ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+110ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+112ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+112ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+4ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"31"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"31"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 31 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "31", bufferInterval = 5, write = true)] [32m+165ms[0m
  [32;1mRepl [0m  this.process.write('31' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 31
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "31
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "31
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 31
)] result: "31
" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):037:0> )] result: "31
=> 31
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+4ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "31
", result: "31
=> 31
irb(main):037:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "31
=> 31
irb(main):037:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 31
=> 31
irb(main):037:0>  [32m+21ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}],"nsp":"/"} [32m+21ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}],"nsp":"/"} as 2["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"31\\r\\n=> 31\\r\\nirb(main):037:0> \"}]"] [33m+185ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}]) [34m+21ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}]" [33m+21ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+42ms[0m
  [34;1mengine:socket [0mpacket [34m+42ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+42ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+63ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+42ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+88ms[0m
  [34;1mengine:socket [0mpacket [34m+88ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+89ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+89ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+89ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+136ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):038:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):038:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):038:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):038:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):038:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):038:0> \"}]"] [33m+143ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+56ms[0m
  [34;1mengine:socket [0mpacket [34m+56ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+56ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+63ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+57ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+7ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+75ms[0m
  [34;1mengine:socket [0mpacket [34m+75ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+74ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+74ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+74ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+49ms[0m
  [34;1mengine:socket [0mpacket [34m+49ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+48ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+49ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+49ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+192ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 123
)] result: "123
" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):039:0> )] result: "123
=> 123
" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):039:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):039:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):039:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):039:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):039:0> \"}]"] [33m+200ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+92ms[0m
  [34;1mengine:socket [0mpacket [34m+92ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+92ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+100ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+93ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+3ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+35ms[0m
  [34;1mengine:socket [0mpacket [34m+35ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+33ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+140ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
=> 12
irb(main):040:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
irb(main):040:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
irb(main):040:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):040:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):040:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):040:0> \"}]"] [33m+150ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+2ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}]" [33m+14ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+95ms[0m
  [34;1mengine:socket [0mpacket [34m+95ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+97ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+109ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+98ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+49ms[0m
  [34;1mengine:socket [0mpacket [34m+49ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+48ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+49ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+49ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+3ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+153ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):041:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):041:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):041:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):041:0> ") [32m+4ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):041:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}],"nsp":"/"} [32m+14ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):041:0> \"}]"] [33m+165ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}]) [34m+14ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}]" [33m+14ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+50ms[0m
  [34;1mengine:socket [0mpacket [34m+50ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+51ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+64ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+51ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+0ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+101ms[0m
  [34;1mengine:socket [0mpacket [34m+101ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+102ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+102ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+102ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+0ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+160ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):042:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):042:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):042:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):042:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):042:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):042:0> \"}]"] [33m+168ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+132ms[0m
  [34;1mengine:socket [0mpacket [34m+132ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+132ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+141ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+133ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+23ms[0m
  [34;1mengine:socket [0mpacket [34m+23ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+22ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+23ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+24ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+157ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):043:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):043:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):043:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):043:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):043:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):043:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):043:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):043:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):043:0> \"}]"] [33m+166ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):043:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):043:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+20ms[0m
  [34;1mengine:socket [0mpacket [34m+20ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+21ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+31ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+22ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+14ms[0m
  [34;1mengine:socket [0mpacket [34m+15ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+13ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+14ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+45ms[0m
  [34;1mengine:socket [0mpacket [34m+44ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+43ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+43ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+44ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+75ms[0m
  [34;1mengine:socket [0mpacket [34m+75ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+74ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+74ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+74ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+3ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+9ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+10ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+164ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):044:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):044:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):044:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):044:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):044:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}],"nsp":"/"} [32m+13ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):044:0> \"}]"] [33m+175ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}]) [34m+15ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}]" [33m+18ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+70ms[0m
  [34;1mengine:socket [0mpacket [34m+70ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+71ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+81ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+71ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
  [34;1mengine:socket [0mpacket [34m+30ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+31ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+31ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+112ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 12
irb(main):045:0> )] result: "12
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
irb(main):045:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
irb(main):045:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):045:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):045:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):045:0> \"}]"] [33m+118ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+19ms[0m
  [34;1mengine:socket [0mpacket [34m+19ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+19ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+27ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+20ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+143ms[0m
  [34;1mengine:socket [0mpacket [34m+143ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+142ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+142ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+142ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+168ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 3
irb(main):046:0> )] result: "3
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "3
", result: "3
=> 3
irb(main):046:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):046:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):046:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):046:0> \"}]"] [33m+179ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+32ms[0m
  [34;1mengine:socket [0mpacket [34m+32ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+32ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+43ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+32ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+0ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+0ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+112ms[0m
  [34;1mengine:socket [0mpacket [34m+112ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+112ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+112ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+112ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+151ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):047:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):047:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):047:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):047:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):047:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):047:0> \"}]"] [33m+158ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+144ms[0m
  [34;1mengine:socket [0mpacket [34m+145ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+145ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+152ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+145ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+29ms[0m
  [34;1mengine:socket [0mpacket [34m+29ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+29ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+29ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+29ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+180ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):048:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):048:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):048:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):048:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):048:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):048:0> \"}]"] [33m+188ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+149ms[0m
  [34;1mengine:socket [0mpacket [34m+149ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+149ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+157ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+150ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+151ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):049:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):049:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):049:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):049:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):049:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):049:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):049:0> \"}]"] [33m+159ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):049:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):049:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+60ms[0m
  [34;1mengine:socket [0mpacket [34m+60ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+60ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+68ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+61ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+40ms[0m
  [34;1mengine:socket [0mpacket [34m+40ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+39ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+39ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+39ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+55ms[0m
  [34;1mengine:socket [0mpacket [34m+55ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+55ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+55ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+55ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+144ms[0m
  [34;1mengine:socket [0mpacket [34m+144ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+144ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+144ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+144ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+8ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+8ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+45ms[0m
  [34;1mengine:socket [0mpacket [34m+45ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+44ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+44ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+45ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+4ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+357ms[0m
  [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123123
=> 123123
irb(main):050:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123123
=> 123123
irb(main):050:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123123
=> 123123
irb(main):050:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123123
=> 123123
irb(main):050:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123123
=> 123123
irb(main):050:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):050:0> \"}]"] [33m+364ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+136ms[0m
  [34;1mengine:socket [0mpacket [34m+136ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+136ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+143ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+136ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+48ms[0m
  [34;1mengine:socket [0mpacket [34m+48ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+48ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+48ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+48ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+196ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 12
)] result: "12
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):051:0> )] result: "12
=> 12
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "12
=> 12
", result: "12
=> 12
irb(main):051:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):051:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):051:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):051:0> \"}]"] [33m+207ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+21ms[0m
  [34;1mengine:socket [0mpacket [34m+22ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+22ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+33ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+22ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+110ms[0m
  [34;1mengine:socket [0mpacket [34m+109ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+109ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+109ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+110ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+13ms[0m
  [34;1mengine:socket [0mpacket [34m+13ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+12ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+12ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+12ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+27ms[0m
  [34;1mengine:socket [0mpacket [34m+28ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+28ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+28ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+178ms[0m
  [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 312
=> 312
irb(main):052:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "312
=> 312
irb(main):052:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "312
=> 312
irb(main):052:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "312
=> 312
irb(main):052:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 312
=> 312
irb(main):052:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):052:0> \"}]"] [33m+185ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+131ms[0m
  [34;1mengine:socket [0mpacket [34m+132ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+131ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+131ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+132ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+2ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+148ms[0m
  [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 312
=> 312
irb(main):053:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "312
=> 312
irb(main):053:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "312
=> 312
irb(main):053:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "312
=> 312
irb(main):053:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 312
=> 312
irb(main):053:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):053:0> \"}]"] [33m+157ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+15ms[0m
  [34;1mengine:socket [0mpacket [34m+15ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+15ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+24ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+16ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+148ms[0m
  [34;1mengine:socket [0mpacket [34m+148ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+147ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+147ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+148ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+4ms[0m
  [34;1mengine:socket [0mpacket [34m+4ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+3ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+2ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+4ms[0m
  [34;1mengine:socket [0mpacket [34m+4ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+3ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+4ms[0m
  [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+179ms[0m
  [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 312
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 312
)] result: "312
" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):054:0> )] result: "312
=> 312
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+5ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "312
=> 312
irb(main):054:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "312
=> 312
irb(main):054:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "312
=> 312
irb(main):054:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 312
=> 312
irb(main):054:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):054:0> \"}]"] [33m+188ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+19ms[0m
  [34;1mengine:socket [0mpacket [34m+19ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+19ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+29ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+20ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+193ms[0m
  [34;1mengine:socket [0mpacket [34m+193ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+192ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+193ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+192ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+38ms[0m
  [34;1mengine:socket [0mpacket [34m+38ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+39ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+39ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+39ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123"}]" [33m+87ms[0m
  [34;1mengine:socket [0mpacket [34m+87ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [32m+87ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [36m+87ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3123 } [32m+87ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} as 2["syncLine",{"line":"3123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3123 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3123", bufferInterval = 5, write = true)] [32m+344ms[0m
  [32;1mRepl [0m  this.process.write('3123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3123
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 3123
)] result: "3123
" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):055:0> )] result: "3123
=> 3123
" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3123
=> 3123
irb(main):055:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3123
=> 3123
irb(main):055:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3123
=> 3123
irb(main):055:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3123
=> 3123
irb(main):055:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}],"nsp":"/"} as 2["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3123\\r\\n=> 3123\\r\\nirb(main):055:0> \"}]"] [33m+351ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+122ms[0m
  [34;1mengine:socket [0mpacket [34m+122ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+122ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+129ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+122ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+74ms[0m
  [34;1mengine:socket [0mpacket [34m+74ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+74ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+74ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+74ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+130ms[0m
  [34;1mengine:socket [0mpacket [34m+130ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+131ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+131ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+131ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+32ms[0m
  [34;1mengine:socket [0mpacket [34m+31ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+31ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+32ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12312"}]" [33m+14ms[0m
  [34;1mengine:socket [0mpacket [34m+14ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12312"}]} [32m+13ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12312"}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12312 } [32m+13ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12312", bufferInterval = 5, write = true)] [32m+383ms[0m
  [32;1mRepl [0m  this.process.write('12312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12312
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 12312
)] result: "12312
" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):056:0> )] result: "12312
=> 12312
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12312
=> 12312
irb(main):056:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12312
=> 12312
irb(main):056:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12312
=> 12312
irb(main):056:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12312
=> 12312
irb(main):056:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}],"nsp":"/"} as 2["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12312\\r\\n=> 12312\\r\\nirb(main):056:0> \"}]"] [33m+391ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+26ms[0m
  [34;1mengine:socket [0mpacket [34m+27ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+27ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+35ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+27ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+356ms[0m
  [34;1mengine:socket [0mpacket [34m+355ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+355ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+355ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+357ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+8ms[0m
  [34;1mengine:socket [0mpacket [34m+8ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+7ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123"}]" [33m+74ms[0m
  [34;1mengine:socket [0mpacket [34m+74ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [32m+72ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [36m+74ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3123 } [32m+73ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} as 2["syncLine",{"line":"3123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31231"}]" [33m+402ms[0m
  [34;1mengine:socket [0mpacket [34m+403ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31231"}]} [32m+401ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31231"}]} [36m+402ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31231 } [32m+402ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31231"}],"nsp":"/"} as 2["syncLine",{"line":"31231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312312"}]" [33m+23ms[0m
  [34;1mengine:socket [0mpacket [34m+22ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312312"}]} [32m+22ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312312"}]} [36m+22ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312312 } [32m+22ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312312"}],"nsp":"/"} as 2["syncLine",{"line":"312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123123"}]" [33m+78ms[0m
  [34;1mengine:socket [0mpacket [34m+78ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123123"}]} [32m+79ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123123"}]} [36m+79ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3123123 } [32m+79ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123123"}],"nsp":"/"} as 2["syncLine",{"line":"3123123"}] [32m+0ms[0m
  [31;1mexpress:router [0mdispatching GET / [31m+12m[0m
  [31;1mexpress:router [0mquery  : / [31m+0ms[0m
  [31;1mexpress:router [0mexpressInit  : / [31m+1ms[0m
  [31;1mexpress:router [0mtextParser  : / [31m+0ms[0m
  [32;1mbody-parser:text [0mskip empty body [32m+12m[0m
  [31;1mexpress:router [0mserveStatic  : / [31m+0ms[0m
  [36;1msend [0mstat "/app/public/index.html" [36m+12m[0m
  [36;1msend [0mpipe "/app/public/index.html" [36m+1ms[0m
  [36;1msend [0maccept ranges [36m+0ms[0m
  [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
  [36;1msend [0mmodified Thu, 15 Nov 2018 07:15:53 GMT [36m+0ms[0m
  [36;1msend [0metag W/"28c-1671639e828" [36m+1ms[0m
  [36;1msend [0mcontent-type text/html [36m+0ms[0m
  [33;1msocket.io:client [0mclient close with reason transport close [33m+2s[0m
  [36;1msocket.io:socket [0mclosing socket - reason transport close [36m+633ms[0m
  [32;1mserver [0m  ["disconnect"] [32m+633ms[0m
  [32;1mserver [0m    [io of / .clients] error: null, clients:  [32m+1ms[0m
  [32;1mRepl [0m[kill()] this.process: UnixTerminal { _internalee: EventEmitter { _events: [Object: null prototype] {}, _eventsCount: [33m0[39m, _maxListeners: [90mundefined[39m }, _socket: PipeSocket { connecting: [33mfalse[39m, _hadError: [33mfalse[39m, _handle: Pipe { onread: [36m[Function: onStreamRead][39m, reading: [33mtrue[39m, [[32mSymbol(owner)[39m]: [36m[Circular][39m }, _parent: [1mnull[22m, _host: [1mnull[22m, _readableState: ReadableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m }, length: [33m0[39m, pipes: [1mnull[22m, pipesCount: [33m0[39m, flowing: [33mtrue[39m, ended: [33mfalse[39m, endEmitted: [33mfalse[39m, reading: [33mtrue[39m, sync: [33mfalse[39m, needReadable: [33mtrue[39m, emittedReadable: [33mfalse[39m, readableListening: [33mfalse[39m, resumeScheduled: [33mfalse[39m, emitClose: [33mfalse[39m, destroyed: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, awaitDrain: [33m0[39m, readingMore: [33mfalse[39m, decoder: StringDecoder { encoding: [32m'utf8'[39m, [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> }, encoding: [32m'utf8'[39m }, readable: [33mfalse[39m, _events: [Object: null prototype] { end: [36m[Function: onReadableStreamEnd][39m, error: [36m[Function][39m, close: [36m[Function][39m }, _eventsCount: [33m3[39m, _maxListeners: [90mundefined[39m, _writableState: WritableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, finalCalled: [33mfalse[39m, needDrain: [33mfalse[39m, ending: [33mfalse[39m, ended: [33mfalse[39m, finished: [33mfalse[39m, destroyed: [33mfalse[39m, decodeStrings: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, length: [33m0[39m, writing: [33mfalse[39m, corked: [33m0[39m, sync: [33mfalse[39m, bufferProcessing: [33mfalse[39m, onwrite: [36m[Function: bound onwrite][39m, writecb: [1mnull[22m, writelen: [33m0[39m, bufferedRequest: [1mnull[22m, lastBufferedRequest: [1mnull[22m, pendingcb: [33m0[39m, prefinished: [33mfalse[39m, errorEmitted: [33mfalse[39m, emitClose: [33mfalse[39m, bufferedRequestCount: [33m0[39m, corkedRequestsFree: { next: [1mnull[22m, entry: [1mnull[22m, finish: [36m[Function: bound onCorkedFinish][39m } }, writable: [33mfalse[39m, allowHalfOpen: [33mfalse[39m, _sockname: [1mnull[22m, _pendingData: [1mnull[22m, _pendingEncoding: [32m''[39m, server: [1mnull[22m, _server: [1mnull[22m, [[32mSymbol(asyncId)[39m]: [33m85[39m, [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m, [[32mSymbol(timeout)[39m]: [1mnull[22m, [[32mSymbol(kBytesRead)[39m]: [33m0[39m, [[32mSymbol(kBytesWritten)[39m]: [33m0[39m }, _pid: [33m28[39m, _fd: [33m22[39m, _pty: [32m'/dev/pts/1'[39m, _file: [32m'irb'[39m, _name: [32m'xterm'[39m, _readable: [33mtrue[39m, _writable: [33mtrue[39m } [32m+2s[0m
  [32;1mRepl [0mRepl process killed. [32m+2ms[0m
  [31;1mexpress:router [0mdispatching GET /main.js [31m+47ms[0m
  [31;1mexpress:router [0mquery  : /main.js [31m+0ms[0m
  [31;1mexpress:router [0mexpressInit  : /main.js [31m+0ms[0m
  [31;1mexpress:router [0mtextParser  : /main.js [31m+1ms[0m
  [32;1mbody-parser:text [0mskip empty body [32m+48ms[0m
  [31;1mexpress:router [0mserveStatic  : /main.js [31m+0ms[0m
  [36;1msend [0mstat "/app/public/main.js" [36m+46ms[0m
  [36;1msend [0mpipe "/app/public/main.js" [36m+1ms[0m
  [36;1msend [0maccept ranges [36m+0ms[0m
  [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
  [36;1msend [0mmodified Thu, 15 Nov 2018 14:12:09 GMT [36m+0ms[0m
  [36;1msend [0metag W/"1250ee-16717b702a8" [36m+0ms[0m
  [36;1msend [0mcontent-type application/javascript [36m+1ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+12m[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhDy" [35m+0ms[0m
  [35;1mengine [0mhandshaking client "HlDmTPAfzYNr-CmBAAAF" [35m+1ms[0m
  [34;1mengine:socket [0msending packet "open" ({"sid":"HlDmTPAfzYNr-CmBAAAF","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+1s[0m
  [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+12m[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [31;1mengine:polling [0mwriting "96:0{"sid":"HlDmTPAfzYNr-CmBAAAF","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
  [33;1msocket.io:server [0mincoming connection with id HlDmTPAfzYNr-CmBAAAF [33m+12m[0m
  [33;1msocket.io:client [0mconnecting to namespace / [33m+795ms[0m
  [36;1msocket.io:namespace [0madding socket to nsp / [36m+12m[0m
  [36;1msocket.io:socket [0msocket connected - writing packet [36m+795ms[0m
  [36;1msocket.io:socket [0mjoining room HlDmTPAfzYNr-CmBAAAF [36m+1ms[0m
  [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
  [32;1mserver [0mio.on("connection", (socket) => { [32m+795ms[0m
  [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
 [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+2ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+1s[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+4ms[0m
  [36;1msocket.io:socket [0mjoined room HlDmTPAfzYNr-CmBAAAF [36m+2ms[0m
  [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: HlDmTPAfzYNr-CmBAAAF [32m+1ms[0m
  [32;1mserver [0m  [initRepl] lang: ruby, welcome_msg: WELCOME TO SPACECRAFT!
 [32m+0ms[0m
  [32;1mRepl [0m[kill()] this.process: [1mnull[22m [32m+796ms[0m
  [32;1mRepl [0mRepl process killed. [32m+0ms[0m
  [32;1mRepl [0m[Repl.init(language = "ruby")] [32m+0ms[0m
  [32;1mRepl [0m  INITIALIZED command: irb [32m+5ms[0m
  [32;1mRepl [0m  this.process: UnixTerminal {
  [32;1mRepl [0m  _internalee:
  [32;1mRepl [0m   EventEmitter {
  [32;1mRepl [0m     _events: [Object: null prototype] {},
  [32;1mRepl [0m     _eventsCount: [33m0[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
  [32;1mRepl [0m  _socket:
  [32;1mRepl [0m   PipeSocket {
  [32;1mRepl [0m     connecting: [33mfalse[39m,
  [32;1mRepl [0m     _hadError: [33mfalse[39m,
  [32;1mRepl [0m     _handle:
  [32;1mRepl [0m      Pipe {
  [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
  [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
  [32;1mRepl [0m     _parent: [1mnull[22m,
  [32;1mRepl [0m     _host: [1mnull[22m,
  [32;1mRepl [0m     _readableState:
  [32;1mRepl [0m      ReadableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        pipes: [1mnull[22m,
  [32;1mRepl [0m        pipesCount: [33m0[39m,
  [32;1mRepl [0m        flowing: [1mnull[22m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        endEmitted: [33mfalse[39m,
  [32;1mRepl [0m        reading: [33mfalse[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        needReadable: [33mfalse[39m,
  [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
  [32;1mRepl [0m        readableListening: [33mfalse[39m,
  [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        awaitDrain: [33m0[39m,
  [32;1mRepl [0m        readingMore: [33mfalse[39m,
  [32;1mRepl [0m        decoder:
  [32;1mRepl [0m         StringDecoder {
  [32;1mRepl [0m           encoding: [32m'utf8'[39m,
  [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
  [32;1mRepl [0m        encoding: [32m'utf8'[39m },
  [32;1mRepl [0m     readable: [33mfalse[39m,
  [32;1mRepl [0m     _events:
  [32;1mRepl [0m      [Object: null prototype] {
  [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
  [32;1mRepl [0m        error: [36m[Function][39m,
  [32;1mRepl [0m        close: [36m[Function][39m },
  [32;1mRepl [0m     _eventsCount: [33m3[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
  [32;1mRepl [0m     _writableState:
  [32;1mRepl [0m      WritableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        finalCalled: [33mfalse[39m,
  [32;1mRepl [0m        needDrain: [33mfalse[39m,
  [32;1mRepl [0m        ending: [33mfalse[39m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        finished: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        writing: [33mfalse[39m,
  [32;1mRepl [0m        corked: [33m0[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
  [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
  [32;1mRepl [0m        writecb: [1mnull[22m,
  [32;1mRepl [0m        writelen: [33m0[39m,
  [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        pendingcb: [33m0[39m,
  [32;1mRepl [0m        prefinished: [33mfalse[39m,
  [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
  [32;1mRepl [0m        corkedRequestsFree:
  [32;1mRepl [0m         { next: [1mnull[22m,
  [32;1mRepl [0m           entry: [1mnull[22m,
  [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
  [32;1mRepl [0m     writable: [33mfalse[39m,
  [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
  [32;1mRepl [0m     _sockname: [1mnull[22m,
  [32;1mRepl [0m     _pendingData: [1mnull[22m,
  [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
  [32;1mRepl [0m     server: [1mnull[22m,
  [32;1mRepl [0m     _server: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m6614[39m,
  [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
  [32;1mRepl [0m  _pid: [33m31[39m,
  [32;1mRepl [0m  _fd: [33m22[39m,
  [32;1mRepl [0m  _pty: [32m'/dev/pts/1'[39m,
  [32;1mRepl [0m  _file: [32m'irb'[39m,
  [32;1mRepl [0m  _name: [32m'xterm'[39m,
  [32;1mRepl [0m  _readable: [33mtrue[39m,
  [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "ruby" [32m+0ms[0m
  [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+7ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+7ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+151ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhGD&sid=HlDmTPAfzYNr-CmBAAAF" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+150ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+145ms[0m
  [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+6ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):001:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "irb(main):001:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "irb(main):001:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "irb(main):001:0> ") [32m+0ms[0m
  [32;1mserver [0m    data: "irb(main):001:0> " [32m+164ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} [32m+165ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+165ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+19ms[0m
  [35;1mengine [0mupgrading existing transport [35m+32ms[0m
  [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+13ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+12ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhGx&sid=HlDmTPAfzYNr-CmBAAAF" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+44ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+12ms[0m
  [31;1mengine:polling [0mwriting "89:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]" [31m+1ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
  [33;1mengine:ws [0mreceived "2probe" [33m+2s[0m
  [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+38ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhHb&sid=HlDmTPAfzYNr-CmBAAAF" [35m+1ms[0m
  [35;1mengine [0msetting new request for existing client [35m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+38ms[0m
  [34;1mengine:socket [0mwriting a noop packet to polling for fast upgrade [34m+124ms[0m
  [31;1mengine:polling [0mwriting "1:6" [31m+86ms[0m
  [33;1mengine:ws [0mreceived "5" [33m+134ms[0m
  [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+33ms[0m
  [31;1mengine:polling [0mclosing [31m+34ms[0m
  [31;1mengine:polling [0mtransport discarded - closing right away [31m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+579ms[0m
  [34;1mengine:socket [0mpacket [34m+579ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+762ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+926ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+763ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+58ms[0m
  [34;1mengine:socket [0mpacket [34m+58ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+57ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+57ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+57ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+271ms[0m
  [34;1mengine:socket [0mpacket [34m+271ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+271ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+271ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+272ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+0ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+1s[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 123
irb(main):002:0> )] result: "123
" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "123
", result: "123
=> 123
irb(main):002:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):002:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):002:0>  [32m+12ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):002:0> \"}]"] [33m+1s[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}]" [33m+13ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+221ms[0m
  [34;1mengine:socket [0mpacket [34m+221ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+222ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+234ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+222ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+7ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+229ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):003:0> )] result: "
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):003:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):003:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):003:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):003:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):003:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):003:0> \"}]"] [33m+235ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):003:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):003:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+60ms[0m
  [34;1mengine:socket [0mpacket [34m+60ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+60ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+67ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+60ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+77ms[0m
  [34;1mengine:socket [0mpacket [34m+77ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+75ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+76ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+76ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+160ms[0m
  [34;1mengine:socket [0mpacket [34m+160ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+160ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+160ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+160ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+16ms[0m
  [34;1mengine:socket [0mpacket [34m+16ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+15ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+16ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+16ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231"}]" [33m+186ms[0m
  [34;1mengine:socket [0mpacket [34m+186ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [32m+185ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [36m+185ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231 } [32m+185ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123121"}]" [33m+148ms[0m
  [34;1mengine:socket [0mpacket [34m+148ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123121"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121"}]} [32m+147ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121"}]} [36m+148ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123121"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123121"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123121 } [32m+148ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123121"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123121"}],"nsp":"/"} as 2["syncLine",{"line":"123123121"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231212"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231212"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231212"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231212"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231212 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231212"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231212"}],"nsp":"/"} as 2["syncLine",{"line":"1231231212"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312123"}]" [33m+42ms[0m
  [34;1mengine:socket [0mpacket [34m+42ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123"}]} [32m+42ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123"}]} [36m+42ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312123"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312123 } [32m+43ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312123"}],"nsp":"/"} as 2["syncLine",{"line":"12312312123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123121232"}]" [33m+120ms[0m
  [34;1mengine:socket [0mpacket [34m+120ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123121232"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121232"}]} [32m+119ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121232"}]} [36m+119ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123121232"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123121232"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123121232 } [32m+119ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123121232"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123121232"}],"nsp":"/"} as 2["syncLine",{"line":"123123121232"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231212321"}]" [33m+29ms[0m
  [34;1mengine:socket [0mpacket [34m+29ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231212321"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212321"}]} [32m+29ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212321"}]} [36m+29ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231212321"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231212321"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231212321 } [32m+29ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231212321"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231212321"}],"nsp":"/"} as 2["syncLine",{"line":"1231231212321"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312123213"}]" [33m+35ms[0m
  [34;1mengine:socket [0mpacket [34m+35ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312123213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123213"}]} [32m+36ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123213"}]} [36m+36ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312123213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312123213"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312123213 } [32m+36ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312123213"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312123213"}],"nsp":"/"} as 2["syncLine",{"line":"12312312123213"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+56ms[0m
  [34;1mengine:socket [0mpacket [34m+56ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+56ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+56ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+56ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12312312123213"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12312312123213"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312123213"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312123213"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12312312123213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12312312123213"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12312312123213 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12312312123213", bufferInterval = 5, write = true)] [32m+959ms[0m
  [32;1mRepl [0m  this.process.write('12312312123213' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12312312123213
=> 12312312123213
irb(main):004:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12312312123213
=> 12312312123213
irb(main):004:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12312312123213
=> 12312312123213
irb(main):004:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12312312123213
=> 12312312123213
irb(main):004:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12312312123213
=> 12312312123213
irb(main):004:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}],"nsp":"/"} as 2["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12312312123213\\r\\n=> 12312312123213\\r\\nirb(main):004:0> \"}]"] [33m+966ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+177ms[0m
  [34;1mengine:socket [0mpacket [34m+177ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+179ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+186ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+179ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+4ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+17ms[0m
  [34;1mengine:socket [0mpacket [34m+18ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+18ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+18ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+19ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+208ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):005:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):005:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):005:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):005:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):005:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):005:0> \"}]"] [33m+217ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+186ms[0m
  [34;1mengine:socket [0mpacket [34m+186ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+187ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+196ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+189ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"23"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"23"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"23"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"23"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 23 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} as 2["syncLine",{"line":"23"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+140ms[0m
  [34;1mengine:socket [0mpacket [34m+139ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+139ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+139ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+140ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"23"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"23"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"23"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"23"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 23 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "23", bufferInterval = 5, write = true)] [32m+341ms[0m
  [32;1mRepl [0m  this.process.write('23' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 23
=> 23
irb(main):006:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "23
=> 23
irb(main):006:0> " [32m+2ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "23
=> 23
irb(main):006:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "23
=> 23
irb(main):006:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 23
=> 23
irb(main):006:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}],"nsp":"/"} [32m+12ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}],"nsp":"/"} as 2["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"23\\r\\n=> 23\\r\\nirb(main):006:0> \"}]"] [33m+351ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}]) [34m+14ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}]" [33m+14ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+19ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+41ms[0m
  [34;1mengine:socket [0mpacket [34m+40ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+40ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+41ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+42ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+84ms[0m
  [34;1mengine:socket [0mpacket [34m+84ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+82ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+83ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+83ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+145ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):007:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):007:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):007:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+8ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):007:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):007:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} [32m+13ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):007:0> \"}]"] [33m+157ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]) [34m+15ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]" [33m+15ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+41ms[0m
  [34;1mengine:socket [0mpacket [34m+41ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+42ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+55ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+42ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+11ms[0m
  [34;1mengine:socket [0mpacket [34m+11ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+11ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+11ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+57ms[0m
  [34;1mengine:socket [0mpacket [34m+57ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+57ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+58ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+58ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+16ms[0m
  [34;1mengine:socket [0mpacket [34m+16ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+16ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+16ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+16ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+133ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):008:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):008:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):008:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):008:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):008:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):008:0> \"}]"] [33m+139ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+94ms[0m
  [34;1mengine:socket [0mpacket [34m+94ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+95ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+102ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+95ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+31ms[0m
  [34;1mengine:socket [0mpacket [34m+31ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+30ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+30ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+30ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+130ms[0m
  [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 1
=> 1
irb(main):009:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "1
=> 1
irb(main):009:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "1
=> 1
irb(main):009:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "1
=> 1
irb(main):009:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 1
=> 1
irb(main):009:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):009:0> \"}]"] [33m+137ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+26ms[0m
  [34;1mengine:socket [0mpacket [34m+27ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+27ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+27ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+115ms[0m
  [34;1mengine:socket [0mpacket [34m+115ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+115ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+115ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+115ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+13ms[0m
  [34;1mengine:socket [0mpacket [34m+13ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+14ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+14ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"31"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"31"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"31"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 31 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "31", bufferInterval = 5, write = true)] [32m+157ms[0m
  [32;1mRepl [0m  this.process.write('31' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 31
=> 31
irb(main):010:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "31
=> 31
irb(main):010:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "31
=> 31
irb(main):010:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+4ms[0m
  [34;1mengine:socket [0mpacket [34m+4ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+3ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+4ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "31
=> 31
irb(main):010:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 31
=> 31
irb(main):010:0>  [32m+3ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}],"nsp":"/"} [32m+3ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}],"nsp":"/"} as 2["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"31\\r\\n=> 31\\r\\nirb(main):010:0> \"}]"] [33m+164ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}]) [34m+4ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}]" [33m+4ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"23"}]" [33m+46ms[0m
  [34;1mengine:socket [0mpacket [34m+46ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"23"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [32m+46ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [36m+49ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"23"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"23"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 23 } [32m+46ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} as 2["syncLine",{"line":"23"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+60ms[0m
  [34;1mengine:socket [0mpacket [34m+60ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+60ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+60ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+61ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"23"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"23"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"23"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"23"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 23 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "23", bufferInterval = 5, write = true)] [32m+112ms[0m
  [32;1mRepl [0m  this.process.write('23' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 23
=> 23
irb(main):011:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "23
=> 23
irb(main):011:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "23
=> 23
irb(main):011:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "23
=> 23
irb(main):011:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 23
=> 23
irb(main):011:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}],"nsp":"/"} as 2["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"23\\r\\n=> 23\\r\\nirb(main):011:0> \"}]"] [33m+119ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+136ms[0m
  [34;1mengine:socket [0mpacket [34m+136ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+136ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+143ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+137ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+143ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):012:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):012:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):012:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):012:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):012:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):012:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):012:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):012:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):012:0> \"}]"] [33m+150ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):012:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):012:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+19ms[0m
  [34;1mengine:socket [0mpacket [34m+20ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+20ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+27ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+20ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+21ms[0m
  [34;1mengine:socket [0mpacket [34m+21ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+21ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+21ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+21ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+148ms[0m
  [34;1mengine:socket [0mpacket [34m+147ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+147ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+147ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+147ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+212ms[0m
  [34;1mengine:socket [0mpacket [34m+213ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+213ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+213ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+213ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+5ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+73ms[0m
  [34;1mengine:socket [0mpacket [34m+73ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+68ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+73ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+68ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231"}]" [33m+112ms[0m
  [34;1mengine:socket [0mpacket [34m+112ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [32m+112ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [36m+112ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231 } [32m+112ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123"}]" [33m+61ms[0m
  [34;1mengine:socket [0mpacket [34m+61ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [32m+61ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [36m+61ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123123 } [32m+61ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231"}]" [33m+135ms[0m
  [34;1mengine:socket [0mpacket [34m+135ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [32m+135ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [36m+135ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231231 } [32m+135ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+49ms[0m
  [34;1mengine:socket [0mpacket [34m+50ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+50ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+50ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+50ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12312312312"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12312312312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312312"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312312"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12312312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12312312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12312312312 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12312312312", bufferInterval = 5, write = true)] [32m+849ms[0m
  [32;1mRepl [0m  this.process.write('12312312312' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12312312312
=> 12312312312
irb(main):013:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12312312312
=> 12312312312
irb(main):013:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12312312312
=> 12312312312
irb(main):013:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12312312312
=> 12312312312
irb(main):013:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12312312312
=> 12312312312
irb(main):013:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}],"nsp":"/"} as 2["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12312312312\\r\\n=> 12312312312\\r\\nirb(main):013:0> \"}]"] [33m+859ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+20ms[0m
  [34;1mengine:socket [0mpacket [34m+20ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+21ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+31ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+22ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+137ms[0m
  [34;1mengine:socket [0mpacket [34m+137ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+136ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+137ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+137ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+165ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):014:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):014:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):014:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):014:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):014:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):014:0> \"}]"] [33m+174ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+10ms[0m
  [34;1mengine:socket [0mpacket [34m+11ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+12ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+22ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+12ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+75ms[0m
  [34;1mengine:socket [0mpacket [34m+75ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+74ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+74ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+75ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+29ms[0m
  [34;1mengine:socket [0mpacket [34m+29ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+28ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+29ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+12ms[0m
  [34;1mengine:socket [0mpacket [34m+12ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+12ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+12ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+12ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+135ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):015:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):015:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):015:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):015:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):015:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):015:0> \"}]"] [33m+145ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}]) [34m+12ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+113ms[0m
  [34;1mengine:socket [0mpacket [34m+113ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+113ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+125ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+115ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+20ms[0m
  [34;1mengine:socket [0mpacket [34m+20ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+18ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+20ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+20ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+135ms[0m
  [34;1mengine:socket [0mpacket [34m+135ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+134ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+135ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+135ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+26ms[0m
  [34;1mengine:socket [0mpacket [34m+26ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+25ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+25ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+25ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+69ms[0m
  [34;1mengine:socket [0mpacket [34m+69ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+68ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+69ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+70ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231"}]" [33m+120ms[0m
  [34;1mengine:socket [0mpacket [34m+120ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [32m+120ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [36m+120ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231 } [32m+120ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123"}]" [33m+95ms[0m
  [34;1mengine:socket [0mpacket [34m+95ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [32m+94ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [36m+95ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123123 } [32m+94ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231"}]" [33m+104ms[0m
  [34;1mengine:socket [0mpacket [34m+105ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [32m+104ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [36m+105ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231231 } [32m+105ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123123"}]" [33m+84ms[0m
  [34;1mengine:socket [0mpacket [34m+84ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123"}]} [32m+83ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123"}]} [36m+84ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123123123 } [32m+84ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231231"}]" [33m+85ms[0m
  [34;1mengine:socket [0mpacket [34m+86ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231"}]} [32m+86ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231"}]} [36m+86ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231231231 } [32m+86ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231231"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312312"}]" [33m+15ms[0m
  [34;1mengine:socket [0mpacket [34m+14ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312"}]} [32m+14ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312"}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312312312 } [32m+14ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123123123"}]" [33m+61ms[0m
  [34;1mengine:socket [0mpacket [34m+62ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123"}]} [32m+62ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123"}]} [36m+62ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123123123123 } [32m+62ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231231231"}]" [33m+103ms[0m
  [34;1mengine:socket [0mpacket [34m+102ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231231"}]} [32m+102ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231231"}]} [36m+102ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231231231"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231231231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231231231231231 } [32m+103ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231231231"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231231231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312312312"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312312312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312312312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312312312312312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312312312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312312312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123123123123"}]" [33m+52ms[0m
  [34;1mengine:socket [0mpacket [34m+52ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123123"}]} [32m+51ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123123"}]} [36m+51ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123123123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123123123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123123123123123 } [32m+51ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123123123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123123123123"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+649ms[0m
  [34;1mengine:socket [0mpacket [34m+650ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+649ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+650ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+650ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["initRepl",{"language":"shell"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["initRepl",{"language":"shell"}] as {"type":2,"nsp":"/","data":["initRepl",{"language":"shell"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["initRepl",{"language":"shell"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["initRepl",{"language":"shell"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["initRepl",{"language":"shell"}] [36m+0ms[0m
  [32;1mserver [0m  ["initRepl"] { language: shell } [32m+6ms[0m
  [32;1mserver [0m  [initRepl] lang: shell, welcome_msg:  [32m+0ms[0m
  [32;1mRepl [0m[kill()] this.process: UnixTerminal { _internalee: EventEmitter { _events: [Object: null prototype] {}, _eventsCount: [33m0[39m, _maxListeners: [90mundefined[39m }, _socket: PipeSocket { connecting: [33mfalse[39m, _hadError: [33mfalse[39m, _handle: Pipe { onread: [36m[Function: onStreamRead][39m, reading: [33mtrue[39m, [[32mSymbol(owner)[39m]: [36m[Circular][39m }, _parent: [1mnull[22m, _host: [1mnull[22m, _readableState: ReadableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m }, length: [33m0[39m, pipes: [1mnull[22m, pipesCount: [33m0[39m, flowing: [33mtrue[39m, ended: [33mfalse[39m, endEmitted: [33mfalse[39m, reading: [33mtrue[39m, sync: [33mfalse[39m, needReadable: [33mtrue[39m, emittedReadable: [33mfalse[39m, readableListening: [33mfalse[39m, resumeScheduled: [33mfalse[39m, emitClose: [33mfalse[39m, destroyed: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, awaitDrain: [33m0[39m, readingMore: [33mfalse[39m, decoder: StringDecoder { encoding: [32m'utf8'[39m, [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> }, encoding: [32m'utf8'[39m }, readable: [33mfalse[39m, _events: [Object: null prototype] { end: [36m[Function: onReadableStreamEnd][39m, error: [36m[Function][39m, close: [36m[Function][39m }, _eventsCount: [33m3[39m, _maxListeners: [90mundefined[39m, _writableState: WritableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, finalCalled: [33mfalse[39m, needDrain: [33mfalse[39m, ending: [33mfalse[39m, ended: [33mfalse[39m, finished: [33mfalse[39m, destroyed: [33mfalse[39m, decodeStrings: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, length: [33m0[39m, writing: [33mfalse[39m, corked: [33m0[39m, sync: [33mfalse[39m, bufferProcessing: [33mfalse[39m, onwrite: [36m[Function: bound onwrite][39m, writecb: [1mnull[22m, writelen: [33m0[39m, bufferedRequest: [1mnull[22m, lastBufferedRequest: [1mnull[22m, pendingcb: [33m0[39m, prefinished: [33mfalse[39m, errorEmitted: [33mfalse[39m, emitClose: [33mfalse[39m, bufferedRequestCount: [33m0[39m, corkedRequestsFree: { next: [1mnull[22m, entry: [1mnull[22m, finish: [36m[Function: bound onCorkedFinish][39m } }, writable: [33mfalse[39m, allowHalfOpen: [33mfalse[39m, _sockname: [1mnull[22m, _pendingData: [1mnull[22m, _pendingEncoding: [32m''[39m, server: [1mnull[22m, _server: [1mnull[22m, [[32mSymbol(asyncId)[39m]: [33m6614[39m, [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m, [[32mSymbol(timeout)[39m]: [1mnull[22m, [[32mSymbol(kBytesRead)[39m]: [33m0[39m, [[32mSymbol(kBytesWritten)[39m]: [33m0[39m }, _pid: [33m31[39m, _fd: [33m22[39m, _pty: [32m'/dev/pts/1'[39m, _file: [32m'irb'[39m, _name: [32m'xterm'[39m, _readable: [33mtrue[39m, _writable: [33mtrue[39m } [32m+2s[0m
  [32;1mRepl [0mRepl process killed. [32m+3ms[0m
  [32;1mRepl [0m[Repl.init(language = "shell")] [32m+0ms[0m
  [32;1mRepl [0m  INITIALIZED command: bash [32m+9ms[0m
  [32;1mRepl [0m  this.process: UnixTerminal {
  [32;1mRepl [0m  _internalee:
  [32;1mRepl [0m   EventEmitter {
  [32;1mRepl [0m     _events: [Object: null prototype] {},
  [32;1mRepl [0m     _eventsCount: [33m0[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
  [32;1mRepl [0m  _socket:
  [32;1mRepl [0m   PipeSocket {
  [32;1mRepl [0m     connecting: [33mfalse[39m,
  [32;1mRepl [0m     _hadError: [33mfalse[39m,
  [32;1mRepl [0m     _handle:
  [32;1mRepl [0m      Pipe {
  [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
  [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
  [32;1mRepl [0m     _parent: [1mnull[22m,
  [32;1mRepl [0m     _host: [1mnull[22m,
  [32;1mRepl [0m     _readableState:
  [32;1mRepl [0m      ReadableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        pipes: [1mnull[22m,
  [32;1mRepl [0m        pipesCount: [33m0[39m,
  [32;1mRepl [0m        flowing: [1mnull[22m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        endEmitted: [33mfalse[39m,
  [32;1mRepl [0m        reading: [33mfalse[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        needReadable: [33mfalse[39m,
  [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
  [32;1mRepl [0m        readableListening: [33mfalse[39m,
  [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        awaitDrain: [33m0[39m,
  [32;1mRepl [0m        readingMore: [33mfalse[39m,
  [32;1mRepl [0m        decoder:
  [32;1mRepl [0m         StringDecoder {
  [32;1mRepl [0m           encoding: [32m'utf8'[39m,
  [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
  [32;1mRepl [0m        encoding: [32m'utf8'[39m },
  [32;1mRepl [0m     readable: [33mfalse[39m,
  [32;1mRepl [0m     _events:
  [32;1mRepl [0m      [Object: null prototype] {
  [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
  [32;1mRepl [0m        error: [36m[Function][39m,
  [32;1mRepl [0m        close: [36m[Function][39m },
  [32;1mRepl [0m     _eventsCount: [33m3[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
  [32;1mRepl [0m     _writableState:
  [32;1mRepl [0m      WritableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        finalCalled: [33mfalse[39m,
  [32;1mRepl [0m        needDrain: [33mfalse[39m,
  [32;1mRepl [0m        ending: [33mfalse[39m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        finished: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        writing: [33mfalse[39m,
  [32;1mRepl [0m        corked: [33m0[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
  [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
  [32;1mRepl [0m        writecb: [1mnull[22m,
  [32;1mRepl [0m        writelen: [33m0[39m,
  [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        pendingcb: [33m0[39m,
  [32;1mRepl [0m        prefinished: [33mfalse[39m,
  [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
  [32;1mRepl [0m        corkedRequestsFree:
  [32;1mRepl [0m         { next: [1mnull[22m,
  [32;1mRepl [0m           entry: [1mnull[22m,
  [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
  [32;1mRepl [0m     writable: [33mfalse[39m,
  [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
  [32;1mRepl [0m     _sockname: [1mnull[22m,
  [32;1mRepl [0m     _pendingData: [1mnull[22m,
  [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
  [32;1mRepl [0m     server: [1mnull[22m,
  [32;1mRepl [0m     _server: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m8816[39m,
  [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
  [32;1mRepl [0m  _pid: [33m34[39m,
  [32;1mRepl [0m  _fd: [33m21[39m,
  [32;1mRepl [0m  _pty: [32m'/dev/pts/2'[39m,
  [32;1mRepl [0m  _file: [32m'bash'[39m,
  [32;1mRepl [0m  _name: [32m'xterm'[39m,
  [32;1mRepl [0m  _readable: [33mtrue[39m,
  [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "shell" [32m+0ms[0m
  [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = bash-4.4# )] result: "" [32m+2ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "bash-4.4# " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "bash-4.4# " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+7ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "bash-4.4# ") [32m+0ms[0m
  [32;1mserver [0m    data: "bash-4.4# " [32m+23ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"shell","data":"bash-4.4# "}],"nsp":"/"} [32m+23ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"shell","data":"bash-4.4# "}],"nsp":"/"} as 2["langChange",{"language":"shell","data":"bash-4.4# "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"shell\",\"data\":\"bash-4.4# \"}]"] [33m+2s[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"shell","data":"bash-4.4# "}]) [34m+23ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["langChange",{"language":"shell","data":"bash-4.4# "}]" [33m+23ms[0m
  [31;1mexpress:router [0mdispatching GET / [31m+8s[0m
  [31;1mexpress:router [0mquery  : / [31m+1ms[0m
  [31;1mexpress:router [0mexpressInit  : / [31m+0ms[0m
  [31;1mexpress:router [0mtextParser  : / [31m+0ms[0m
  [32;1mbody-parser:text [0mskip empty body [32m+8s[0m
  [31;1mexpress:router [0mserveStatic  : / [31m+0ms[0m
  [36;1msend [0mstat "/app/public/index.html" [36m+8s[0m
  [36;1msend [0mpipe "/app/public/index.html" [36m+0ms[0m
  [36;1msend [0maccept ranges [36m+0ms[0m
  [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
  [36;1msend [0mmodified Thu, 15 Nov 2018 07:15:53 GMT [36m+0ms[0m
  [36;1msend [0metag W/"28c-1671639e828" [36m+0ms[0m
  [36;1msend [0mcontent-type text/html [36m+0ms[0m
  [33;1msocket.io:client [0mclient close with reason transport close [33m+430ms[0m
  [36;1msocket.io:socket [0mclosing socket - reason transport close [36m+454ms[0m
  [32;1mserver [0m  ["disconnect"] [32m+431ms[0m
  [32;1mserver [0m    [io of / .clients] error: null, clients:  [32m+0ms[0m
  [32;1mRepl [0m[kill()] this.process: UnixTerminal { _internalee: EventEmitter { _events: [Object: null prototype] {}, _eventsCount: [33m0[39m, _maxListeners: [90mundefined[39m }, _socket: PipeSocket { connecting: [33mfalse[39m, _hadError: [33mfalse[39m, _handle: Pipe { onread: [36m[Function: onStreamRead][39m, reading: [33mtrue[39m, [[32mSymbol(owner)[39m]: [36m[Circular][39m }, _parent: [1mnull[22m, _host: [1mnull[22m, _readableState: ReadableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m }, length: [33m0[39m, pipes: [1mnull[22m, pipesCount: [33m0[39m, flowing: [33mtrue[39m, ended: [33mfalse[39m, endEmitted: [33mfalse[39m, reading: [33mtrue[39m, sync: [33mfalse[39m, needReadable: [33mtrue[39m, emittedReadable: [33mfalse[39m, readableListening: [33mfalse[39m, resumeScheduled: [33mfalse[39m, emitClose: [33mfalse[39m, destroyed: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, awaitDrain: [33m0[39m, readingMore: [33mfalse[39m, decoder: StringDecoder { encoding: [32m'utf8'[39m, [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> }, encoding: [32m'utf8'[39m }, readable: [33mfalse[39m, _events: [Object: null prototype] { end: [36m[Function: onReadableStreamEnd][39m, error: [36m[Function][39m, close: [36m[Function][39m }, _eventsCount: [33m3[39m, _maxListeners: [90mundefined[39m, _writableState: WritableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, finalCalled: [33mfalse[39m, needDrain: [33mfalse[39m, ending: [33mfalse[39m, ended: [33mfalse[39m, finished: [33mfalse[39m, destroyed: [33mfalse[39m, decodeStrings: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, length: [33m0[39m, writing: [33mfalse[39m, corked: [33m0[39m, sync: [33mtrue[39m, bufferProcessing: [33mfalse[39m, onwrite: [36m[Function: bound onwrite][39m, writecb: [1mnull[22m, writelen: [33m0[39m, bufferedRequest: [1mnull[22m, lastBufferedRequest: [1mnull[22m, pendingcb: [33m0[39m, prefinished: [33mfalse[39m, errorEmitted: [33mfalse[39m, emitClose: [33mfalse[39m, bufferedRequestCount: [33m0[39m, corkedRequestsFree: { next: [1mnull[22m, entry: [1mnull[22m, finish: [36m[Function: bound onCorkedFinish][39m } }, writable: [33mfalse[39m, allowHalfOpen: [33mfalse[39m, _sockname: [1mnull[22m, _pendingData: [1mnull[22m, _pendingEncoding: [32m''[39m, server: [1mnull[22m, _server: [1mnull[22m, [[32mSymbol(asyncId)[39m]: [33m8816[39m, [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m, [[32mSymbol(timeout)[39m]: [1mnull[22m, [[32mSymbol(kBytesRead)[39m]: [33m0[39m, [[32mSymbol(kBytesWritten)[39m]: [33m0[39m }, _pid: [33m34[39m, _fd: [33m21[39m, _pty: [32m'/dev/pts/2'[39m, _file: [32m'bash'[39m, _name: [32m'xterm'[39m, _readable: [33mtrue[39m, _writable: [33mtrue[39m } [32m+431ms[0m
  [32;1mRepl [0mRepl process killed. [32m+1ms[0m
  [31;1mexpress:router [0mdispatching GET /main.js [31m+43ms[0m
  [31;1mexpress:router [0mquery  : /main.js [31m+0ms[0m
  [31;1mexpress:router [0mexpressInit  : /main.js [31m+0ms[0m
  [31;1mexpress:router [0mtextParser  : /main.js [31m+0ms[0m
  [32;1mbody-parser:text [0mskip empty body [32m+43ms[0m
  [31;1mexpress:router [0mserveStatic  : /main.js [31m+0ms[0m
  [36;1msend [0mstat "/app/public/main.js" [36m+43ms[0m
  [36;1msend [0mpipe "/app/public/main.js" [36m+1ms[0m
  [36;1msend [0maccept ranges [36m+0ms[0m
  [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
  [36;1msend [0mmodified Thu, 15 Nov 2018 14:12:09 GMT [36m+0ms[0m
  [36;1msend [0metag W/"1250ee-16717b702a8" [36m+0ms[0m
  [36;1msend [0mcontent-type application/javascript [36m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+8s[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjCP" [35m+0ms[0m
  [35;1mengine [0mhandshaking client "DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
  [34;1mengine:socket [0msending packet "open" ({"sid":"DEflyucXzJNQ5nm4AAAG","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+1s[0m
  [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+8s[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [31;1mengine:polling [0mwriting "96:0{"sid":"DEflyucXzJNQ5nm4AAAG","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
  [33;1msocket.io:server [0mincoming connection with id DEflyucXzJNQ5nm4AAAG [33m+8s[0m
  [33;1msocket.io:client [0mconnecting to namespace / [33m+785ms[0m
  [36;1msocket.io:namespace [0madding socket to nsp / [36m+8s[0m
  [36;1msocket.io:socket [0msocket connected - writing packet [36m+784ms[0m
  [36;1msocket.io:socket [0mjoining room DEflyucXzJNQ5nm4AAAG [36m+0ms[0m
  [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
  [32;1mserver [0mio.on("connection", (socket) => { [32m+784ms[0m
  [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
 [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+0ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+1s[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+0ms[0m
  [36;1msocket.io:socket [0mjoined room DEflyucXzJNQ5nm4AAAG [36m+1ms[0m
  [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: DEflyucXzJNQ5nm4AAAG [32m+1ms[0m
  [32;1mserver [0m  [initRepl] lang: ruby, welcome_msg: WELCOME TO SPACECRAFT!
 [32m+0ms[0m
  [32;1mRepl [0m[kill()] this.process: [1mnull[22m [32m+784ms[0m
  [32;1mRepl [0mRepl process killed. [32m+0ms[0m
  [32;1mRepl [0m[Repl.init(language = "ruby")] [32m+0ms[0m
  [32;1mRepl [0m  INITIALIZED command: irb [32m+3ms[0m
  [32;1mRepl [0m  this.process: UnixTerminal {
  [32;1mRepl [0m  _internalee:
  [32;1mRepl [0m   EventEmitter {
  [32;1mRepl [0m     _events: [Object: null prototype] {},
  [32;1mRepl [0m     _eventsCount: [33m0[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
  [32;1mRepl [0m  _socket:
  [32;1mRepl [0m   PipeSocket {
  [32;1mRepl [0m     connecting: [33mfalse[39m,
  [32;1mRepl [0m     _hadError: [33mfalse[39m,
  [32;1mRepl [0m     _handle:
  [32;1mRepl [0m      Pipe {
  [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
  [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
  [32;1mRepl [0m     _parent: [1mnull[22m,
  [32;1mRepl [0m     _host: [1mnull[22m,
  [32;1mRepl [0m     _readableState:
  [32;1mRepl [0m      ReadableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        pipes: [1mnull[22m,
  [32;1mRepl [0m        pipesCount: [33m0[39m,
  [32;1mRepl [0m        flowing: [1mnull[22m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        endEmitted: [33mfalse[39m,
  [32;1mRepl [0m        reading: [33mfalse[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        needReadable: [33mfalse[39m,
  [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
  [32;1mRepl [0m        readableListening: [33mfalse[39m,
  [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        awaitDrain: [33m0[39m,
  [32;1mRepl [0m        readingMore: [33mfalse[39m,
  [32;1mRepl [0m        decoder:
  [32;1mRepl [0m         StringDecoder {
  [32;1mRepl [0m           encoding: [32m'utf8'[39m,
  [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
  [32;1mRepl [0m        encoding: [32m'utf8'[39m },
  [32;1mRepl [0m     readable: [33mfalse[39m,
  [32;1mRepl [0m     _events:
  [32;1mRepl [0m      [Object: null prototype] {
  [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
  [32;1mRepl [0m        error: [36m[Function][39m,
  [32;1mRepl [0m        close: [36m[Function][39m },
  [32;1mRepl [0m     _eventsCount: [33m3[39m,
  [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
  [32;1mRepl [0m     _writableState:
  [32;1mRepl [0m      WritableState {
  [32;1mRepl [0m        objectMode: [33mfalse[39m,
  [32;1mRepl [0m        highWaterMark: [33m16384[39m,
  [32;1mRepl [0m        finalCalled: [33mfalse[39m,
  [32;1mRepl [0m        needDrain: [33mfalse[39m,
  [32;1mRepl [0m        ending: [33mfalse[39m,
  [32;1mRepl [0m        ended: [33mfalse[39m,
  [32;1mRepl [0m        finished: [33mfalse[39m,
  [32;1mRepl [0m        destroyed: [33mfalse[39m,
  [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
  [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
  [32;1mRepl [0m        length: [33m0[39m,
  [32;1mRepl [0m        writing: [33mfalse[39m,
  [32;1mRepl [0m        corked: [33m0[39m,
  [32;1mRepl [0m        sync: [33mtrue[39m,
  [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
  [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
  [32;1mRepl [0m        writecb: [1mnull[22m,
  [32;1mRepl [0m        writelen: [33m0[39m,
  [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
  [32;1mRepl [0m        pendingcb: [33m0[39m,
  [32;1mRepl [0m        prefinished: [33mfalse[39m,
  [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
  [32;1mRepl [0m        emitClose: [33mfalse[39m,
  [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
  [32;1mRepl [0m        corkedRequestsFree:
  [32;1mRepl [0m         { next: [1mnull[22m,
  [32;1mRepl [0m           entry: [1mnull[22m,
  [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
  [32;1mRepl [0m     writable: [33mfalse[39m,
  [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
  [32;1mRepl [0m     _sockname: [1mnull[22m,
  [32;1mRepl [0m     _pendingData: [1mnull[22m,
  [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
  [32;1mRepl [0m     server: [1mnull[22m,
  [32;1mRepl [0m     _server: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m9067[39m,
  [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
  [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
  [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
  [32;1mRepl [0m  _pid: [33m36[39m,
  [32;1mRepl [0m  _fd: [33m21[39m,
  [32;1mRepl [0m  _pty: [32m'/dev/pts/1'[39m,
  [32;1mRepl [0m  _file: [32m'irb'[39m,
  [32;1mRepl [0m  _name: [32m'xterm'[39m,
  [32;1mRepl [0m  _readable: [33mtrue[39m,
  [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "ruby" [32m+1ms[0m
  [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+3ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+6ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+155ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjEo&sid=DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+154ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+153ms[0m
  [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [35;1mengine [0mupgrading existing transport [35m+23ms[0m
  [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+23ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):001:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "irb(main):001:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "irb(main):001:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+17ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjFR&sid=DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+1ms[0m
  [31;1mengine:polling [0msetting request [31m+41ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "irb(main):001:0> ") [32m+0ms[0m
  [32;1mserver [0m    data: "irb(main):001:0> " [32m+196ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} [32m+197ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+198ms[0m
  [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+22ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [31;1mengine:polling [0mwriting "89:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]" [31m+4ms[0m
  [33;1mengine:ws [0mreceived "2probe" [33m+1s[0m
  [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
  [35;1mengine [0mintercepting request for path "/socket.io/" [35m+41ms[0m
  [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjG6&sid=DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
  [35;1mengine [0msetting new request for existing client [35m+0ms[0m
  [31;1mengine:polling [0msetting request [31m+38ms[0m
  [34;1mengine:socket [0mexecuting batch send callback [34m+38ms[0m
  [34;1mengine:socket [0mwriting a noop packet to polling for fast upgrade [34m+81ms[0m
  [31;1mengine:polling [0mwriting "1:6" [31m+81ms[0m
  [33;1mengine:ws [0mreceived "5" [33m+132ms[0m
  [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+32ms[0m
  [31;1mengine:polling [0mclosing [31m+32ms[0m
  [31;1mengine:polling [0mtransport discarded - closing right away [31m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+276ms[0m
  [34;1mengine:socket [0mpacket [34m+276ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+428ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+625ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+429ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+47ms[0m
  [34;1mengine:socket [0mpacket [34m+47ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+46ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+46ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+47ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+25ms[0m
  [34;1mengine:socket [0mpacket [34m+25ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+24ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+24ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+25ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+163ms[0m
  [34;1mengine:socket [0mpacket [34m+163ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+163ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+164ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+164ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+44ms[0m
  [34;1mengine:socket [0mpacket [34m+47ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+48ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+49ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+51ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+3ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+133ms[0m
  [34;1mengine:socket [0mpacket [34m+131ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+127ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+128ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+127ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+853ms[0m
  [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123123
=> 123123
irb(main):002:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123123
=> 123123
irb(main):002:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123123
=> 123123
irb(main):002:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123123
=> 123123
irb(main):002:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123123
=> 123123
irb(main):002:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):002:0> \"}]"] [33m+859ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+156ms[0m
  [34;1mengine:socket [0mpacket [34m+156ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+156ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+163ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+156ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+162ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):003:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):003:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):003:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):003:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):003:0>  [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):003:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):003:0> \"}]"] [33m+168ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):003:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):003:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+154ms[0m
  [34;1mengine:socket [0mpacket [34m+154ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+154ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+160ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+154ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+7ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+0ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+164ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):004:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):004:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):004:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):004:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):004:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):004:0> \"}]"] [33m+174ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+137ms[0m
  [34;1mengine:socket [0mpacket [34m+137ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+137ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+148ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+137ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+143ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):005:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):005:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):005:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):005:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):005:0>  [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):005:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):005:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):005:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):005:0> \"}]"] [33m+149ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):005:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):005:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+17ms[0m
  [34;1mengine:socket [0mpacket [34m+17ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+17ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+23ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+17ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+7ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+126ms[0m
  [34;1mengine:socket [0mpacket [34m+127ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+127ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+127ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+127ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+157ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
=> 12
irb(main):006:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
irb(main):006:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
irb(main):006:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):006:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):006:0>  [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):006:0> \"}]"] [33m+163ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+154ms[0m
  [34;1mengine:socket [0mpacket [34m+154ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+154ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+160ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+154ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+0ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+155ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):007:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):007:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):007:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):007:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):007:0>  [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):007:0> "}],"nsp":"/"} [32m+6ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):007:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):007:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):007:0> \"}]"] [33m+161ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):007:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):007:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+198ms[0m
  [34;1mengine:socket [0mpacket [34m+199ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+199ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+205ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+199ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+108ms[0m
  [34;1mengine:socket [0mpacket [34m+107ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+111ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+114ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+115ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+4ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2"}]" [33m+8ms[0m
  [34;1mengine:socket [0mpacket [34m+8ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 2 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "2", bufferInterval = 5, write = true)] [32m+315ms[0m
  [32;1mRepl [0m  this.process.write('2' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 2
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "2
" [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "2
" [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 2
irb(main):008:0> )] result: "2
" [32m+3ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+2ms[0m
  [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "2
", result: "2
=> 2
irb(main):008:0> " [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "2
=> 2
irb(main):008:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 2
=> 2
irb(main):008:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}],"nsp":"/"} [32m+14ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}],"nsp":"/"} as 2["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2\\r\\n=> 2\\r\\nirb(main):008:0> \"}]"] [33m+329ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}]) [34m+15ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}]" [33m+15ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+136ms[0m
  [34;1mengine:socket [0mpacket [34m+136ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+136ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+151ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+138ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+144ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+7ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):009:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):009:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):009:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):009:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):009:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):009:0> "}],"nsp":"/"} [32m+14ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):009:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):009:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):009:0> \"}]"] [33m+156ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):009:0> "}]) [34m+14ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):009:0> "}]" [33m+14ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+147ms[0m
  [34;1mengine:socket [0mpacket [34m+147ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+147ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+160ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+147ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 2 } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "2", bufferInterval = 5, write = true)] [32m+155ms[0m
  [32;1mRepl [0m  this.process.write('2' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 2
=> 2
irb(main):010:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "2
=> 2
irb(main):010:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "2
=> 2
irb(main):010:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "2
=> 2
irb(main):010:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 2
=> 2
irb(main):010:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}],"nsp":"/"} [32m+13ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}],"nsp":"/"} as 2["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2\\r\\n=> 2\\r\\nirb(main):010:0> \"}]"] [33m+167ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}]) [34m+15ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}]" [33m+15ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+121ms[0m
  [34;1mengine:socket [0mpacket [34m+121ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+122ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+136ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+124ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+2ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+131ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+2ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):011:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):011:0> " [32m+2ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):011:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):011:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):011:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):011:0> "}],"nsp":"/"} [32m+13ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):011:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):011:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):011:0> \"}]"] [33m+142ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):011:0> "}]) [34m+14ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):011:0> "}]" [33m+14ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+16ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+77ms[0m
  [34;1mengine:socket [0mpacket [34m+77ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+75ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+77ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+76ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2133"}]" [33m+178ms[0m
  [34;1mengine:socket [0mpacket [34m+178ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2133"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2133"}]} [32m+176ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2133"}]} [36m+178ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2133"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2133"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 2133 } [32m+177ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2133"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2133"}],"nsp":"/"} as 2["syncLine",{"line":"2133"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+130ms[0m
  [34;1mengine:socket [0mpacket [34m+130ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+129ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+130ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+130ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2133"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2133"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2133"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2133"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2133"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2133"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 2133 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "2133", bufferInterval = 5, write = true)] [32m+402ms[0m
  [32;1mRepl [0m  this.process.write('2133' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 2133
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 2133
irb(main):012:0> )] result: "2133
" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "2133
=> 2133
irb(main):012:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "2133
=> 2133
irb(main):012:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "2133
=> 2133
irb(main):012:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 2133
=> 2133
irb(main):012:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}],"nsp":"/"} as 2["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2133\\r\\n=> 2133\\r\\nirb(main):012:0> \"}]"] [33m+407ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+646ms[0m
  [34;1mengine:socket [0mpacket [34m+646ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+646ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+653ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+646ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+652ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):013:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):013:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):013:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):013:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):013:0>  [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):013:0> "}],"nsp":"/"} [32m+6ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):013:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):013:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):013:0> \"}]"] [33m+658ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):013:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):013:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+36ms[0m
  [34;1mengine:socket [0mpacket [34m+36ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+36ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+42ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+36ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+42ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):014:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):014:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):014:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):014:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):014:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):014:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):014:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):014:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):014:0> \"}]"] [33m+50ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):014:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):014:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+17ms[0m
  [34;1mengine:socket [0mpacket [34m+18ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+18ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+26ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+18ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+24ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):015:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):015:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):015:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):015:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):015:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):015:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):015:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):015:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):015:0> \"}]"] [33m+32ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):015:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):015:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+26ms[0m
  [34;1mengine:socket [0mpacket [34m+26ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+26ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+35ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+27ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+32ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):016:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):016:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):016:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):016:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):016:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):016:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):016:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):016:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):016:0> \"}]"] [33m+41ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):016:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):016:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+24ms[0m
  [34;1mengine:socket [0mpacket [34m+25ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+4ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+30ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):017:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):017:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):017:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):017:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):017:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):017:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):017:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):017:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):017:0> \"}]"] [33m+39ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):017:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):017:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+25ms[0m
  [34;1mengine:socket [0mpacket [34m+25ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+27ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+36ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+27ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+4ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+31ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):018:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):018:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):018:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):018:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):018:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):018:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):018:0> \"}]"] [33m+40ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):018:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):018:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+28ms[0m
  [34;1mengine:socket [0mpacket [34m+28ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+30ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+39ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+31ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+3ms[0m
  [34;1mengine:socket [0mpacket [34m+3ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+2ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):019:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):019:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):019:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):019:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):019:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):019:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):019:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):019:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):019:0> \"}]"] [33m+42ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):019:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):019:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+23ms[0m
  [34;1mengine:socket [0mpacket [34m+24ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):020:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):020:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):020:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):020:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):020:0>  [32m+11ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):020:0> "}],"nsp":"/"} [32m+13ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):020:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):020:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):020:0> \"}]"] [33m+45ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):020:0> "}]) [34m+14ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):020:0> "}]" [33m+15ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+19ms[0m
  [34;1mengine:socket [0mpacket [34m+20ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+21ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+32ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+22ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+27ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):021:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):021:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):021:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):021:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):021:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):021:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):021:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):021:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):021:0> \"}]"] [33m+34ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):021:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):021:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+25ms[0m
  [34;1mengine:socket [0mpacket [34m+26ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+26ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+32ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):022:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):022:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):022:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):022:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):022:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):022:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):022:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):022:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):022:0> \"}]"] [33m+39ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):022:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):022:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+26ms[0m
  [34;1mengine:socket [0mpacket [34m+26ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+27ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+28ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):023:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):023:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):023:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):023:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):023:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):023:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):023:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):023:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):023:0> \"}]"] [33m+41ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):023:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):023:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+24ms[0m
  [34;1mengine:socket [0mpacket [34m+25ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+31ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):024:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):024:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):024:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):024:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):024:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):024:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):024:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):024:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):024:0> \"}]"] [33m+40ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):024:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):024:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+27ms[0m
  [34;1mengine:socket [0mpacket [34m+27ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+37ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+29ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+34ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+2ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):025:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):025:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):025:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):025:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):025:0>  [32m+13ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):025:0> "}],"nsp":"/"} [32m+13ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):025:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):025:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):025:0> \"}]"] [33m+46ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):025:0> "}]) [34m+13ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):025:0> "}]" [33m+14ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+21ms[0m
  [34;1mengine:socket [0mpacket [34m+22ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+23ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+36ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+24ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+29ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):026:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):026:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):026:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):026:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):026:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):026:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):026:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):026:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):026:0> \"}]"] [33m+38ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):026:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):026:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+23ms[0m
  [34;1mengine:socket [0mpacket [34m+24ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+27ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):027:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):027:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):027:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):027:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):027:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):027:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):027:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):027:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):027:0> \"}]"] [33m+37ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):027:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):027:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+27ms[0m
  [34;1mengine:socket [0mpacket [34m+28ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+38ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+28ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+16ms[0m
  [34;1mengine:socket [0mpacket [34m+15ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+15ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+15ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+16ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+44ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):028:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):028:0> " [32m+1ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):028:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):028:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):028:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):028:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):028:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):028:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):028:0> \"}]"] [33m+52ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):028:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):028:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
  [34;1mengine:socket [0mpacket [34m+30ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+30ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+38ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+31ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+2ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):029:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):029:0> " [32m+2ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):029:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):029:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):029:0>  [32m+15ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):029:0> "}],"nsp":"/"} [32m+16ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):029:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):029:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):029:0> \"}]"] [33m+47ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):029:0> "}]) [34m+16ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):029:0> "}]" [33m+16ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+8ms[0m
  [34;1mengine:socket [0mpacket [34m+8ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+8ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+23ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+15ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):030:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):030:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):030:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):030:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):030:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):030:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):030:0> \"}]"] [33m+23ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):030:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):030:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
  [34;1mengine:socket [0mpacket [34m+30ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+39ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+32ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+2ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+34ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):031:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):031:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):031:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):031:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):031:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):031:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):031:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):031:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):031:0> \"}]"] [33m+43ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):031:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):031:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+21ms[0m
  [34;1mengine:socket [0mpacket [34m+22ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+22ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+32ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+23ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+30ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):032:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):032:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):032:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):032:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):032:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):032:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):032:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):032:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):032:0> \"}]"] [33m+39ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):032:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):032:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+22ms[0m
  [34;1mengine:socket [0mpacket [34m+22ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+23ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+33ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+23ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+30ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):033:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):033:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):033:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):033:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):033:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):033:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):033:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):033:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):033:0> \"}]"] [33m+40ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):033:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):033:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
  [34;1mengine:socket [0mpacket [34m+30ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+41ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+32ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):034:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):034:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):034:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):034:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):034:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):034:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):034:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):034:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):034:0> \"}]"] [33m+41ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):034:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):034:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
  [34;1mengine:socket [0mpacket [34m+31ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+40ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+35ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+3ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+3ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+3ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+38ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):035:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):035:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):035:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):035:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):035:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):035:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):035:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):035:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):035:0> \"}]"] [33m+45ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):035:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):035:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+18ms[0m
  [34;1mengine:socket [0mpacket [34m+18ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+19ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+26ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+19ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+24ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):036:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):036:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):036:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):036:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):036:0>  [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):036:0> "}],"nsp":"/"} [32m+6ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):036:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):036:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):036:0> \"}]"] [33m+29ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):036:0> "}]) [34m+6ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):036:0> "}]" [33m+6ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+45ms[0m
  [34;1mengine:socket [0mpacket [34m+45ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+45ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+51ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+45ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+0ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+0ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+45ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):037:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):037:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):037:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):037:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):037:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):037:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):037:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):037:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):037:0> \"}]"] [33m+53ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):037:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):037:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+14ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+47ms[0m
  [34;1mengine:socket [0mpacket [34m+46ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+47ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+47ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+47ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+53ms[0m
  [34;1mengine:socket [0mpacket [34m+53ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+52ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+52ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+52ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+131ms[0m
  [34;1mengine:socket [0mpacket [34m+131ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+131ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+131ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+131ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+4ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+242ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):038:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):038:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):038:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):038:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):038:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):038:0> \"}]"] [33m+248ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+18ms[0m
  [34;1mengine:socket [0mpacket [34m+18ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+18ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+25ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+18ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+5ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+55ms[0m
  [34;1mengine:socket [0mpacket [34m+55ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+55ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+55ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+55ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+141ms[0m
  [34;1mengine:socket [0mpacket [34m+141ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+141ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+141ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+141ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+53ms[0m
  [34;1mengine:socket [0mpacket [34m+54ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+54ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+54ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+54ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+63ms[0m
  [34;1mengine:socket [0mpacket [34m+62ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+62ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+62ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+62ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+342ms[0m
  [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123123
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 123123
irb(main):039:0> )] result: "123123
" [32m+2ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123123
=> 123123
irb(main):039:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123123
=> 123123
irb(main):039:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123123
=> 123123
irb(main):039:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123123
=> 123123
irb(main):039:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):039:0> \"}]"] [33m+349ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+206ms[0m
  [34;1mengine:socket [0mpacket [34m+208ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+208ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+216ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+208ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+213ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):040:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):040:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):040:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):040:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):040:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):040:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):040:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):040:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):040:0> \"}]"] [33m+221ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):040:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):040:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+145ms[0m
  [34;1mengine:socket [0mpacket [34m+145ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+145ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+153ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+145ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+152ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):041:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):041:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):041:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):041:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):041:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):041:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):041:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):041:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):041:0> \"}]"] [33m+159ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):041:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):041:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+61ms[0m
  [34;1mengine:socket [0mpacket [34m+61ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+61ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+68ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+62ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
  [34;1mengine:socket [0mpacket [34m+5ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+4ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+125ms[0m
  [34;1mengine:socket [0mpacket [34m+125ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+125ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+125ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+125ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+198ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):042:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):042:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):042:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):042:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):042:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):042:0> \"}]"] [33m+205ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+162ms[0m
  [34;1mengine:socket [0mpacket [34m+162ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+162ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+169ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+162ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+0ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+0ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+0ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+169ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
=> 12
irb(main):043:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
irb(main):043:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
irb(main):043:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):043:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):043:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):043:0> \"}]"] [33m+177ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}]) [34m+8ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}]" [33m+8ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+7ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+15ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+201ms[0m
  [34;1mengine:socket [0mpacket [34m+201ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+201ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+201ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+201ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123"}]" [33m+42ms[0m
  [34;1mengine:socket [0mpacket [34m+42ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [32m+42ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [36m+42ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3123 } [32m+42ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} as 2["syncLine",{"line":"3123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+603ms[0m
  [34;1mengine:socket [0mpacket [34m+603ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+603ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+603ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+603ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3123"}]" [33m+0ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3123 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3123", bufferInterval = 5, write = true)] [32m+860ms[0m
  [32;1mRepl [0m  this.process.write('3123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3123
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = => 3123
irb(main):044:0> )] result: "3123
" [32m+3ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3123
=> 3123
irb(main):044:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3123
=> 3123
irb(main):044:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3123
=> 3123
irb(main):044:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3123
=> 3123
irb(main):044:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}],"nsp":"/"} as 2["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3123\\r\\n=> 3123\\r\\nirb(main):044:0> \"}]"] [33m+868ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+420ms[0m
  [34;1mengine:socket [0mpacket [34m+420ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+420ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+428ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+420ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+27ms[0m
  [34;1mengine:socket [0mpacket [34m+27ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+27ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+27ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+27ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+57ms[0m
  [34;1mengine:socket [0mpacket [34m+57ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+57ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+57ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+57ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+98ms[0m
  [34;1mengine:socket [0mpacket [34m+98ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+98ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+98ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+98ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+608ms[0m
  [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 123
=> 123
irb(main):045:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "123
=> 123
irb(main):045:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "123
=> 123
irb(main):045:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "123
=> 123
irb(main):045:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 123
=> 123
irb(main):045:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):045:0> \"}]"] [33m+615ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+186ms[0m
  [34;1mengine:socket [0mpacket [34m+187ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+187ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+194ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+187ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+188ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):046:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):046:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):046:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):046:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):046:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):046:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):046:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):046:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):046:0> \"}]"] [33m+196ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):046:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):046:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+134ms[0m
  [34;1mengine:socket [0mpacket [34m+134ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+134ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+142ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+134ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+47ms[0m
  [34;1mengine:socket [0mpacket [34m+47ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+46ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+48ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+48ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+1ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+2ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+184ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+1ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
=> 12
irb(main):047:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
irb(main):047:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
irb(main):047:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):047:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):047:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}],"nsp":"/"} [32m+8ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):047:0> \"}]"] [33m+193ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}]) [34m+9ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}]" [33m+9ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+48ms[0m
  [34;1mengine:socket [0mpacket [34m+49ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+50ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+58ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+50ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+109ms[0m
  [34;1mengine:socket [0mpacket [34m+108ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+108ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+109ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+109ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+7ms[0m
  [34;1mengine:socket [0mpacket [34m+7ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+7ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+166ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):048:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):048:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):048:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):048:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):048:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):048:0> \"}]"] [33m+174ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+120ms[0m
  [34;1mengine:socket [0mpacket [34m+121ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+121ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+132ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+122ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+129ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):049:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):049:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):049:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):049:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):049:0>  [32m+8ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):049:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):049:0> \"}]"] [33m+136ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):049:0> "}]) [34m+10ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):049:0> "}]" [33m+10ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+173ms[0m
  [34;1mengine:socket [0mpacket [34m+173ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+174ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+182ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+174ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+180ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):050:0> )] result: "
" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):050:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):050:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):050:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):050:0>  [32m+7ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):050:0> "}],"nsp":"/"} [32m+7ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):050:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):050:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):050:0> \"}]"] [33m+187ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):050:0> "}]) [34m+7ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):050:0> "}]" [33m+7ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+175ms[0m
  [34;1mengine:socket [0mpacket [34m+175ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+175ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+182ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+176ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+2ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+1ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+1ms[0m
  [34;1mengine:socket [0mpacket [34m+0ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+1ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+1ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+1ms[0m
  [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+184ms[0m
  [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 12
=> 12
)] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = irb(main):051:0> )] result: "12
=> 12
" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "12
=> 12
irb(main):051:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "12
=> 12
irb(main):051:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "12
=> 12
irb(main):051:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 12
=> 12
irb(main):051:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} [32m+9ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}] [32m+1ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):051:0> \"}]"] [33m+194ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+79ms[0m
  [34;1mengine:socket [0mpacket [34m+79ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+80ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+90ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+81ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+101ms[0m
  [34;1mengine:socket [0mpacket [34m+101ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+100ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+101ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+101ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+188ms[0m
  [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 3
=> 3
irb(main):052:0> )] result: "" [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+2ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "3
=> 3
irb(main):052:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "3
=> 3
irb(main):052:0> " [32m+0ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+1ms[0m
  [32;1mRepl [0m  resolve(result = "3
=> 3
irb(main):052:0> ") [32m+0ms[0m
  [32;1mserver [0m  [emitOutput] output: 3
=> 3
irb(main):052:0>  [32m+10ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}],"nsp":"/"} [32m+11ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):052:0> \"}]"] [33m+197ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}]" [33m+12ms[0m
  [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+93ms[0m
  [34;1mengine:socket [0mpacket [34m+93ms[0m
  [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+95ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+105ms[0m
  [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
  [32;1mserver [0m  ["lineChanged"] { line:  } [32m+95ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
  [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
  [34;1mengine:socket [0mpacket [34m+6ms[0m
  [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
  [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
  [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
  [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
  [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
  [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+101ms[0m
  [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
  [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
  [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
  [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
      debug('  [isDataReceived()] result: "%s"', result)
      return result !== '';
    }, interval = 1, value = undefined)] [32m+0ms[0m
  [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+0ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
  [32;1mRepl [0m  [concatResult(data = 
irb(main):053:0> )] result: "" [32m+1ms[0m
  [32;1mRepl [0m    [wait()] wait: function wait() {
        debug('    [wait()] wait: %s', wait);
        // @todo: Check where `resolve(value)` is getting returned to...
        if (condFunc()) {
          debug('if (condFunc()) --> return resolve(value = "%s")', value);
          return resolve(value);
        }
        setTimeout(wait, interval);
      } [32m+1ms[0m
  [32;1mRepl [0m  [isDataReceived()] result: "
irb(main):053:0> " [32m+0ms[0m
  [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
  [32;1mRepl [0m`let currResult = result` //==> "
irb(main):053:0> " [32m+1ms[0m
  [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
  [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
  [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
  [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
  [32;1mRepl [0m[removeListener(event = data, func = (data) => {
      debug('  [concatResult(data = %s)] result: "%s"', data, result)
      // @todo: Check if return is necessary here.
      return result += data;
    })] [32m+0ms[0m
  [32;1mRepl [0m  resolve(result = "
irb(main):053:0> ") [32m+1ms[0m
  [32;1mserver [0m  [emitOutput] output: 
irb(main):053:0>  [32m+9ms[0m
  [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):053:0> "}],"nsp":"/"} [32m+10ms[0m
  [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):053:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):053:0> "}] [32m+0ms[0m
  [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):053:0> \"}]"] [33m+111ms[0m
  [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):053:0> "}]) [34m+11ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):053:0> "}]" [33m+11ms[0m
  [33;1mengine:ws [0mreceived "2" [33m+16s[0m
  [34;1mengine:socket [0mpacket [34m+16s[0m
  [34;1mengine:socket [0mgot ping [34m+0ms[0m
  [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
  [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
  [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
^C
