#================= Open with a program that supports ANSI (like `bat`) =================#

#================= Server hangs at the end =================#


2018-11-15T14:12:26.447254364Z  
2018-11-15T14:12:26.447305626Z  > npm_repl_prototype@1.0.0 debug /app
2018-11-15T14:12:26.447311836Z  > DEBUG=* node server.js
2018-11-15T14:12:26.447315263Z  
2018-11-15T14:12:26.687979422Z    [35;1mexpress:application [0mset "x-powered-by" to [33mtrue[39m [35m+0ms[0m
2018-11-15T14:12:26.689659619Z    [35;1mexpress:application [0mset "etag" to [32m'weak'[39m [35m+4ms[0m
2018-11-15T14:12:26.690967595Z    [35;1mexpress:application [0mset "etag fn" to [36m[Function: generateETag][39m [35m+0ms[0m
2018-11-15T14:12:26.691301852Z    [35;1mexpress:application [0mset "env" to [32m'development'[39m [35m+2ms[0m
2018-11-15T14:12:26.691673424Z    [35;1mexpress:application [0mset "query parser" to [32m'extended'[39m [35m+0ms[0m
2018-11-15T14:12:26.691810135Z    [35;1mexpress:application [0mset "query parser fn" to [36m[Function: parseExtendedQueryString][39m [35m+0ms[0m
2018-11-15T14:12:26.692181103Z    [35;1mexpress:application [0mset "subdomain offset" to [33m2[39m [35m+0ms[0m
2018-11-15T14:12:26.692505130Z    [35;1mexpress:application [0mset "trust proxy" to [33mfalse[39m [35m+1ms[0m
2018-11-15T14:12:26.692970149Z    [35;1mexpress:application [0mset "trust proxy fn" to [36m[Function: trustNone][39m [35m+0ms[0m
2018-11-15T14:12:26.693122216Z    [35;1mexpress:application [0mbooting in development mode [35m+0ms[0m
2018-11-15T14:12:26.693519053Z    [35;1mexpress:application [0mset "view" to [36m[Function: View][39m [35m+1ms[0m
2018-11-15T14:12:26.693531125Z    [35;1mexpress:application [0mset "views" to [32m'/app/views'[39m [35m+0ms[0m
2018-11-15T14:12:26.693725473Z    [35;1mexpress:application [0mset "jsonp callback name" to [32m'callback'[39m [35m+0ms[0m
2018-11-15T14:12:26.695824654Z    [31;1mexpress:router [0muse [32m'/'[39m query [31m+2ms[0m
2018-11-15T14:12:26.696197408Z    [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+1ms[0m
2018-11-15T14:12:26.697012671Z    [31;1mexpress:router [0muse [32m'/'[39m expressInit [31m+0ms[0m
2018-11-15T14:12:26.697283390Z    [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+0ms[0m
2018-11-15T14:12:26.698029256Z    [31;1mexpress:router [0muse [32m'/'[39m textParser [31m+1ms[0m
2018-11-15T14:12:26.698042514Z    [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+0ms[0m
2018-11-15T14:12:26.698122031Z    [31;1mexpress:router [0muse [32m'/'[39m serveStatic [31m+0ms[0m
2018-11-15T14:12:26.699776105Z    [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+1ms[0m
2018-11-15T14:12:26.703510707Z    [33;1msocket.io:server [0minitializing namespace / [33m+0ms[0m
2018-11-15T14:12:26.704606196Z    [32;1msocket.io-parser [0mencoding packet {"type":0,"nsp":"/"} [32m+0ms[0m
2018-11-15T14:12:26.704902800Z    [32;1msocket.io-parser [0mencoded {"type":0,"nsp":"/"} as 0 [32m+0ms[0m
2018-11-15T14:12:26.705292332Z    [33;1msocket.io:server [0mcreating engine.io instance with opts {"path":"/socket.io","initialPacket":["0"]} [33m+2ms[0m
2018-11-15T14:12:26.722354184Z    [33;1msocket.io:server [0mattaching client serving req handler [33m+17ms[0m
2018-11-15T14:12:26.722761305Z    [33;1mexpress:router:route [0mnew [32m'/:room'[39m [33m+24ms[0m
2018-11-15T14:12:26.723036386Z    [33;1mexpress:router:layer [0mnew [32m'/:room'[39m [33m+0ms[0m
2018-11-15T14:12:26.723688873Z    [33;1mexpress:router:route [0mget [32m'/:room'[39m [33m+1ms[0m
2018-11-15T14:12:26.723936345Z    [33;1mexpress:router:layer [0mnew [32m'/'[39m [33m+0ms[0m
2018-11-15T14:12:26.732725114Z    [32;1mserver [0mListening on port: 3000... [32m+0ms[0m
2018-11-15T14:12:27.079149675Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+0ms[0m
2018-11-15T14:12:27.079434849Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjWYh" [35m+1ms[0m
2018-11-15T14:12:27.084572034Z    [35;1mengine [0mhandshaking client "c_okeXEnbRR0kDbNAAAA" [35m+5ms[0m
2018-11-15T14:12:27.085793285Z    [34;1mengine:socket [0msending packet "open" ({"sid":"c_okeXEnbRR0kDbNAAAA","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+0ms[0m
2018-11-15T14:12:27.086244012Z    [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
2018-11-15T14:12:27.087287114Z    [31;1mengine:polling [0msetting request [31m+0ms[0m
2018-11-15T14:12:27.087483077Z    [34;1mengine:socket [0mflushing buffer to transport [34m+2ms[0m
2018-11-15T14:12:27.088948595Z    [31;1mengine:polling [0mwriting "96:0{"sid":"c_okeXEnbRR0kDbNAAAA","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+1ms[0m
2018-11-15T14:12:27.094159924Z    [34;1mengine:socket [0mexecuting batch send callback [34m+6ms[0m
2018-11-15T14:12:27.094453021Z    [33;1msocket.io:server [0mincoming connection with id c_okeXEnbRR0kDbNAAAA [33m+372ms[0m
2018-11-15T14:12:27.095027444Z    [33;1msocket.io:client [0mconnecting to namespace / [33m+0ms[0m
2018-11-15T14:12:27.095376710Z    [36;1msocket.io:namespace [0madding socket to nsp / [36m+0ms[0m
2018-11-15T14:12:27.097847554Z    [36;1msocket.io:socket [0msocket connected - writing packet [36m+0ms[0m
2018-11-15T14:12:27.098199437Z    [36;1msocket.io:socket [0mjoining room c_okeXEnbRR0kDbNAAAA [36m+1ms[0m
2018-11-15T14:12:27.098703036Z    [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
2018-11-15T14:12:27.099319825Z    [32;1mserver [0mio.on("connection", (socket) => { [32m+367ms[0m
2018-11-15T14:12:27.099562296Z    [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
2018-11-15T14:12:27.099573512Z   [32m+0ms[0m
2018-11-15T14:12:27.100196105Z    [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+5ms[0m
2018-11-15T14:12:27.100350050Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+396ms[0m
2018-11-15T14:12:27.100551506Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
2018-11-15T14:12:27.101038071Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+7ms[0m
2018-11-15T14:12:27.101618973Z    [36;1msocket.io:socket [0mjoined room c_okeXEnbRR0kDbNAAAA [36m+3ms[0m
2018-11-15T14:12:27.102171273Z    [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA [32m+2ms[0m
2018-11-15T14:12:27.103632276Z    [32;1mserver [0m  [initRepl] lang: ruby, welcome_msg: WELCOME TO SPACECRAFT!
2018-11-15T14:12:27.103644402Z   [32m+1ms[0m
2018-11-15T14:12:27.104071101Z    [32;1mRepl [0m[kill()] this.process: [1mnull[22m [32m+0ms[0m
2018-11-15T14:12:27.104247618Z    [32;1mRepl [0mRepl process killed. [32m+1ms[0m
2018-11-15T14:12:27.104536662Z    [32;1mRepl [0m[Repl.init(language = "ruby")] [32m+0ms[0m
2018-11-15T14:12:27.109613757Z    [32;1mRepl [0m  INITIALIZED command: irb [32m+5ms[0m
2018-11-15T14:12:27.113591650Z    [32;1mRepl [0m  this.process: UnixTerminal {
2018-11-15T14:12:27.113611227Z    [32;1mRepl [0m  _internalee:
2018-11-15T14:12:27.113615465Z    [32;1mRepl [0m   EventEmitter {
2018-11-15T14:12:27.113619110Z    [32;1mRepl [0m     _events: [Object: null prototype] {},
2018-11-15T14:12:27.113622547Z    [32;1mRepl [0m     _eventsCount: [33m0[39m,
2018-11-15T14:12:27.113626145Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
2018-11-15T14:12:27.113641320Z    [32;1mRepl [0m  _socket:
2018-11-15T14:12:27.113644926Z    [32;1mRepl [0m   PipeSocket {
2018-11-15T14:12:27.113648054Z    [32;1mRepl [0m     connecting: [33mfalse[39m,
2018-11-15T14:12:27.113651333Z    [32;1mRepl [0m     _hadError: [33mfalse[39m,
2018-11-15T14:12:27.113654688Z    [32;1mRepl [0m     _handle:
2018-11-15T14:12:27.113657845Z    [32;1mRepl [0m      Pipe {
2018-11-15T14:12:27.113661067Z    [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
2018-11-15T14:12:27.113664392Z    [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
2018-11-15T14:12:27.113667950Z    [32;1mRepl [0m     _parent: [1mnull[22m,
2018-11-15T14:12:27.113671307Z    [32;1mRepl [0m     _host: [1mnull[22m,
2018-11-15T14:12:27.113674560Z    [32;1mRepl [0m     _readableState:
2018-11-15T14:12:27.113677813Z    [32;1mRepl [0m      ReadableState {
2018-11-15T14:12:27.113681030Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:12:27.113684267Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:12:27.113687603Z    [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
2018-11-15T14:12:27.113691245Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:12:27.113694544Z    [32;1mRepl [0m        pipes: [1mnull[22m,
2018-11-15T14:12:27.113697795Z    [32;1mRepl [0m        pipesCount: [33m0[39m,
2018-11-15T14:12:27.113700994Z    [32;1mRepl [0m        flowing: [1mnull[22m,
2018-11-15T14:12:27.113704195Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:12:27.113707477Z    [32;1mRepl [0m        endEmitted: [33mfalse[39m,
2018-11-15T14:12:27.113710790Z    [32;1mRepl [0m        reading: [33mfalse[39m,
2018-11-15T14:12:27.113713976Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:12:27.113717226Z    [32;1mRepl [0m        needReadable: [33mfalse[39m,
2018-11-15T14:12:27.113720525Z    [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
2018-11-15T14:12:27.113723768Z    [32;1mRepl [0m        readableListening: [33mfalse[39m,
2018-11-15T14:12:27.113727320Z    [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
2018-11-15T14:12:27.113730691Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:12:27.113737705Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:12:27.113741007Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:12:27.113744239Z    [32;1mRepl [0m        awaitDrain: [33m0[39m,
2018-11-15T14:12:27.113747447Z    [32;1mRepl [0m        readingMore: [33mfalse[39m,
2018-11-15T14:12:27.113751399Z    [32;1mRepl [0m        decoder:
2018-11-15T14:12:27.113754693Z    [32;1mRepl [0m         StringDecoder {
2018-11-15T14:12:27.113757793Z    [32;1mRepl [0m           encoding: [32m'utf8'[39m,
2018-11-15T14:12:27.113761120Z    [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
2018-11-15T14:12:27.113764797Z    [32;1mRepl [0m        encoding: [32m'utf8'[39m },
2018-11-15T14:12:27.113768092Z    [32;1mRepl [0m     readable: [33mfalse[39m,
2018-11-15T14:12:27.113771287Z    [32;1mRepl [0m     _events:
2018-11-15T14:12:27.113774368Z    [32;1mRepl [0m      [Object: null prototype] {
2018-11-15T14:12:27.113777605Z    [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
2018-11-15T14:12:27.113781008Z    [32;1mRepl [0m        error: [36m[Function][39m,
2018-11-15T14:12:27.113784248Z    [32;1mRepl [0m        close: [36m[Function][39m },
2018-11-15T14:12:27.113787572Z    [32;1mRepl [0m     _eventsCount: [33m3[39m,
2018-11-15T14:12:27.113790815Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
2018-11-15T14:12:27.113794106Z    [32;1mRepl [0m     _writableState:
2018-11-15T14:12:27.113797248Z    [32;1mRepl [0m      WritableState {
2018-11-15T14:12:27.113800408Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:12:27.113803632Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:12:27.113806873Z    [32;1mRepl [0m        finalCalled: [33mfalse[39m,
2018-11-15T14:12:27.113810118Z    [32;1mRepl [0m        needDrain: [33mfalse[39m,
2018-11-15T14:12:27.113813318Z    [32;1mRepl [0m        ending: [33mfalse[39m,
2018-11-15T14:12:27.113816510Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:12:27.113819763Z    [32;1mRepl [0m        finished: [33mfalse[39m,
2018-11-15T14:12:27.113823000Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:12:27.113826310Z    [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
2018-11-15T14:12:27.113829555Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:12:27.113835907Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:12:27.113839174Z    [32;1mRepl [0m        writing: [33mfalse[39m,
2018-11-15T14:12:27.113842358Z    [32;1mRepl [0m        corked: [33m0[39m,
2018-11-15T14:12:27.113845550Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:12:27.113848804Z    [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
2018-11-15T14:12:27.113852061Z    [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
2018-11-15T14:12:27.113855342Z    [32;1mRepl [0m        writecb: [1mnull[22m,
2018-11-15T14:12:27.113858532Z    [32;1mRepl [0m        writelen: [33m0[39m,
2018-11-15T14:12:27.113861729Z    [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
2018-11-15T14:12:27.113864924Z    [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
2018-11-15T14:12:27.113882681Z    [32;1mRepl [0m        pendingcb: [33m0[39m,
2018-11-15T14:12:27.113886726Z    [32;1mRepl [0m        prefinished: [33mfalse[39m,
2018-11-15T14:12:27.113990410Z    [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
2018-11-15T14:12:27.114004905Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:12:27.114009233Z    [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
2018-11-15T14:12:27.114012881Z    [32;1mRepl [0m        corkedRequestsFree:
2018-11-15T14:12:27.114016290Z    [32;1mRepl [0m         { next: [1mnull[22m,
2018-11-15T14:12:27.114019808Z    [32;1mRepl [0m           entry: [1mnull[22m,
2018-11-15T14:12:27.114023300Z    [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
2018-11-15T14:12:27.114026746Z    [32;1mRepl [0m     writable: [33mfalse[39m,
2018-11-15T14:12:27.114030087Z    [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
2018-11-15T14:12:27.114033322Z    [32;1mRepl [0m     _sockname: [1mnull[22m,
2018-11-15T14:12:27.114043527Z    [32;1mRepl [0m     _pendingData: [1mnull[22m,
2018-11-15T14:12:27.114046820Z    [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
2018-11-15T14:12:27.114050160Z    [32;1mRepl [0m     server: [1mnull[22m,
2018-11-15T14:12:27.114053431Z    [32;1mRepl [0m     _server: [1mnull[22m,
2018-11-15T14:12:27.114056703Z    [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m85[39m,
2018-11-15T14:12:27.114060116Z    [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
2018-11-15T14:12:27.114072139Z    [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
2018-11-15T14:12:27.114075899Z    [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
2018-11-15T14:12:27.114079220Z    [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
2018-11-15T14:12:27.114082664Z    [32;1mRepl [0m  _pid: [33m28[39m,
2018-11-15T14:12:27.114086421Z    [32;1mRepl [0m  _fd: [33m22[39m,
2018-11-15T14:12:27.114089750Z    [32;1mRepl [0m  _pty: [32m'/dev/pts/1'[39m,
2018-11-15T14:12:27.114093064Z    [32;1mRepl [0m  _file: [32m'irb'[39m,
2018-11-15T14:12:27.114096319Z    [32;1mRepl [0m  _name: [32m'xterm'[39m,
2018-11-15T14:12:27.114099539Z    [32;1mRepl [0m  _readable: [33mtrue[39m,
2018-11-15T14:12:27.114116570Z    [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "ruby" [32m+0ms[0m
2018-11-15T14:12:27.114120480Z    [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+4ms[0m
2018-11-15T14:12:27.114230868Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
2018-11-15T14:12:27.114391838Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:12:27.115076209Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:12:27.115233901Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:12:27.115512275Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:12:27.115526137Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:12:27.115531302Z        return result !== '';
2018-11-15T14:12:27.115542659Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:12:27.115778249Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:12:27.115877014Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.115885704Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.115889166Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.115892547Z          if (condFunc()) {
2018-11-15T14:12:27.115895720Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.115899359Z            return resolve(value);
2018-11-15T14:12:27.115902578Z          }
2018-11-15T14:12:27.115905693Z          setTimeout(wait, interval);
2018-11-15T14:12:27.115921650Z        } [32m+0ms[0m
2018-11-15T14:12:27.116008783Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.117033359Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.117046924Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.117051476Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.117054855Z          if (condFunc()) {
2018-11-15T14:12:27.117058099Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.117061732Z            return resolve(value);
2018-11-15T14:12:27.117064952Z          }
2018-11-15T14:12:27.117067974Z          setTimeout(wait, interval);
2018-11-15T14:12:27.117077249Z        } [32m+1ms[0m
2018-11-15T14:12:27.117214165Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.117757078Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.117768962Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.117772567Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.117775948Z          if (condFunc()) {
2018-11-15T14:12:27.117784116Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.117788329Z            return resolve(value);
2018-11-15T14:12:27.117791598Z          }
2018-11-15T14:12:27.117794722Z          setTimeout(wait, interval);
2018-11-15T14:12:27.117816764Z        } [32m+1ms[0m
2018-11-15T14:12:27.117885904Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.122841048Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.122862875Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.122867157Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.122870835Z          if (condFunc()) {
2018-11-15T14:12:27.122881015Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.122885292Z            return resolve(value);
2018-11-15T14:12:27.122888729Z          }
2018-11-15T14:12:27.122891855Z          setTimeout(wait, interval);
2018-11-15T14:12:27.122895348Z        } [32m+5ms[0m
2018-11-15T14:12:27.123032866Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.124463755Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.124519242Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.124529809Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.124533168Z          if (condFunc()) {
2018-11-15T14:12:27.124536315Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.124539896Z            return resolve(value);
2018-11-15T14:12:27.124543072Z          }
2018-11-15T14:12:27.124546197Z          setTimeout(wait, interval);
2018-11-15T14:12:27.124549452Z        } [32m+2ms[0m
2018-11-15T14:12:27.124652674Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.125931862Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.125947079Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.125953311Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.125958611Z          if (condFunc()) {
2018-11-15T14:12:27.125970061Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.125974800Z            return resolve(value);
2018-11-15T14:12:27.125978254Z          }
2018-11-15T14:12:27.125981316Z          setTimeout(wait, interval);
2018-11-15T14:12:27.125984468Z        } [32m+1ms[0m
2018-11-15T14:12:27.126171971Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.127361799Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.127374644Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.127378455Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.127381930Z          if (condFunc()) {
2018-11-15T14:12:27.127385175Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.127388801Z            return resolve(value);
2018-11-15T14:12:27.127392038Z          }
2018-11-15T14:12:27.127395122Z          setTimeout(wait, interval);
2018-11-15T14:12:27.127398321Z        } [32m+2ms[0m
2018-11-15T14:12:27.127590122Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.128105230Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+43ms[0m
2018-11-15T14:12:27.128235975Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjcfL" [35m+1ms[0m
2018-11-15T14:12:27.128974144Z    [35;1mengine [0mhandshaking client "RkPQe0ACGgzXQWtoAAAB" [35m+0ms[0m
2018-11-15T14:12:27.129324003Z    [34;1mengine:socket [0msending packet "open" ({"sid":"RkPQe0ACGgzXQWtoAAAB","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+29ms[0m
2018-11-15T14:12:27.129590854Z    [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
2018-11-15T14:12:27.129835509Z    [31;1mengine:polling [0msetting request [31m+41ms[0m
2018-11-15T14:12:27.129958974Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:12:27.130208132Z    [31;1mengine:polling [0mwriting "96:0{"sid":"RkPQe0ACGgzXQWtoAAAB","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+1ms[0m
2018-11-15T14:12:27.130706508Z    [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
2018-11-15T14:12:27.130932182Z    [33;1msocket.io:server [0mincoming connection with id RkPQe0ACGgzXQWtoAAAB [33m+36ms[0m
2018-11-15T14:12:27.131199806Z    [33;1msocket.io:client [0mconnecting to namespace / [33m+32ms[0m
2018-11-15T14:12:27.131352527Z    [36;1msocket.io:namespace [0madding socket to nsp / [36m+36ms[0m
2018-11-15T14:12:27.131856196Z    [36;1msocket.io:socket [0msocket connected - writing packet [36m+30ms[0m
2018-11-15T14:12:27.132010408Z    [36;1msocket.io:socket [0mjoining room RkPQe0ACGgzXQWtoAAAB [36m+0ms[0m
2018-11-15T14:12:27.132329644Z    [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+1ms[0m
2018-11-15T14:12:27.132507280Z    [32;1mserver [0mio.on("connection", (socket) => { [32m+30ms[0m
2018-11-15T14:12:27.132660473Z    [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
2018-11-15T14:12:27.132670224Z   [32m+0ms[0m
2018-11-15T14:12:27.132902056Z    [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+1ms[0m
2018-11-15T14:12:27.133074859Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+32ms[0m
2018-11-15T14:12:27.133210657Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+1ms[0m
2018-11-15T14:12:27.133341186Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+3ms[0m
2018-11-15T14:12:27.133638619Z    [36;1msocket.io:socket [0mjoined room RkPQe0ACGgzXQWtoAAAB [36m+1ms[0m
2018-11-15T14:12:27.133892871Z    [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB [32m+1ms[0m
2018-11-15T14:12:27.134209016Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.134218342Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.134285690Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.134289855Z          if (condFunc()) {
2018-11-15T14:12:27.134293151Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.134296722Z            return resolve(value);
2018-11-15T14:12:27.134299754Z          }
2018-11-15T14:12:27.134302788Z          setTimeout(wait, interval);
2018-11-15T14:12:27.134306007Z        } [32m+7ms[0m
2018-11-15T14:12:27.134309266Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.137702151Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.137719317Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.137733311Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.137739587Z          if (condFunc()) {
2018-11-15T14:12:27.137744034Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.137764512Z            return resolve(value);
2018-11-15T14:12:27.137768066Z          }
2018-11-15T14:12:27.137771066Z          setTimeout(wait, interval);
2018-11-15T14:12:27.137774332Z        } [32m+3ms[0m
2018-11-15T14:12:27.137777770Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.138934792Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.138947653Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.138951744Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.138955542Z          if (condFunc()) {
2018-11-15T14:12:27.138958770Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.138962686Z            return resolve(value);
2018-11-15T14:12:27.138966096Z          }
2018-11-15T14:12:27.138975620Z          setTimeout(wait, interval);
2018-11-15T14:12:27.138978933Z        } [32m+1ms[0m
2018-11-15T14:12:27.138982423Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.140177919Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.140189315Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.140193079Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.140213954Z          if (condFunc()) {
2018-11-15T14:12:27.140218036Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.140221544Z            return resolve(value);
2018-11-15T14:12:27.140224711Z          }
2018-11-15T14:12:27.140242848Z          setTimeout(wait, interval);
2018-11-15T14:12:27.140246097Z        } [32m+1ms[0m
2018-11-15T14:12:27.140249461Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.141494935Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.141512444Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.141519455Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.141524834Z          if (condFunc()) {
2018-11-15T14:12:27.141529689Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.141535302Z            return resolve(value);
2018-11-15T14:12:27.141539971Z          }
2018-11-15T14:12:27.141544814Z          setTimeout(wait, interval);
2018-11-15T14:12:27.141549434Z        } [32m+1ms[0m
2018-11-15T14:12:27.141708172Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.142973913Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.142984967Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.142988548Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.142991780Z          if (condFunc()) {
2018-11-15T14:12:27.142997871Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.143006801Z            return resolve(value);
2018-11-15T14:12:27.143010729Z          }
2018-11-15T14:12:27.143013732Z          setTimeout(wait, interval);
2018-11-15T14:12:27.143017089Z        } [32m+1ms[0m
2018-11-15T14:12:27.143107750Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.144302907Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.144313470Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.144317267Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.144320696Z          if (condFunc()) {
2018-11-15T14:12:27.144323919Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.144327400Z            return resolve(value);
2018-11-15T14:12:27.144336796Z          }
2018-11-15T14:12:27.144341923Z          setTimeout(wait, interval);
2018-11-15T14:12:27.144389780Z        } [32m+2ms[0m
2018-11-15T14:12:27.144480386Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.145618880Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.145630698Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.145634137Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.145637450Z          if (condFunc()) {
2018-11-15T14:12:27.145640694Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.145650188Z            return resolve(value);
2018-11-15T14:12:27.145653986Z          }
2018-11-15T14:12:27.145657021Z          setTimeout(wait, interval);
2018-11-15T14:12:27.145660689Z        } [32m+1ms[0m
2018-11-15T14:12:27.145753377Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.147345252Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.147358010Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.147361901Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.147365399Z          if (condFunc()) {
2018-11-15T14:12:27.147368580Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.147372143Z            return resolve(value);
2018-11-15T14:12:27.147375343Z          }
2018-11-15T14:12:27.147378545Z          setTimeout(wait, interval);
2018-11-15T14:12:27.147382125Z        } [32m+1ms[0m
2018-11-15T14:12:27.147529061Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.148930269Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.148947272Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.148983085Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.148991504Z          if (condFunc()) {
2018-11-15T14:12:27.148996379Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.149002140Z            return resolve(value);
2018-11-15T14:12:27.149007387Z          }
2018-11-15T14:12:27.149012219Z          setTimeout(wait, interval);
2018-11-15T14:12:27.149017537Z        } [32m+1ms[0m
2018-11-15T14:12:27.149185982Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.150267909Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.150301829Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.150308499Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.150322159Z          if (condFunc()) {
2018-11-15T14:12:27.150327334Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.150333173Z            return resolve(value);
2018-11-15T14:12:27.150338330Z          }
2018-11-15T14:12:27.150343400Z          setTimeout(wait, interval);
2018-11-15T14:12:27.150348595Z        } [32m+2ms[0m
2018-11-15T14:12:27.150504875Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.151829941Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.151856194Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.151888837Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.151894162Z          if (condFunc()) {
2018-11-15T14:12:27.151898627Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.151903855Z            return resolve(value);
2018-11-15T14:12:27.151908255Z          }
2018-11-15T14:12:27.151912543Z          setTimeout(wait, interval);
2018-11-15T14:12:27.151917522Z        } [32m+1ms[0m
2018-11-15T14:12:27.152023262Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.153126141Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.153139204Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.153143238Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.153146695Z          if (condFunc()) {
2018-11-15T14:12:27.153149863Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.153153389Z            return resolve(value);
2018-11-15T14:12:27.153156652Z          }
2018-11-15T14:12:27.153159799Z          setTimeout(wait, interval);
2018-11-15T14:12:27.153168815Z        } [32m+1ms[0m
2018-11-15T14:12:27.153291266Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.154579742Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.154597200Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.154603593Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.154608852Z          if (condFunc()) {
2018-11-15T14:12:27.154613568Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.154643833Z            return resolve(value);
2018-11-15T14:12:27.154651004Z          }
2018-11-15T14:12:27.154656727Z          setTimeout(wait, interval);
2018-11-15T14:12:27.154661721Z        } [32m+1ms[0m
2018-11-15T14:12:27.154784405Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.156188867Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.156202096Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.156205796Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.156209225Z          if (condFunc()) {
2018-11-15T14:12:27.156212555Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.156223502Z            return resolve(value);
2018-11-15T14:12:27.156241739Z          }
2018-11-15T14:12:27.156245929Z          setTimeout(wait, interval);
2018-11-15T14:12:27.156249220Z        } [32m+1ms[0m
2018-11-15T14:12:27.156315107Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.157520897Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.157533522Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.157537406Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.157540898Z          if (condFunc()) {
2018-11-15T14:12:27.157544239Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.157554780Z            return resolve(value);
2018-11-15T14:12:27.157558882Z          }
2018-11-15T14:12:27.157561954Z          setTimeout(wait, interval);
2018-11-15T14:12:27.157565369Z        } [32m+1ms[0m
2018-11-15T14:12:27.157696257Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.158891508Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.158902116Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.158905742Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.158909281Z          if (condFunc()) {
2018-11-15T14:12:27.158912592Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.158916194Z            return resolve(value);
2018-11-15T14:12:27.158925181Z          }
2018-11-15T14:12:27.158928801Z          setTimeout(wait, interval);
2018-11-15T14:12:27.158931992Z        } [32m+1ms[0m
2018-11-15T14:12:27.159033887Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.160380085Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.160391525Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.160395379Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.160398742Z          if (condFunc()) {
2018-11-15T14:12:27.160401977Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.160405744Z            return resolve(value);
2018-11-15T14:12:27.160415459Z          }
2018-11-15T14:12:27.160418702Z          setTimeout(wait, interval);
2018-11-15T14:12:27.160421934Z        } [32m+2ms[0m
2018-11-15T14:12:27.160505950Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.161815391Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.161831799Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.161846635Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.161852329Z          if (condFunc()) {
2018-11-15T14:12:27.161879489Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.161885290Z            return resolve(value);
2018-11-15T14:12:27.161888628Z          }
2018-11-15T14:12:27.161891812Z          setTimeout(wait, interval);
2018-11-15T14:12:27.161895155Z        } [32m+1ms[0m
2018-11-15T14:12:27.161960510Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.163137872Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.163149611Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.163153268Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.163156977Z          if (condFunc()) {
2018-11-15T14:12:27.163160235Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.163163875Z            return resolve(value);
2018-11-15T14:12:27.163167139Z          }
2018-11-15T14:12:27.163170243Z          setTimeout(wait, interval);
2018-11-15T14:12:27.163173510Z        } [32m+1ms[0m
2018-11-15T14:12:27.163246978Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.163766169Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+35ms[0m
2018-11-15T14:12:27.163953667Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjil-" [35m+0ms[0m
2018-11-15T14:12:27.164464196Z    [35;1mengine [0mhandshaking client "5w35iYhEWQm_iAN5AAAC" [35m+1ms[0m
2018-11-15T14:12:27.164733755Z    [34;1mengine:socket [0msending packet "open" ({"sid":"5w35iYhEWQm_iAN5AAAC","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+31ms[0m
2018-11-15T14:12:27.164882838Z    [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
2018-11-15T14:12:27.165098243Z    [31;1mengine:polling [0msetting request [31m+34ms[0m
2018-11-15T14:12:27.165255390Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:12:27.165568436Z    [31;1mengine:polling [0mwriting "96:0{"sid":"5w35iYhEWQm_iAN5AAAC","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+1ms[0m
2018-11-15T14:12:27.165966780Z    [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
2018-11-15T14:12:27.166178990Z    [33;1msocket.io:server [0mincoming connection with id 5w35iYhEWQm_iAN5AAAC [33m+35ms[0m
2018-11-15T14:12:27.166614861Z    [33;1msocket.io:client [0mconnecting to namespace / [33m+34ms[0m
2018-11-15T14:12:27.166630938Z    [36;1msocket.io:namespace [0madding socket to nsp / [36m+35ms[0m
2018-11-15T14:12:27.167117830Z    [36;1msocket.io:socket [0msocket connected - writing packet [36m+33ms[0m
2018-11-15T14:12:27.167259327Z    [36;1msocket.io:socket [0mjoining room 5w35iYhEWQm_iAN5AAAC [36m+1ms[0m
2018-11-15T14:12:27.167511375Z    [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
2018-11-15T14:12:27.167724930Z    [32;1mserver [0mio.on("connection", (socket) => { [32m+34ms[0m
2018-11-15T14:12:27.167877179Z    [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
2018-11-15T14:12:27.167892742Z   [32m+0ms[0m
2018-11-15T14:12:27.168129006Z    [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+1ms[0m
2018-11-15T14:12:27.168277052Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+35ms[0m
2018-11-15T14:12:27.168412409Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
2018-11-15T14:12:27.168498558Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+3ms[0m
2018-11-15T14:12:27.168787691Z    [36;1msocket.io:socket [0mjoined room 5w35iYhEWQm_iAN5AAAC [36m+1ms[0m
2018-11-15T14:12:27.169033459Z    [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC [32m+1ms[0m
2018-11-15T14:12:27.169176730Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.169187145Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.169190801Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.169194044Z          if (condFunc()) {
2018-11-15T14:12:27.169197145Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.169202385Z            return resolve(value);
2018-11-15T14:12:27.169207375Z          }
2018-11-15T14:12:27.169211916Z          setTimeout(wait, interval);
2018-11-15T14:12:27.169216665Z        } [32m+6ms[0m
2018-11-15T14:12:27.169339328Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.170605744Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.170617707Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.170621130Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.170624578Z          if (condFunc()) {
2018-11-15T14:12:27.170627738Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.170631356Z            return resolve(value);
2018-11-15T14:12:27.170640813Z          }
2018-11-15T14:12:27.170644735Z          setTimeout(wait, interval);
2018-11-15T14:12:27.170647943Z        } [32m+1ms[0m
2018-11-15T14:12:27.170746568Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.172143087Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.172161043Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.172167196Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.172173113Z          if (condFunc()) {
2018-11-15T14:12:27.172177925Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.172192612Z            return resolve(value);
2018-11-15T14:12:27.172199524Z          }
2018-11-15T14:12:27.172204752Z          setTimeout(wait, interval);
2018-11-15T14:12:27.172209732Z        } [32m+1ms[0m
2018-11-15T14:12:27.172369973Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.174887087Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.174904994Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.174942553Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.174947612Z          if (condFunc()) {
2018-11-15T14:12:27.174950911Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.174954585Z            return resolve(value);
2018-11-15T14:12:27.174957705Z          }
2018-11-15T14:12:27.174960826Z          setTimeout(wait, interval);
2018-11-15T14:12:27.174964047Z        } [32m+1ms[0m
2018-11-15T14:12:27.175053187Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.176199058Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.176211245Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.176214995Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.176223390Z          if (condFunc()) {
2018-11-15T14:12:27.176227216Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.176230797Z            return resolve(value);
2018-11-15T14:12:27.176234051Z          }
2018-11-15T14:12:27.176254048Z          setTimeout(wait, interval);
2018-11-15T14:12:27.176258769Z        } [32m+2ms[0m
2018-11-15T14:12:27.176330376Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.177563746Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.177576669Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.177580325Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.177583674Z          if (condFunc()) {
2018-11-15T14:12:27.177586854Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.177596207Z            return resolve(value);
2018-11-15T14:12:27.177599863Z          }
2018-11-15T14:12:27.177603029Z          setTimeout(wait, interval);
2018-11-15T14:12:27.177606402Z        } [32m+1ms[0m
2018-11-15T14:12:27.177707545Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.179018806Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.179034962Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.179040925Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.179046538Z          if (condFunc()) {
2018-11-15T14:12:27.179059248Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.179096439Z            return resolve(value);
2018-11-15T14:12:27.179102919Z          }
2018-11-15T14:12:27.179107933Z          setTimeout(wait, interval);
2018-11-15T14:12:27.179113020Z        } [32m+1ms[0m
2018-11-15T14:12:27.179273454Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.180623279Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.180634855Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.180638693Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.180642129Z          if (condFunc()) {
2018-11-15T14:12:27.180645775Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.180649382Z            return resolve(value);
2018-11-15T14:12:27.180652543Z          }
2018-11-15T14:12:27.180655621Z          setTimeout(wait, interval);
2018-11-15T14:12:27.180689115Z        } [32m+2ms[0m
2018-11-15T14:12:27.180738901Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.181934022Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.181952451Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.181957141Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.181963036Z          if (condFunc()) {
2018-11-15T14:12:27.181967998Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.181975647Z            return resolve(value);
2018-11-15T14:12:27.181980862Z          }
2018-11-15T14:12:27.181986373Z          setTimeout(wait, interval);
2018-11-15T14:12:27.181991736Z        } [32m+1ms[0m
2018-11-15T14:12:27.182069777Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.183229622Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.183240397Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.183243815Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.183247205Z          if (condFunc()) {
2018-11-15T14:12:27.183251474Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.183256917Z            return resolve(value);
2018-11-15T14:12:27.183261222Z          }
2018-11-15T14:12:27.183265402Z          setTimeout(wait, interval);
2018-11-15T14:12:27.183269982Z        } [32m+2ms[0m
2018-11-15T14:12:27.183339577Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.184505332Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.184516199Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.184527160Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.184531490Z          if (condFunc()) {
2018-11-15T14:12:27.184534628Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.184538251Z            return resolve(value);
2018-11-15T14:12:27.184541559Z          }
2018-11-15T14:12:27.184544610Z          setTimeout(wait, interval);
2018-11-15T14:12:27.184547837Z        } [32m+1ms[0m
2018-11-15T14:12:27.184625715Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.185819569Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.185831731Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.185835351Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.185838663Z          if (condFunc()) {
2018-11-15T14:12:27.185841771Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.185853540Z            return resolve(value);
2018-11-15T14:12:27.185857097Z          }
2018-11-15T14:12:27.185860129Z          setTimeout(wait, interval);
2018-11-15T14:12:27.185863279Z        } [32m+1ms[0m
2018-11-15T14:12:27.185931670Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.187133806Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.187144635Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.187149540Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.187162416Z          if (condFunc()) {
2018-11-15T14:12:27.187167688Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.187173177Z            return resolve(value);
2018-11-15T14:12:27.187177688Z          }
2018-11-15T14:12:27.187182096Z          setTimeout(wait, interval);
2018-11-15T14:12:27.187186811Z        } [32m+1ms[0m
2018-11-15T14:12:27.187271879Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.188441698Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.188451562Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.188455162Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.188476765Z          if (condFunc()) {
2018-11-15T14:12:27.188483487Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.188486954Z            return resolve(value);
2018-11-15T14:12:27.188490177Z          }
2018-11-15T14:12:27.188493192Z          setTimeout(wait, interval);
2018-11-15T14:12:27.188496432Z        } [32m+1ms[0m
2018-11-15T14:12:27.188562725Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.189757263Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.189769749Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.189773246Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.189785352Z          if (condFunc()) {
2018-11-15T14:12:27.189789163Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.189792711Z            return resolve(value);
2018-11-15T14:12:27.189795874Z          }
2018-11-15T14:12:27.189798933Z          setTimeout(wait, interval);
2018-11-15T14:12:27.189802036Z        } [32m+1ms[0m
2018-11-15T14:12:27.189869094Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.191069140Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.191079769Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.191083159Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.191101683Z          if (condFunc()) {
2018-11-15T14:12:27.191109440Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.191112974Z            return resolve(value);
2018-11-15T14:12:27.191116288Z          }
2018-11-15T14:12:27.191119432Z          setTimeout(wait, interval);
2018-11-15T14:12:27.191122590Z        } [32m+1ms[0m
2018-11-15T14:12:27.191189850Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.195006966Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.195031628Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.195036014Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.195039709Z          if (condFunc()) {
2018-11-15T14:12:27.195043137Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.195046906Z            return resolve(value);
2018-11-15T14:12:27.195050096Z          }
2018-11-15T14:12:27.195065949Z          setTimeout(wait, interval);
2018-11-15T14:12:27.195069537Z        } [32m+1ms[0m
2018-11-15T14:12:27.195156708Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+2ms[0m
2018-11-15T14:12:27.195570566Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.195589584Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.195593673Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.195597070Z          if (condFunc()) {
2018-11-15T14:12:27.195600281Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.195603982Z            return resolve(value);
2018-11-15T14:12:27.195607141Z          }
2018-11-15T14:12:27.195610301Z          setTimeout(wait, interval);
2018-11-15T14:12:27.195613451Z        } [32m+1ms[0m
2018-11-15T14:12:27.195692999Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.196933010Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.196948821Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.196953943Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.196958855Z          if (condFunc()) {
2018-11-15T14:12:27.196964086Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.196969171Z            return resolve(value);
2018-11-15T14:12:27.196973957Z          }
2018-11-15T14:12:27.196978141Z          setTimeout(wait, interval);
2018-11-15T14:12:27.196982509Z        } [32m+1ms[0m
2018-11-15T14:12:27.197092147Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.198249302Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.198263123Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.198268409Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.198344840Z          if (condFunc()) {
2018-11-15T14:12:27.198352049Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.198356214Z            return resolve(value);
2018-11-15T14:12:27.198359405Z          }
2018-11-15T14:12:27.198362551Z          setTimeout(wait, interval);
2018-11-15T14:12:27.198365875Z        } [32m+2ms[0m
2018-11-15T14:12:27.198442633Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.198758494Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+34ms[0m
2018-11-15T14:12:27.198866245Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjose" [35m+0ms[0m
2018-11-15T14:12:27.199152067Z    [35;1mengine [0mhandshaking client "XbDiEVEDIgI7xA2-AAAD" [35m+1ms[0m
2018-11-15T14:12:27.199337600Z    [34;1mengine:socket [0msending packet "open" ({"sid":"XbDiEVEDIgI7xA2-AAAD","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+31ms[0m
2018-11-15T14:12:27.199520646Z    [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
2018-11-15T14:12:27.199596280Z    [31;1mengine:polling [0msetting request [31m+34ms[0m
2018-11-15T14:12:27.199764059Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:12:27.199907405Z    [31;1mengine:polling [0mwriting "96:0{"sid":"XbDiEVEDIgI7xA2-AAAD","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
2018-11-15T14:12:27.200264704Z    [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
2018-11-15T14:12:27.200370665Z    [33;1msocket.io:server [0mincoming connection with id XbDiEVEDIgI7xA2-AAAD [33m+35ms[0m
2018-11-15T14:12:27.200457388Z    [33;1msocket.io:client [0mconnecting to namespace / [33m+33ms[0m
2018-11-15T14:12:27.200537728Z    [36;1msocket.io:namespace [0madding socket to nsp / [36m+34ms[0m
2018-11-15T14:12:27.200872676Z    [36;1msocket.io:socket [0msocket connected - writing packet [36m+32ms[0m
2018-11-15T14:12:27.200950452Z    [36;1msocket.io:socket [0mjoining room XbDiEVEDIgI7xA2-AAAD [36m+0ms[0m
2018-11-15T14:12:27.201043933Z    [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
2018-11-15T14:12:27.201215503Z    [32;1mserver [0mio.on("connection", (socket) => { [32m+32ms[0m
2018-11-15T14:12:27.201235574Z    [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
2018-11-15T14:12:27.201242371Z   [32m+1ms[0m
2018-11-15T14:12:27.201314805Z    [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+1ms[0m
2018-11-15T14:12:27.201401212Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+33ms[0m
2018-11-15T14:12:27.201411887Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
2018-11-15T14:12:27.201508896Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+1ms[0m
2018-11-15T14:12:27.201609467Z    [36;1msocket.io:socket [0mjoined room XbDiEVEDIgI7xA2-AAAD [36m+1ms[0m
2018-11-15T14:12:27.201733772Z    [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC,XbDiEVEDIgI7xA2-AAAD [32m+0ms[0m
2018-11-15T14:12:27.201841119Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.201850426Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.201854141Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.201857405Z          if (condFunc()) {
2018-11-15T14:12:27.201860559Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.201864173Z            return resolve(value);
2018-11-15T14:12:27.201867333Z          }
2018-11-15T14:12:27.201870419Z          setTimeout(wait, interval);
2018-11-15T14:12:27.201873525Z        } [32m+3ms[0m
2018-11-15T14:12:27.201876823Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.202991606Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.203016266Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.203024383Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.203029320Z          if (condFunc()) {
2018-11-15T14:12:27.203035303Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.203040475Z            return resolve(value);
2018-11-15T14:12:27.203045478Z          }
2018-11-15T14:12:27.203050317Z          setTimeout(wait, interval);
2018-11-15T14:12:27.203055161Z        } [32m+1ms[0m
2018-11-15T14:12:27.203163789Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.204322957Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.204335509Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.204339173Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.204342739Z          if (condFunc()) {
2018-11-15T14:12:27.204346072Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.204349986Z            return resolve(value);
2018-11-15T14:12:27.204353296Z          }
2018-11-15T14:12:27.204356410Z          setTimeout(wait, interval);
2018-11-15T14:12:27.204359751Z        } [32m+2ms[0m
2018-11-15T14:12:27.204431985Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.205608441Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.205624886Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.205630362Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.205635202Z          if (condFunc()) {
2018-11-15T14:12:27.205639924Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.205645009Z            return resolve(value);
2018-11-15T14:12:27.205649783Z          }
2018-11-15T14:12:27.205654318Z          setTimeout(wait, interval);
2018-11-15T14:12:27.205659233Z        } [32m+1ms[0m
2018-11-15T14:12:27.205748970Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.206941701Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.206959032Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.206965795Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.206972502Z          if (condFunc()) {
2018-11-15T14:12:27.206977688Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.206983432Z            return resolve(value);
2018-11-15T14:12:27.206988222Z          }
2018-11-15T14:12:27.206993128Z          setTimeout(wait, interval);
2018-11-15T14:12:27.206998251Z        } [32m+1ms[0m
2018-11-15T14:12:27.207102238Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.208226738Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.208243487Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.208250181Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.208255743Z          if (condFunc()) {
2018-11-15T14:12:27.208260992Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.208266706Z            return resolve(value);
2018-11-15T14:12:27.208271597Z          }
2018-11-15T14:12:27.208276332Z          setTimeout(wait, interval);
2018-11-15T14:12:27.208281647Z        } [32m+2ms[0m
2018-11-15T14:12:27.208401347Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.212981861Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.213007597Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.213014063Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.213034676Z          if (condFunc()) {
2018-11-15T14:12:27.213040183Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.213045775Z            return resolve(value);
2018-11-15T14:12:27.213050842Z          }
2018-11-15T14:12:27.213055713Z          setTimeout(wait, interval);
2018-11-15T14:12:27.213060644Z        } [32m+1ms[0m
2018-11-15T14:12:27.213092567Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.213100653Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.213106073Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.213112173Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.213121811Z          if (condFunc()) {
2018-11-15T14:12:27.213126929Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.213132020Z            return resolve(value);
2018-11-15T14:12:27.213136777Z          }
2018-11-15T14:12:27.213141537Z          setTimeout(wait, interval);
2018-11-15T14:12:27.213146920Z        } [32m+1ms[0m
2018-11-15T14:12:27.213152244Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.213157774Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.213162824Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.213169062Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.213176894Z          if (condFunc()) {
2018-11-15T14:12:27.213182935Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.213190213Z            return resolve(value);
2018-11-15T14:12:27.213195128Z          }
2018-11-15T14:12:27.213199733Z          setTimeout(wait, interval);
2018-11-15T14:12:27.213204271Z        } [32m+1ms[0m
2018-11-15T14:12:27.213209047Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.213671174Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.213683546Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.213687152Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.213690443Z          if (condFunc()) {
2018-11-15T14:12:27.213693616Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.213697080Z            return resolve(value);
2018-11-15T14:12:27.213700386Z          }
2018-11-15T14:12:27.213712025Z          setTimeout(wait, interval);
2018-11-15T14:12:27.213731653Z        } [32m+1ms[0m
2018-11-15T14:12:27.213738026Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.214866948Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.214913115Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.214917053Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.214930536Z          if (condFunc()) {
2018-11-15T14:12:27.214934333Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.214937837Z            return resolve(value);
2018-11-15T14:12:27.214940983Z          }
2018-11-15T14:12:27.214944052Z          setTimeout(wait, interval);
2018-11-15T14:12:27.214947203Z        } [32m+1ms[0m
2018-11-15T14:12:27.214977030Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.216236572Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.216248944Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.216252889Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.216256295Z          if (condFunc()) {
2018-11-15T14:12:27.216259652Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.216263217Z            return resolve(value);
2018-11-15T14:12:27.216266378Z          }
2018-11-15T14:12:27.216269426Z          setTimeout(wait, interval);
2018-11-15T14:12:27.216272648Z        } [32m+2ms[0m
2018-11-15T14:12:27.216275855Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.217450657Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.217467327Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.217473324Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.217478572Z          if (condFunc()) {
2018-11-15T14:12:27.217483645Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.217499446Z            return resolve(value);
2018-11-15T14:12:27.217504105Z          }
2018-11-15T14:12:27.217507154Z          setTimeout(wait, interval);
2018-11-15T14:12:27.217510390Z        } [32m+1ms[0m
2018-11-15T14:12:27.217583896Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.218677348Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.218695983Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.218700323Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.218705234Z          if (condFunc()) {
2018-11-15T14:12:27.218710997Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.218716834Z            return resolve(value);
2018-11-15T14:12:27.218723895Z          }
2018-11-15T14:12:27.218729631Z          setTimeout(wait, interval);
2018-11-15T14:12:27.218757721Z        } [32m+1ms[0m
2018-11-15T14:12:27.218883553Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.219964410Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.219977718Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.219983250Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.219991226Z          if (condFunc()) {
2018-11-15T14:12:27.219996481Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.220002086Z            return resolve(value);
2018-11-15T14:12:27.220032347Z          }
2018-11-15T14:12:27.220038649Z          setTimeout(wait, interval);
2018-11-15T14:12:27.220044037Z        } [32m+1ms[0m
2018-11-15T14:12:27.220049025Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.221179588Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.221193162Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.221198709Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.221203930Z          if (condFunc()) {
2018-11-15T14:12:27.221208917Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.221214520Z            return resolve(value);
2018-11-15T14:12:27.221238707Z          }
2018-11-15T14:12:27.221244664Z          setTimeout(wait, interval);
2018-11-15T14:12:27.221249650Z        } [32m+1ms[0m
2018-11-15T14:12:27.221254849Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.222459292Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.222478388Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.222484697Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.222518694Z          if (condFunc()) {
2018-11-15T14:12:27.222525947Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.222558520Z            return resolve(value);
2018-11-15T14:12:27.222565696Z          }
2018-11-15T14:12:27.222570650Z          setTimeout(wait, interval);
2018-11-15T14:12:27.222575621Z        } [32m+1ms[0m
2018-11-15T14:12:27.222601584Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.223700780Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.223714230Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.223719732Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.223725008Z          if (condFunc()) {
2018-11-15T14:12:27.223730135Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.223769739Z            return resolve(value);
2018-11-15T14:12:27.223778237Z          }
2018-11-15T14:12:27.223783477Z          setTimeout(wait, interval);
2018-11-15T14:12:27.223788400Z        } [32m+1ms[0m
2018-11-15T14:12:27.223793717Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.225027160Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.225040894Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.225046344Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.225051627Z          if (condFunc()) {
2018-11-15T14:12:27.225056563Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.225062147Z            return resolve(value);
2018-11-15T14:12:27.225101919Z          }
2018-11-15T14:12:27.225110356Z          setTimeout(wait, interval);
2018-11-15T14:12:27.225116330Z        } [32m+1ms[0m
2018-11-15T14:12:27.225242868Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.226660661Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.226672731Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.226676530Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.226679972Z          if (condFunc()) {
2018-11-15T14:12:27.226683228Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.226686946Z            return resolve(value);
2018-11-15T14:12:27.226690109Z          }
2018-11-15T14:12:27.226693186Z          setTimeout(wait, interval);
2018-11-15T14:12:27.226696313Z        } [32m+2ms[0m
2018-11-15T14:12:27.226824867Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.227967964Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.227979223Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.227982854Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.227986097Z          if (condFunc()) {
2018-11-15T14:12:27.227989298Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.227992842Z            return resolve(value);
2018-11-15T14:12:27.227995941Z          }
2018-11-15T14:12:27.227998960Z          setTimeout(wait, interval);
2018-11-15T14:12:27.228002370Z        } [32m+1ms[0m
2018-11-15T14:12:27.228005570Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.229141059Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.229150987Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.229154431Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.229157710Z          if (condFunc()) {
2018-11-15T14:12:27.229160850Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.229164317Z            return resolve(value);
2018-11-15T14:12:27.229167402Z          }
2018-11-15T14:12:27.229170607Z          setTimeout(wait, interval);
2018-11-15T14:12:27.229173862Z        } [32m+2ms[0m
2018-11-15T14:12:27.229251069Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.230386105Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.230397118Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.230400947Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.230404116Z          if (condFunc()) {
2018-11-15T14:12:27.230407310Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.230410846Z            return resolve(value);
2018-11-15T14:12:27.230414054Z          }
2018-11-15T14:12:27.230417049Z          setTimeout(wait, interval);
2018-11-15T14:12:27.230420154Z        } [32m+1ms[0m
2018-11-15T14:12:27.230423267Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.231579396Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.231589705Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.231602414Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.231606006Z          if (condFunc()) {
2018-11-15T14:12:27.231609129Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.231612603Z            return resolve(value);
2018-11-15T14:12:27.231615807Z          }
2018-11-15T14:12:27.231618804Z          setTimeout(wait, interval);
2018-11-15T14:12:27.231621937Z        } [32m+1ms[0m
2018-11-15T14:12:27.231699806Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.232799943Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.232809199Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.232812519Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.232815728Z          if (condFunc()) {
2018-11-15T14:12:27.232818822Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.232822282Z            return resolve(value);
2018-11-15T14:12:27.232825364Z          }
2018-11-15T14:12:27.232828383Z          setTimeout(wait, interval);
2018-11-15T14:12:27.232831490Z        } [32m+1ms[0m
2018-11-15T14:12:27.232924264Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.234083011Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.234095902Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.234099486Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.234102700Z          if (condFunc()) {
2018-11-15T14:12:27.234105854Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.234109277Z            return resolve(value);
2018-11-15T14:12:27.234112422Z          }
2018-11-15T14:12:27.234132694Z          setTimeout(wait, interval);
2018-11-15T14:12:27.234136975Z        } [32m+1ms[0m
2018-11-15T14:12:27.234140186Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.235254208Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.235263578Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.235266967Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.235270156Z          if (condFunc()) {
2018-11-15T14:12:27.235273224Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.235276615Z            return resolve(value);
2018-11-15T14:12:27.235287962Z          }
2018-11-15T14:12:27.235291298Z          setTimeout(wait, interval);
2018-11-15T14:12:27.235294479Z        } [32m+2ms[0m
2018-11-15T14:12:27.235382326Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.236553540Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.236563908Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.236567459Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.236570647Z          if (condFunc()) {
2018-11-15T14:12:27.236573675Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.236577086Z            return resolve(value);
2018-11-15T14:12:27.236580284Z          }
2018-11-15T14:12:27.236583284Z          setTimeout(wait, interval);
2018-11-15T14:12:27.236586419Z        } [32m+1ms[0m
2018-11-15T14:12:27.236589559Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.237481192Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+38ms[0m
2018-11-15T14:12:27.237598342Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjqdE&sid=XbDiEVEDIgI7xA2-AAAD" [35m+0ms[0m
2018-11-15T14:12:27.237721943Z    [35;1mengine [0msetting new request for existing client [35m+0ms[0m
2018-11-15T14:12:27.237729648Z    [31;1mengine:polling [0msetting request [31m+38ms[0m
2018-11-15T14:12:27.237804901Z    [34;1mengine:socket [0mflushing buffer to transport [34m+36ms[0m
2018-11-15T14:12:27.237880308Z    [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
2018-11-15T14:12:27.238120942Z    [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
2018-11-15T14:12:27.238346680Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.238355373Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.238358881Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.238362188Z          if (condFunc()) {
2018-11-15T14:12:27.238365333Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.238368861Z            return resolve(value);
2018-11-15T14:12:27.238372219Z          }
2018-11-15T14:12:27.238375296Z          setTimeout(wait, interval);
2018-11-15T14:12:27.238378507Z        } [32m+2ms[0m
2018-11-15T14:12:27.238467005Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.239593712Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.239610235Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.239613833Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.239617229Z          if (condFunc()) {
2018-11-15T14:12:27.239620289Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.239623729Z            return resolve(value);
2018-11-15T14:12:27.239626817Z          }
2018-11-15T14:12:27.239629907Z          setTimeout(wait, interval);
2018-11-15T14:12:27.239633029Z        } [32m+1ms[0m
2018-11-15T14:12:27.239636177Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.240856992Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.240870681Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.240876258Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.240881467Z          if (condFunc()) {
2018-11-15T14:12:27.240886467Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.240911793Z            return resolve(value);
2018-11-15T14:12:27.240917685Z          }
2018-11-15T14:12:27.240922629Z          setTimeout(wait, interval);
2018-11-15T14:12:27.240927576Z        } [32m+1ms[0m
2018-11-15T14:12:27.240932453Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.242057848Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.242068246Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.242071575Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.242074863Z          if (condFunc()) {
2018-11-15T14:12:27.242078008Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.242081416Z            return resolve(value);
2018-11-15T14:12:27.242084564Z          }
2018-11-15T14:12:27.242087645Z          setTimeout(wait, interval);
2018-11-15T14:12:27.242090849Z        } [32m+1ms[0m
2018-11-15T14:12:27.242165664Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.243339894Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.243349899Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.243353259Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.243365054Z          if (condFunc()) {
2018-11-15T14:12:27.243368550Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.243372371Z            return resolve(value);
2018-11-15T14:12:27.243375536Z          }
2018-11-15T14:12:27.243378566Z          setTimeout(wait, interval);
2018-11-15T14:12:27.243381654Z        } [32m+2ms[0m
2018-11-15T14:12:27.243400848Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.244539307Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.244549424Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.244553001Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.244556213Z          if (condFunc()) {
2018-11-15T14:12:27.244559326Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.244562712Z            return resolve(value);
2018-11-15T14:12:27.244565921Z          }
2018-11-15T14:12:27.244568942Z          setTimeout(wait, interval);
2018-11-15T14:12:27.244572036Z        } [32m+1ms[0m
2018-11-15T14:12:27.244650837Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.245794039Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.245804456Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.245807941Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.245811152Z          if (condFunc()) {
2018-11-15T14:12:27.245814230Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.245817811Z            return resolve(value);
2018-11-15T14:12:27.245820974Z          }
2018-11-15T14:12:27.245824002Z          setTimeout(wait, interval);
2018-11-15T14:12:27.245827472Z        } [32m+1ms[0m
2018-11-15T14:12:27.245830781Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.246995873Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.247006227Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.247009630Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.247019214Z          if (condFunc()) {
2018-11-15T14:12:27.247022849Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.247026315Z            return resolve(value);
2018-11-15T14:12:27.247029470Z          }
2018-11-15T14:12:27.247040446Z          setTimeout(wait, interval);
2018-11-15T14:12:27.247059528Z        } [32m+1ms[0m
2018-11-15T14:12:27.247119407Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.248336318Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.248351973Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.248357455Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.248362133Z          if (condFunc()) {
2018-11-15T14:12:27.248376174Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.248418360Z            return resolve(value);
2018-11-15T14:12:27.248423533Z          }
2018-11-15T14:12:27.248426604Z          setTimeout(wait, interval);
2018-11-15T14:12:27.248429756Z        } [32m+2ms[0m
2018-11-15T14:12:27.248532750Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.249594709Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.249606335Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.249609939Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.249613336Z          if (condFunc()) {
2018-11-15T14:12:27.249616567Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.249620429Z            return resolve(value);
2018-11-15T14:12:27.249623608Z          }
2018-11-15T14:12:27.249626706Z          setTimeout(wait, interval);
2018-11-15T14:12:27.249629848Z        } [32m+1ms[0m
2018-11-15T14:12:27.249742460Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.251465249Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.251477569Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.251481439Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.251484684Z          if (condFunc()) {
2018-11-15T14:12:27.251489502Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.251495036Z            return resolve(value);
2018-11-15T14:12:27.251537140Z          }
2018-11-15T14:12:27.251543579Z          setTimeout(wait, interval);
2018-11-15T14:12:27.251547023Z        } [32m+1ms[0m
2018-11-15T14:12:27.251633591Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.252735996Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.252760187Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.252764245Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.252767513Z          if (condFunc()) {
2018-11-15T14:12:27.252770618Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.252815938Z            return resolve(value);
2018-11-15T14:12:27.252819377Z          }
2018-11-15T14:12:27.252822493Z          setTimeout(wait, interval);
2018-11-15T14:12:27.252830138Z        } [32m+1ms[0m
2018-11-15T14:12:27.252914214Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.253992355Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.254004416Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.254008040Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.254011416Z          if (condFunc()) {
2018-11-15T14:12:27.254014614Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.254018090Z            return resolve(value);
2018-11-15T14:12:27.254021365Z          }
2018-11-15T14:12:27.254024381Z          setTimeout(wait, interval);
2018-11-15T14:12:27.254027562Z        } [32m+1ms[0m
2018-11-15T14:12:27.254115377Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.255222118Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.255232118Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.255235498Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.255238803Z          if (condFunc()) {
2018-11-15T14:12:27.255241918Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.255245432Z            return resolve(value);
2018-11-15T14:12:27.255248547Z          }
2018-11-15T14:12:27.255251611Z          setTimeout(wait, interval);
2018-11-15T14:12:27.255254750Z        } [32m+2ms[0m
2018-11-15T14:12:27.255348017Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.256558578Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.256573386Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.256578892Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.256584033Z          if (condFunc()) {
2018-11-15T14:12:27.256588706Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.256640283Z            return resolve(value);
2018-11-15T14:12:27.256647812Z          }
2018-11-15T14:12:27.256653407Z          setTimeout(wait, interval);
2018-11-15T14:12:27.256658043Z        } [32m+1ms[0m
2018-11-15T14:12:27.256662885Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.257767160Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.257778328Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.257781736Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.257785041Z          if (condFunc()) {
2018-11-15T14:12:27.257788170Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.257791753Z            return resolve(value);
2018-11-15T14:12:27.257794919Z          }
2018-11-15T14:12:27.257798010Z          setTimeout(wait, interval);
2018-11-15T14:12:27.257801170Z        } [32m+1ms[0m
2018-11-15T14:12:27.257804476Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.258982989Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.258993898Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.258997286Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.259000528Z          if (condFunc()) {
2018-11-15T14:12:27.259003957Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.259007458Z            return resolve(value);
2018-11-15T14:12:27.259010664Z          }
2018-11-15T14:12:27.259013781Z          setTimeout(wait, interval);
2018-11-15T14:12:27.259016967Z        } [32m+1ms[0m
2018-11-15T14:12:27.259020137Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.260184110Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.260194264Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.260197738Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.260200942Z          if (condFunc()) {
2018-11-15T14:12:27.260204030Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.260207474Z            return resolve(value);
2018-11-15T14:12:27.260210694Z          }
2018-11-15T14:12:27.260213784Z          setTimeout(wait, interval);
2018-11-15T14:12:27.260216997Z        } [32m+2ms[0m
2018-11-15T14:12:27.260308215Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.261457925Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.261471096Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.261474493Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.261477802Z          if (condFunc()) {
2018-11-15T14:12:27.261480842Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.261484242Z            return resolve(value);
2018-11-15T14:12:27.261487511Z          }
2018-11-15T14:12:27.261490570Z          setTimeout(wait, interval);
2018-11-15T14:12:27.261493762Z        } [32m+1ms[0m
2018-11-15T14:12:27.261496957Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.262660130Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.262669701Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.262673098Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.262676280Z          if (condFunc()) {
2018-11-15T14:12:27.262679420Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.262682995Z            return resolve(value);
2018-11-15T14:12:27.262686243Z          }
2018-11-15T14:12:27.262689320Z          setTimeout(wait, interval);
2018-11-15T14:12:27.262692518Z        } [32m+1ms[0m
2018-11-15T14:12:27.265167166Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.265705978Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.265718563Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.265722279Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.265725645Z          if (condFunc()) {
2018-11-15T14:12:27.265728834Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.265732562Z            return resolve(value);
2018-11-15T14:12:27.265735749Z          }
2018-11-15T14:12:27.265738815Z          setTimeout(wait, interval);
2018-11-15T14:12:27.265742005Z        } [32m+3ms[0m
2018-11-15T14:12:27.265745307Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.270449059Z    [35;1mengine [0mupgrading existing transport [35m+33ms[0m
2018-11-15T14:12:27.273701704Z    [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+36ms[0m
2018-11-15T14:12:27.273927399Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.273937207Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.273940722Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.273943962Z          if (condFunc()) {
2018-11-15T14:12:27.273947042Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.273950600Z            return resolve(value);
2018-11-15T14:12:27.273953847Z          }
2018-11-15T14:12:27.273956886Z          setTimeout(wait, interval);
2018-11-15T14:12:27.273960118Z        } [32m+8ms[0m
2018-11-15T14:12:27.274051587Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.274346576Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+4ms[0m
2018-11-15T14:12:27.274483210Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjqdr&sid=XbDiEVEDIgI7xA2-AAAD" [35m+0ms[0m
2018-11-15T14:12:27.274492291Z    [35;1mengine [0msetting new request for existing client [35m+0ms[0m
2018-11-15T14:12:27.274574362Z    [31;1mengine:polling [0msetting request [31m+37ms[0m
2018-11-15T14:12:27.274717543Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.274725505Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.274728879Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.274732145Z          if (condFunc()) {
2018-11-15T14:12:27.274735256Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.274738696Z            return resolve(value);
2018-11-15T14:12:27.274741878Z          }
2018-11-15T14:12:27.274744974Z          setTimeout(wait, interval);
2018-11-15T14:12:27.274748112Z        } [32m+1ms[0m
2018-11-15T14:12:27.274844158Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.276273037Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.276285566Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.276289240Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.276292797Z          if (condFunc()) {
2018-11-15T14:12:27.276296021Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.276299643Z            return resolve(value);
2018-11-15T14:12:27.276302728Z          }
2018-11-15T14:12:27.276305770Z          setTimeout(wait, interval);
2018-11-15T14:12:27.276355316Z        } [32m+2ms[0m
2018-11-15T14:12:27.276427399Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.277556672Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.277569602Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.277573348Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.277576626Z          if (condFunc()) {
2018-11-15T14:12:27.277580354Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.277585628Z            return resolve(value);
2018-11-15T14:12:27.277590378Z          }
2018-11-15T14:12:27.277595123Z          setTimeout(wait, interval);
2018-11-15T14:12:27.277624021Z        } [32m+1ms[0m
2018-11-15T14:12:27.277631181Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.278850970Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.278862726Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.278866312Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.278869752Z          if (condFunc()) {
2018-11-15T14:12:27.278872866Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.278876469Z            return resolve(value);
2018-11-15T14:12:27.278879567Z          }
2018-11-15T14:12:27.278882697Z          setTimeout(wait, interval);
2018-11-15T14:12:27.278885793Z        } [32m+1ms[0m
2018-11-15T14:12:27.278888956Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.279997462Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.280007992Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.280011413Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.280014726Z          if (condFunc()) {
2018-11-15T14:12:27.280017921Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.280021502Z            return resolve(value);
2018-11-15T14:12:27.280024739Z          }
2018-11-15T14:12:27.280027806Z          setTimeout(wait, interval);
2018-11-15T14:12:27.280030932Z        } [32m+1ms[0m
2018-11-15T14:12:27.280034056Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.281304739Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.281314849Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.281328558Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.281332284Z          if (condFunc()) {
2018-11-15T14:12:27.281335484Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.281338993Z            return resolve(value);
2018-11-15T14:12:27.281342103Z          }
2018-11-15T14:12:27.281383905Z          setTimeout(wait, interval);
2018-11-15T14:12:27.281389709Z        } [32m+2ms[0m
2018-11-15T14:12:27.281393102Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.282423103Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.282433451Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.282436796Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.282440232Z          if (condFunc()) {
2018-11-15T14:12:27.282443258Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.282446687Z            return resolve(value);
2018-11-15T14:12:27.282449782Z          }
2018-11-15T14:12:27.282452857Z          setTimeout(wait, interval);
2018-11-15T14:12:27.282456032Z        } [32m+1ms[0m
2018-11-15T14:12:27.282532615Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.283668812Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.283678440Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.283682032Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.283685262Z          if (condFunc()) {
2018-11-15T14:12:27.283688360Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.283691758Z            return resolve(value);
2018-11-15T14:12:27.283694937Z          }
2018-11-15T14:12:27.283697972Z          setTimeout(wait, interval);
2018-11-15T14:12:27.283701032Z        } [32m+1ms[0m
2018-11-15T14:12:27.283704214Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.284914701Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.284925448Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.284928963Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.284932312Z          if (condFunc()) {
2018-11-15T14:12:27.284935358Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.284949366Z            return resolve(value);
2018-11-15T14:12:27.284952909Z          }
2018-11-15T14:12:27.284955925Z          setTimeout(wait, interval);
2018-11-15T14:12:27.284976341Z        } [32m+1ms[0m
2018-11-15T14:12:27.284980961Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.286125690Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.286136348Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.286139705Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.286142929Z          if (condFunc()) {
2018-11-15T14:12:27.286146005Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.286149352Z            return resolve(value);
2018-11-15T14:12:27.286152494Z          }
2018-11-15T14:12:27.286155456Z          setTimeout(wait, interval);
2018-11-15T14:12:27.286158662Z        } [32m+1ms[0m
2018-11-15T14:12:27.286161741Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.287309880Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.287319783Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.287323131Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.287326375Z          if (condFunc()) {
2018-11-15T14:12:27.287329447Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.287332815Z            return resolve(value);
2018-11-15T14:12:27.287335943Z          }
2018-11-15T14:12:27.287338894Z          setTimeout(wait, interval);
2018-11-15T14:12:27.287342014Z        } [32m+1ms[0m
2018-11-15T14:12:27.287431048Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.288558087Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.288568308Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.288571727Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.288574985Z          if (condFunc()) {
2018-11-15T14:12:27.288578437Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.288582100Z            return resolve(value);
2018-11-15T14:12:27.288585347Z          }
2018-11-15T14:12:27.288588310Z          setTimeout(wait, interval);
2018-11-15T14:12:27.288591430Z        } [32m+1ms[0m
2018-11-15T14:12:27.288594707Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.289746290Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.289756316Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.289759865Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.289763306Z          if (condFunc()) {
2018-11-15T14:12:27.289766397Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.289769868Z            return resolve(value);
2018-11-15T14:12:27.289772941Z          }
2018-11-15T14:12:27.289775981Z          setTimeout(wait, interval);
2018-11-15T14:12:27.289779210Z        } [32m+1ms[0m
2018-11-15T14:12:27.289879507Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.290970636Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.290980473Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.290984040Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.290987250Z          if (condFunc()) {
2018-11-15T14:12:27.290990382Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.290993812Z            return resolve(value);
2018-11-15T14:12:27.290996953Z          }
2018-11-15T14:12:27.290999942Z          setTimeout(wait, interval);
2018-11-15T14:12:27.291003041Z        } [32m+1ms[0m
2018-11-15T14:12:27.291077195Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.292216548Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.292227540Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.292230951Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.292234273Z          if (condFunc()) {
2018-11-15T14:12:27.292237411Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.292240788Z            return resolve(value);
2018-11-15T14:12:27.292243844Z          }
2018-11-15T14:12:27.292246911Z          setTimeout(wait, interval);
2018-11-15T14:12:27.292249988Z        } [32m+2ms[0m
2018-11-15T14:12:27.292329141Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.293455929Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.293466660Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.293470385Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.293482334Z          if (condFunc()) {
2018-11-15T14:12:27.293485737Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.293489171Z            return resolve(value);
2018-11-15T14:12:27.293509348Z          }
2018-11-15T14:12:27.293512929Z          setTimeout(wait, interval);
2018-11-15T14:12:27.293516132Z        } [32m+1ms[0m
2018-11-15T14:12:27.293594636Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.294705456Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.294715158Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.294718613Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.294721820Z          if (condFunc()) {
2018-11-15T14:12:27.294724981Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.294728361Z            return resolve(value);
2018-11-15T14:12:27.294731558Z          }
2018-11-15T14:12:27.294734556Z          setTimeout(wait, interval);
2018-11-15T14:12:27.294737658Z        } [32m+1ms[0m
2018-11-15T14:12:27.294831848Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.295918031Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.295927163Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.295930554Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.295933768Z          if (condFunc()) {
2018-11-15T14:12:27.295936861Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.295940191Z            return resolve(value);
2018-11-15T14:12:27.295943421Z          }
2018-11-15T14:12:27.295946380Z          setTimeout(wait, interval);
2018-11-15T14:12:27.295949501Z        } [32m+1ms[0m
2018-11-15T14:12:27.296040594Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.297166372Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.297176834Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.297180297Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.297183692Z          if (condFunc()) {
2018-11-15T14:12:27.297186783Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.297190268Z            return resolve(value);
2018-11-15T14:12:27.297193377Z          }
2018-11-15T14:12:27.297206617Z          setTimeout(wait, interval);
2018-11-15T14:12:27.297240784Z        } [32m+2ms[0m
2018-11-15T14:12:27.297246297Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.301916599Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.301934660Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.301938580Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.301941937Z          if (condFunc()) {
2018-11-15T14:12:27.301945099Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.301948691Z            return resolve(value);
2018-11-15T14:12:27.301968320Z          }
2018-11-15T14:12:27.301972894Z          setTimeout(wait, interval);
2018-11-15T14:12:27.301976064Z        } [32m+4ms[0m
2018-11-15T14:12:27.301979304Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.302647214Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.302656878Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.302660375Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.302663690Z          if (condFunc()) {
2018-11-15T14:12:27.302666881Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.302678075Z            return resolve(value);
2018-11-15T14:12:27.302681913Z          }
2018-11-15T14:12:27.302684987Z          setTimeout(wait, interval);
2018-11-15T14:12:27.302688293Z        } [32m+1ms[0m
2018-11-15T14:12:27.302705639Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.303397869Z    [33;1mengine:ws [0mreceived "2probe" [33m+0ms[0m
2018-11-15T14:12:27.304030520Z    [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
2018-11-15T14:12:27.305347107Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.305357490Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.305361209Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.305364629Z          if (condFunc()) {
2018-11-15T14:12:27.305367884Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.305371958Z            return resolve(value);
2018-11-15T14:12:27.305375358Z          }
2018-11-15T14:12:27.305378403Z          setTimeout(wait, interval);
2018-11-15T14:12:27.305381772Z        } [32m+3ms[0m
2018-11-15T14:12:27.305439329Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.308341863Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.308354639Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.308358329Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.308361692Z          if (condFunc()) {
2018-11-15T14:12:27.308364899Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.308368475Z            return resolve(value);
2018-11-15T14:12:27.308371630Z          }
2018-11-15T14:12:27.308374853Z          setTimeout(wait, interval);
2018-11-15T14:12:27.308378027Z        } [32m+3ms[0m
2018-11-15T14:12:27.308381225Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.309596878Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.309608679Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.309612089Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.309615375Z          if (condFunc()) {
2018-11-15T14:12:27.309618531Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.309622086Z            return resolve(value);
2018-11-15T14:12:27.309625181Z          }
2018-11-15T14:12:27.309628251Z          setTimeout(wait, interval);
2018-11-15T14:12:27.309631515Z        } [32m+1ms[0m
2018-11-15T14:12:27.309711089Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.310837509Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.310847275Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.310850679Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.310854184Z          if (condFunc()) {
2018-11-15T14:12:27.310857387Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.310860913Z            return resolve(value);
2018-11-15T14:12:27.310864124Z          }
2018-11-15T14:12:27.310867156Z          setTimeout(wait, interval);
2018-11-15T14:12:27.310870302Z        } [32m+1ms[0m
2018-11-15T14:12:27.310944258Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.312136326Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.312146516Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.312192685Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.312197778Z          if (condFunc()) {
2018-11-15T14:12:27.312200987Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.312204630Z            return resolve(value);
2018-11-15T14:12:27.312207997Z          }
2018-11-15T14:12:27.312211056Z          setTimeout(wait, interval);
2018-11-15T14:12:27.312214313Z        } [32m+1ms[0m
2018-11-15T14:12:27.312304073Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.313457253Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.313467935Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.313471376Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.313474695Z          if (condFunc()) {
2018-11-15T14:12:27.313484704Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.313488280Z            return resolve(value);
2018-11-15T14:12:27.313506133Z          }
2018-11-15T14:12:27.313509474Z          setTimeout(wait, interval);
2018-11-15T14:12:27.313512633Z        } [32m+1ms[0m
2018-11-15T14:12:27.313588891Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.314750522Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.314759943Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.314763348Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.314766538Z          if (condFunc()) {
2018-11-15T14:12:27.314769629Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.314773069Z            return resolve(value);
2018-11-15T14:12:27.314776272Z          }
2018-11-15T14:12:27.314779290Z          setTimeout(wait, interval);
2018-11-15T14:12:27.314782394Z        } [32m+1ms[0m
2018-11-15T14:12:27.314870426Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.316080662Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.316094896Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.316100763Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.316105790Z          if (condFunc()) {
2018-11-15T14:12:27.316165870Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.316174178Z            return resolve(value);
2018-11-15T14:12:27.316192324Z          }
2018-11-15T14:12:27.316197699Z          setTimeout(wait, interval);
2018-11-15T14:12:27.316202645Z        } [32m+1ms[0m
2018-11-15T14:12:27.316228514Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.317254580Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.317264925Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.317275537Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.317278737Z          if (condFunc()) {
2018-11-15T14:12:27.317281798Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.317285331Z            return resolve(value);
2018-11-15T14:12:27.317288429Z          }
2018-11-15T14:12:27.317291400Z          setTimeout(wait, interval);
2018-11-15T14:12:27.317294932Z        } [32m+2ms[0m
2018-11-15T14:12:27.317394035Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.318565586Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.318576986Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.318580469Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.318583683Z          if (condFunc()) {
2018-11-15T14:12:27.318586838Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.318590432Z            return resolve(value);
2018-11-15T14:12:27.318593638Z          }
2018-11-15T14:12:27.318596716Z          setTimeout(wait, interval);
2018-11-15T14:12:27.318600022Z        } [32m+1ms[0m
2018-11-15T14:12:27.318676911Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.319863327Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.319878746Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.319884848Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.319888818Z          if (condFunc()) {
2018-11-15T14:12:27.319922930Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.319928658Z            return resolve(value);
2018-11-15T14:12:27.319931823Z          }
2018-11-15T14:12:27.319934893Z          setTimeout(wait, interval);
2018-11-15T14:12:27.319938092Z        } [32m+1ms[0m
2018-11-15T14:12:27.320037948Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.321120522Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.321130597Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.321134004Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.321137244Z          if (condFunc()) {
2018-11-15T14:12:27.321140314Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.321143811Z            return resolve(value);
2018-11-15T14:12:27.321147004Z          }
2018-11-15T14:12:27.321150008Z          setTimeout(wait, interval);
2018-11-15T14:12:27.321153113Z        } [32m+1ms[0m
2018-11-15T14:12:27.321237308Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.322391624Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.322402596Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.322406127Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.322409425Z          if (condFunc()) {
2018-11-15T14:12:27.322412514Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.322416119Z            return resolve(value);
2018-11-15T14:12:27.322419375Z          }
2018-11-15T14:12:27.322422353Z          setTimeout(wait, interval);
2018-11-15T14:12:27.322425508Z        } [32m+1ms[0m
2018-11-15T14:12:27.322501947Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.323710161Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.323720971Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.323724991Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.323730052Z          if (condFunc()) {
2018-11-15T14:12:27.323735868Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.323741527Z            return resolve(value);
2018-11-15T14:12:27.323746419Z          }
2018-11-15T14:12:27.323792174Z          setTimeout(wait, interval);
2018-11-15T14:12:27.323799098Z        } [32m+1ms[0m
2018-11-15T14:12:27.323804267Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.324951113Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.324964016Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.324969525Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.324974768Z          if (condFunc()) {
2018-11-15T14:12:27.325026459Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.325032235Z            return resolve(value);
2018-11-15T14:12:27.325035317Z          }
2018-11-15T14:12:27.325038269Z          setTimeout(wait, interval);
2018-11-15T14:12:27.325041470Z        } [32m+1ms[0m
2018-11-15T14:12:27.325044764Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.326266475Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.326323000Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.326328881Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.326332350Z          if (condFunc()) {
2018-11-15T14:12:27.326336216Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.326340109Z            return resolve(value);
2018-11-15T14:12:27.326343260Z          }
2018-11-15T14:12:27.326346320Z          setTimeout(wait, interval);
2018-11-15T14:12:27.326349484Z        } [32m+2ms[0m
2018-11-15T14:12:27.326352832Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.327507571Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.327521231Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.327526702Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.327532024Z          if (condFunc()) {
2018-11-15T14:12:27.327537042Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.327542735Z            return resolve(value);
2018-11-15T14:12:27.327582039Z          }
2018-11-15T14:12:27.327586052Z          setTimeout(wait, interval);
2018-11-15T14:12:27.327589333Z        } [32m+1ms[0m
2018-11-15T14:12:27.327592701Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.328747557Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.328760934Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.328766398Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.328772131Z          if (condFunc()) {
2018-11-15T14:12:27.328777038Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.328782649Z            return resolve(value);
2018-11-15T14:12:27.328822786Z          }
2018-11-15T14:12:27.328829288Z          setTimeout(wait, interval);
2018-11-15T14:12:27.328848610Z        } [32m+1ms[0m
2018-11-15T14:12:27.328854239Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.330044475Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.330059075Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.330064445Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.330069677Z          if (condFunc()) {
2018-11-15T14:12:27.330074597Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.330080184Z            return resolve(value);
2018-11-15T14:12:27.330104306Z          }
2018-11-15T14:12:27.330110188Z          setTimeout(wait, interval);
2018-11-15T14:12:27.330115153Z        } [32m+1ms[0m
2018-11-15T14:12:27.330120266Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.331250910Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.331262013Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.331265490Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.331268731Z          if (condFunc()) {
2018-11-15T14:12:27.331271952Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.331275546Z            return resolve(value);
2018-11-15T14:12:27.331278752Z          }
2018-11-15T14:12:27.331281776Z          setTimeout(wait, interval);
2018-11-15T14:12:27.331284931Z        } [32m+2ms[0m
2018-11-15T14:12:27.331362924Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.332512796Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.332523279Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.332526842Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.332530033Z          if (condFunc()) {
2018-11-15T14:12:27.332533074Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.332536553Z            return resolve(value);
2018-11-15T14:12:27.332539763Z          }
2018-11-15T14:12:27.332542723Z          setTimeout(wait, interval);
2018-11-15T14:12:27.332545853Z        } [32m+1ms[0m
2018-11-15T14:12:27.332623598Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.333811746Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.333826834Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.333843671Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.333892628Z          if (condFunc()) {
2018-11-15T14:12:27.333899990Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.333905719Z            return resolve(value);
2018-11-15T14:12:27.333910381Z          }
2018-11-15T14:12:27.333915104Z          setTimeout(wait, interval);
2018-11-15T14:12:27.333919868Z        } [32m+1ms[0m
2018-11-15T14:12:27.333924876Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.335039909Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.335050295Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.335053667Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.335057027Z          if (condFunc()) {
2018-11-15T14:12:27.335060048Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.335063461Z            return resolve(value);
2018-11-15T14:12:27.335066741Z          }
2018-11-15T14:12:27.335069731Z          setTimeout(wait, interval);
2018-11-15T14:12:27.335072881Z        } [32m+1ms[0m
2018-11-15T14:12:27.335160845Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.336322267Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.336338591Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.336346015Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.336353033Z          if (condFunc()) {
2018-11-15T14:12:27.336357878Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.336401795Z            return resolve(value);
2018-11-15T14:12:27.336405430Z          }
2018-11-15T14:12:27.336408571Z          setTimeout(wait, interval);
2018-11-15T14:12:27.336411736Z        } [32m+2ms[0m
2018-11-15T14:12:27.336536239Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.337605276Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.337616991Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.337620577Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.337624594Z          if (condFunc()) {
2018-11-15T14:12:27.337629131Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.337687424Z            return resolve(value);
2018-11-15T14:12:27.337694792Z          }
2018-11-15T14:12:27.337699658Z          setTimeout(wait, interval);
2018-11-15T14:12:27.337704624Z        } [32m+1ms[0m
2018-11-15T14:12:27.337807079Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.338879464Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.338889438Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.338892820Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.338896161Z          if (condFunc()) {
2018-11-15T14:12:27.338899285Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.338902841Z            return resolve(value);
2018-11-15T14:12:27.338905937Z          }
2018-11-15T14:12:27.338908905Z          setTimeout(wait, interval);
2018-11-15T14:12:27.338912117Z        } [32m+1ms[0m
2018-11-15T14:12:27.338989316Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:27.340171850Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.340181849Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.340185366Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.340188635Z          if (condFunc()) {
2018-11-15T14:12:27.340192410Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.340197850Z            return resolve(value);
2018-11-15T14:12:27.340203472Z          }
2018-11-15T14:12:27.340208430Z          setTimeout(wait, interval);
2018-11-15T14:12:27.340213169Z        } [32m+1ms[0m
2018-11-15T14:12:27.340261330Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:12:27.341568697Z    [32;1mRepl [0m  [concatResult(data = irb(main):001:0> )] result: "" [32m+1ms[0m
2018-11-15T14:12:27.341731253Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:27.341740311Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:27.341743674Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:27.341747073Z          if (condFunc()) {
2018-11-15T14:12:27.341750140Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:27.341753646Z            return resolve(value);
2018-11-15T14:12:27.341756827Z          }
2018-11-15T14:12:27.341760316Z          setTimeout(wait, interval);
2018-11-15T14:12:27.341772020Z        } [32m+0ms[0m
2018-11-15T14:12:27.341850527Z    [32;1mRepl [0m  [isDataReceived()] result: "irb(main):001:0> " [32m+0ms[0m
2018-11-15T14:12:27.341874749Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:12:27.342409608Z    [32;1mRepl [0m`let currResult = result` //==> "irb(main):001:0> " [32m+1ms[0m
2018-11-15T14:12:27.342511918Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:12:27.348144235Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:12:27.348209590Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:12:27.348489897Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:12:27.348653045Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:12:27.348662845Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:12:27.348666703Z        // @todo: Check if return is necessary here.
2018-11-15T14:12:27.348670035Z        return result += data;
2018-11-15T14:12:27.348673319Z      })] [32m+0ms[0m
2018-11-15T14:12:27.348768170Z    [32;1mRepl [0m  resolve(result = "irb(main):001:0> ") [32m+0ms[0m
2018-11-15T14:12:27.348945668Z    [32;1mserver [0m    data: "irb(main):001:0> " [32m+147ms[0m
2018-11-15T14:12:27.349322213Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} [32m+148ms[0m
2018-11-15T14:12:27.349440970Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}] [32m+0ms[0m
2018-11-15T14:12:27.349792399Z    [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+148ms[0m
2018-11-15T14:12:27.349896727Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+76ms[0m
2018-11-15T14:12:27.350081243Z    [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+0ms[0m
2018-11-15T14:12:27.350096023Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+0ms[0m
2018-11-15T14:12:27.350318994Z    [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+0ms[0m
2018-11-15T14:12:27.350331753Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+1ms[0m
2018-11-15T14:12:27.350336339Z    [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+1ms[0m
2018-11-15T14:12:27.350340513Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+0ms[0m
2018-11-15T14:12:27.350344501Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:12:27.350347880Z    [31;1mengine:polling [0mwriting "89:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]" [31m+76ms[0m
2018-11-15T14:12:27.383863313Z    [33;1mengine:ws [0mreceived "5" [33m+80ms[0m
2018-11-15T14:12:27.383901512Z    [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+33ms[0m
2018-11-15T14:12:27.384442929Z    [31;1mengine:polling [0mclosing [31m+34ms[0m
2018-11-15T14:12:27.384454768Z    [31;1mengine:polling [0mtransport discarded - closing right away [31m+0ms[0m
2018-11-15T14:12:31.467610607Z    [31;1mexpress:router [0mdispatching GET / [31m+5s[0m
2018-11-15T14:12:31.468701944Z    [31;1mexpress:router [0mquery  : / [31m+1ms[0m
2018-11-15T14:12:31.469343190Z    [31;1mexpress:router [0mexpressInit  : / [31m+1ms[0m
2018-11-15T14:12:31.469760163Z    [31;1mexpress:router [0mtextParser  : / [31m+0ms[0m
2018-11-15T14:12:31.470329858Z    [32;1mbody-parser:text [0mskip empty body [32m+0ms[0m
2018-11-15T14:12:31.470613398Z    [31;1mexpress:router [0mserveStatic  : / [31m+1ms[0m
2018-11-15T14:12:31.472067208Z    [36;1msend [0mstat "/app/public/index.html" [36m+0ms[0m
2018-11-15T14:12:31.473222822Z    [36;1msend [0mpipe "/app/public/index.html" [36m+2ms[0m
2018-11-15T14:12:31.473535973Z    [36;1msend [0maccept ranges [36m+0ms[0m
2018-11-15T14:12:31.473792088Z    [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
2018-11-15T14:12:31.474050208Z    [36;1msend [0mmodified Thu, 15 Nov 2018 07:15:53 GMT [36m+0ms[0m
2018-11-15T14:12:31.474331330Z    [36;1msend [0metag W/"28c-1671639e828" [36m+1ms[0m
2018-11-15T14:12:31.474666132Z    [36;1msend [0mcontent-type text/html [36m+0ms[0m
2018-11-15T14:12:31.520055586Z    [33;1msocket.io:client [0mclient close with reason transport close [33m+4s[0m
2018-11-15T14:12:31.520592461Z    [36;1msocket.io:socket [0mclosing socket - reason transport close [36m+4s[0m
2018-11-15T14:12:31.520940396Z    [32;1mserver [0m  ["disconnect"] [32m+4s[0m
2018-11-15T14:12:31.521278185Z    [32;1mserver [0m    [io of / .clients] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC [32m+1ms[0m
2018-11-15T14:12:31.522642346Z    [31;1mexpress:router [0mdispatching GET /main.js [31m+52ms[0m
2018-11-15T14:12:31.523108419Z    [31;1mexpress:router [0mquery  : /main.js [31m+0ms[0m
2018-11-15T14:12:31.523625733Z    [31;1mexpress:router [0mexpressInit  : /main.js [31m+1ms[0m
2018-11-15T14:12:31.524010184Z    [31;1mexpress:router [0mtextParser  : /main.js [31m+0ms[0m
2018-11-15T14:12:31.524413753Z    [32;1mbody-parser:text [0mskip empty body [32m+53ms[0m
2018-11-15T14:12:31.524429263Z    [31;1mexpress:router [0mserveStatic  : /main.js [31m+1ms[0m
2018-11-15T14:12:31.525058695Z    [36;1msend [0mstat "/app/public/main.js" [36m+50ms[0m
2018-11-15T14:12:31.525821932Z    [36;1msend [0mpipe "/app/public/main.js" [36m+1ms[0m
2018-11-15T14:12:31.525847410Z    [36;1msend [0maccept ranges [36m+0ms[0m
2018-11-15T14:12:31.525855270Z    [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
2018-11-15T14:12:31.525861050Z    [36;1msend [0mmodified Thu, 15 Nov 2018 14:12:09 GMT [36m+0ms[0m
2018-11-15T14:12:31.526651412Z    [36;1msend [0metag W/"1250ee-16717b702a8" [36m+0ms[0m
2018-11-15T14:12:31.526665040Z    [36;1msend [0mcontent-type application/javascript [36m+0ms[0m
2018-11-15T14:12:31.969481607Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+5s[0m
2018-11-15T14:12:31.969528586Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjrnE" [35m+0ms[0m
2018-11-15T14:12:31.970072498Z    [35;1mengine [0mhandshaking client "1a_lX5Xy_gODM1F3AAAE" [35m+0ms[0m
2018-11-15T14:12:31.970446669Z    [34;1mengine:socket [0msending packet "open" ({"sid":"1a_lX5Xy_gODM1F3AAAE","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+5s[0m
2018-11-15T14:12:31.970533897Z    [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
2018-11-15T14:12:31.970796731Z    [31;1mengine:polling [0msetting request [31m+5s[0m
2018-11-15T14:12:31.970809873Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:12:31.971348344Z    [31;1mengine:polling [0mwriting "96:0{"sid":"1a_lX5Xy_gODM1F3AAAE","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
2018-11-15T14:12:31.971385240Z    [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
2018-11-15T14:12:31.971612433Z    [33;1msocket.io:server [0mincoming connection with id 1a_lX5Xy_gODM1F3AAAE [33m+5s[0m
2018-11-15T14:12:31.971840568Z    [33;1msocket.io:client [0mconnecting to namespace / [33m+452ms[0m
2018-11-15T14:12:31.972063289Z    [36;1msocket.io:namespace [0madding socket to nsp / [36m+5s[0m
2018-11-15T14:12:31.972519807Z    [36;1msocket.io:socket [0msocket connected - writing packet [36m+452ms[0m
2018-11-15T14:12:31.972707244Z    [36;1msocket.io:socket [0mjoining room 1a_lX5Xy_gODM1F3AAAE [36m+0ms[0m
2018-11-15T14:12:31.972958111Z    [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
2018-11-15T14:12:31.973229196Z    [32;1mserver [0mio.on("connection", (socket) => { [32m+451ms[0m
2018-11-15T14:12:31.973238985Z    [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
2018-11-15T14:12:31.973243069Z   [32m+1ms[0m
2018-11-15T14:12:31.973502509Z    [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+2ms[0m
2018-11-15T14:12:31.973704540Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+5s[0m
2018-11-15T14:12:31.973856472Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
2018-11-15T14:12:31.974010710Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+2ms[0m
2018-11-15T14:12:31.974399100Z    [36;1msocket.io:socket [0mjoined room 1a_lX5Xy_gODM1F3AAAE [36m+2ms[0m
2018-11-15T14:12:31.974478900Z    [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: c_okeXEnbRR0kDbNAAAA,RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC,1a_lX5Xy_gODM1F3AAAE [32m+1ms[0m
2018-11-15T14:12:32.121033405Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+151ms[0m
2018-11-15T14:12:32.121191759Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjrpY&sid=1a_lX5Xy_gODM1F3AAAE" [35m+0ms[0m
2018-11-15T14:12:32.121512823Z    [35;1mengine [0msetting new request for existing client [35m+1ms[0m
2018-11-15T14:12:32.121699848Z    [31;1mengine:polling [0msetting request [31m+151ms[0m
2018-11-15T14:12:32.121906954Z    [34;1mengine:socket [0mflushing buffer to transport [34m+148ms[0m
2018-11-15T14:12:32.122157836Z    [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
2018-11-15T14:12:32.122685219Z    [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
2018-11-15T14:12:32.151052293Z    [35;1mengine [0mupgrading existing transport [35m+29ms[0m
2018-11-15T14:12:32.151423908Z    [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+29ms[0m
2018-11-15T14:12:32.161205266Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+10ms[0m
2018-11-15T14:12:32.161887842Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNjrqE&sid=1a_lX5Xy_gODM1F3AAAE" [35m+1ms[0m
2018-11-15T14:12:32.163076109Z    [35;1mengine [0msetting new request for existing client [35m+1ms[0m
2018-11-15T14:12:32.163088960Z    [31;1mengine:polling [0msetting request [31m+41ms[0m
2018-11-15T14:12:32.185125535Z    [33;1mengine:ws [0mreceived "2probe" [33m+5s[0m
2018-11-15T14:12:32.185204697Z    [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
2018-11-15T14:12:32.286014512Z    [34;1mengine:socket [0mwriting a noop packet to polling for fast upgrade [34m+134ms[0m
2018-11-15T14:12:32.286043026Z    [31;1mengine:polling [0mwriting "1:6" [31m+123ms[0m
2018-11-15T14:12:32.316904905Z    [33;1mengine:ws [0mreceived "5" [33m+132ms[0m
2018-11-15T14:12:32.316934764Z    [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+31ms[0m
2018-11-15T14:12:32.316939332Z    [31;1mengine:polling [0mclosing [31m+31ms[0m
2018-11-15T14:12:32.316943819Z    [31;1mengine:polling [0mtransport discarded - closing right away [31m+0ms[0m
2018-11-15T14:12:34.643008854Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+2s[0m
2018-11-15T14:12:34.643036192Z    [34;1mengine:socket [0mpacket [34m+2s[0m
2018-11-15T14:12:34.643131151Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+3s[0m
2018-11-15T14:12:34.643136804Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+3s[0m
2018-11-15T14:12:34.643141129Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
2018-11-15T14:12:34.643145093Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:12:34.643162298Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+3s[0m
2018-11-15T14:12:34.643166192Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:12:34.643170339Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:12:34.643174492Z    [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"1\"}]"] [33m+3s[0m
2018-11-15T14:12:34.643178433Z    [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":"1"}]) [34m+1ms[0m
2018-11-15T14:12:34.643182262Z    [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"1\"}]"] [33m+0ms[0m
2018-11-15T14:12:34.643186171Z    [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":"1"}]) [34m+0ms[0m
2018-11-15T14:12:34.643212233Z    [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"1\"}]"] [33m+0ms[0m
2018-11-15T14:12:34.643219688Z    [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":"1"}]) [34m+0ms[0m
2018-11-15T14:12:34.875937295Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+234ms[0m
2018-11-15T14:12:34.875967352Z    [34;1mengine:socket [0mpacket [34m+233ms[0m
2018-11-15T14:12:34.875971929Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+233ms[0m
2018-11-15T14:12:34.875976848Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+233ms[0m
2018-11-15T14:12:34.875981195Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:12:34.875985198Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:12:34.875988939Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+233ms[0m
2018-11-15T14:12:34.875992574Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:12:34.875996792Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:12:34.876000933Z    [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"\"}]"] [33m+233ms[0m
2018-11-15T14:12:34.876005013Z    [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":""}]) [34m+0ms[0m
2018-11-15T14:12:34.876008929Z    [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"\"}]"] [33m+0ms[0m
2018-11-15T14:12:34.876037197Z    [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":""}]) [34m+0ms[0m
2018-11-15T14:12:34.876060482Z    [33;1msocket.io:client [0mwriting packet ["2[\"syncLine\",{\"line\":\"\"}]"] [33m+0ms[0m
2018-11-15T14:12:34.876064336Z    [34;1mengine:socket [0msending packet "message" (2["syncLine",{"line":""}]) [34m+0ms[0m
2018-11-15T14:12:34.881984888Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+6ms[0m
2018-11-15T14:12:34.882006872Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:12:34.882013165Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+6ms[0m
2018-11-15T14:12:34.882020303Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+6ms[0m
2018-11-15T14:12:34.882027727Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:12:34.882033711Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:12:34.882040550Z    [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+6ms[0m
2018-11-15T14:12:34.882046994Z    [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+8s[0m
2018-11-15T14:12:34.882053339Z    [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
2018-11-15T14:12:34.882058693Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:12:34.882063932Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:12:34.882069475Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:12:34.882074847Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:12:34.882080812Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:12:34.882086051Z        return result !== '';
2018-11-15T14:12:34.882091050Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:12:34.882096509Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:12:34.882100687Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:34.882103856Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:34.882107057Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:34.882110257Z          if (condFunc()) {
2018-11-15T14:12:34.882124186Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:34.882127916Z            return resolve(value);
2018-11-15T14:12:34.882131020Z          }
2018-11-15T14:12:34.882134100Z          setTimeout(wait, interval);
2018-11-15T14:12:34.882137393Z        } [32m+0ms[0m
2018-11-15T14:12:34.882140571Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:12:34.882352459Z    [32;1mRepl [0m  [concatResult(data = 1
2018-11-15T14:12:34.882364967Z  )] result: "" [32m+1ms[0m
2018-11-15T14:12:34.882805095Z    [32;1mRepl [0m  [concatResult(data = => 1
2018-11-15T14:12:34.882815826Z  )] result: "1
2018-11-15T14:12:34.882819223Z  " [32m+0ms[0m
2018-11-15T14:12:34.882822532Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:12:34.882825892Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:12:34.882829146Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:12:34.882832420Z          if (condFunc()) {
2018-11-15T14:12:34.882835546Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:12:34.882839029Z            return resolve(value);
2018-11-15T14:12:34.882842104Z          }
2018-11-15T14:12:34.882845209Z          setTimeout(wait, interval);
2018-11-15T14:12:34.882856252Z        } [32m+0ms[0m
2018-11-15T14:12:34.882859821Z    [32;1mRepl [0m  [isDataReceived()] result: "1
2018-11-15T14:12:34.882863176Z  => 1
2018-11-15T14:12:34.882866255Z  " [32m+0ms[0m
2018-11-15T14:12:34.882869689Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:12:34.882873373Z    [32;1mRepl [0m`let currResult = result` //==> "1
2018-11-15T14:12:34.882876820Z  => 1
2018-11-15T14:12:34.882880420Z  " [32m+0ms[0m
2018-11-15T14:12:34.882884623Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:12:34.883098375Z    [32;1mRepl [0m  [concatResult(data = irb(main):002:0> )] result: "1
2018-11-15T14:12:34.883180163Z  => 1
2018-11-15T14:12:34.883190619Z  " [32m+0ms[0m
2018-11-15T14:12:34.888310882Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:12:34.888326398Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "1
2018-11-15T14:12:34.888339905Z  => 1
2018-11-15T14:12:34.888343527Z  ", result: "1
2018-11-15T14:12:34.888355068Z  => 1
2018-11-15T14:12:34.888358338Z  irb(main):002:0> " [32m+0ms[0m
2018-11-15T14:12:34.894990090Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:12:34.895018354Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:12:34.895026231Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:12:34.895031802Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:12:34.895037197Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:12:34.895042680Z        // @todo: Check if return is necessary here.
2018-11-15T14:12:34.895056805Z        return result += data;
2018-11-15T14:12:34.895062707Z      })] [32m+0ms[0m
2018-11-15T14:12:34.895083274Z    [32;1mRepl [0m  resolve(result = "1
2018-11-15T14:12:34.895090188Z  => 1
2018-11-15T14:12:34.895093693Z  irb(main):002:0> ") [32m+0ms[0m
2018-11-15T14:12:34.895098050Z    [32;1mserver [0m  [emitOutput] output: 1
2018-11-15T14:12:34.895103284Z  => 1
2018-11-15T14:12:34.895107985Z  irb(main):002:0>  [32m+12ms[0m
2018-11-15T14:12:34.895114242Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:12:34.895122721Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}] [32m+1ms[0m
2018-11-15T14:12:34.895131237Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+19ms[0m
2018-11-15T14:12:34.895137960Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+14ms[0m
2018-11-15T14:12:34.895144519Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+0ms[0m
2018-11-15T14:12:34.895152096Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+0ms[0m
2018-11-15T14:12:34.895158727Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+0ms[0m
2018-11-15T14:12:34.895162911Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+0ms[0m
2018-11-15T14:12:34.895177916Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):002:0> \"}]"] [33m+0ms[0m
2018-11-15T14:12:34.895182092Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]) [34m+0ms[0m
2018-11-15T14:12:34.895186654Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:12:34.895190089Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):002:0> "}]" [33m+14ms[0m
2018-11-15T14:12:57.107820985Z    [31;1mengine:polling [0mclosing [31m+25s[0m
2018-11-15T14:12:57.107915355Z    [31;1mengine:polling [0mtransport not writable - buffering orderly close [31m+1ms[0m
2018-11-15T14:12:57.107924866Z    [33;1msocket.io:client [0mclient close with reason ping timeout [33m+22s[0m
2018-11-15T14:12:57.107930861Z    [36;1msocket.io:socket [0mclosing socket - reason ping timeout [36m+22s[0m
2018-11-15T14:12:57.107964529Z    [32;1mserver [0m  ["disconnect"] [32m+22s[0m
2018-11-15T14:12:57.107970708Z    [32;1mserver [0m    [io of / .clients] error: null, clients: RkPQe0ACGgzXQWtoAAAB,5w35iYhEWQm_iAN5AAAC,1a_lX5Xy_gODM1F3AAAE [32m+0ms[0m
2018-11-15T14:12:57.117343720Z    [33;1mengine:ws [0mreceived "2" [33m+22s[0m
2018-11-15T14:12:57.117371234Z    [34;1mengine:socket [0mpacket [34m+22s[0m
2018-11-15T14:12:57.119729345Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:12:57.119747076Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:12:57.119751356Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:12:57.119761767Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:12:57.131371901Z    [31;1mengine:polling [0mclosing [31m+23ms[0m
2018-11-15T14:12:57.131423300Z    [31;1mengine:polling [0mtransport not writable - buffering orderly close [31m+0ms[0m
2018-11-15T14:12:57.131429190Z    [33;1msocket.io:client [0mclient close with reason ping timeout [33m+23ms[0m
2018-11-15T14:12:57.131432983Z    [36;1msocket.io:socket [0mclosing socket - reason ping timeout [36m+23ms[0m
2018-11-15T14:12:57.131443620Z    [32;1mserver [0m  ["disconnect"] [32m+23ms[0m
2018-11-15T14:12:57.131448292Z    [32;1mserver [0m    [io of / .clients] error: null, clients: 5w35iYhEWQm_iAN5AAAC,1a_lX5Xy_gODM1F3AAAE [32m+1ms[0m
2018-11-15T14:12:57.166049807Z    [31;1mengine:polling [0mclosing [31m+35ms[0m
2018-11-15T14:12:57.166123380Z    [31;1mengine:polling [0mtransport not writable - buffering orderly close [31m+0ms[0m
2018-11-15T14:12:57.166134396Z    [33;1msocket.io:client [0mclient close with reason ping timeout [33m+35ms[0m
2018-11-15T14:12:57.166141166Z    [36;1msocket.io:socket [0mclosing socket - reason ping timeout [36m+35ms[0m
2018-11-15T14:12:57.166146515Z    [32;1mserver [0m  ["disconnect"] [32m+34ms[0m
2018-11-15T14:12:57.166152059Z    [32;1mserver [0m    [io of / .clients] error: null, clients: 1a_lX5Xy_gODM1F3AAAE [32m+0ms[0m
2018-11-15T14:13:22.149236112Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:13:22.149284497Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:13:22.149366012Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:13:22.149548522Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:13:22.149559617Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:13:22.149563936Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:13:47.180807377Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:13:47.180864184Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:13:47.180870992Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:13:47.180875221Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:13:47.180879842Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:13:47.180884413Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:14:12.212181674Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:14:12.212217522Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:14:12.212222705Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:14:12.212226794Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:14:12.212230910Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:14:12.212234953Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:14:37.242212069Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:14:37.242245586Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:14:37.242250686Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:14:37.242254969Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:14:37.244598669Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:14:37.244615533Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:15:02.272417125Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:15:02.272473620Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:15:02.272671178Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:15:02.272681493Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:15:02.272685794Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:15:02.272689333Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:15:27.319061695Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:15:27.319197216Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:15:27.319283755Z    [34;1mengine:socket [0mgot ping [34m+1ms[0m
2018-11-15T14:15:27.319293272Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:15:27.319297750Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:15:27.319301928Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:15:52.349363951Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:15:52.349441151Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:15:52.349448114Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:15:52.349452607Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:15:52.349456872Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:15:52.349460933Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:16:17.380888496Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:16:17.380917422Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:16:17.381070037Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:16:17.381080421Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:16:17.381084839Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:16:17.381088895Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:16:42.411576802Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:16:42.411618105Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:16:42.411623292Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:16:42.411723806Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:16:42.411746691Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:16:42.413546761Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:17:07.442859910Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:17:07.442904140Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:17:07.444850871Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:17:07.444873985Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:17:07.444882640Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:17:07.444889579Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:17:32.473397478Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:17:32.473489210Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:17:32.473494672Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:17:32.474146926Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:17:32.474163957Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:17:32.474169269Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:17:57.504575384Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:17:57.504622010Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:17:57.504628482Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:17:57.504632680Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:17:57.504636836Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:17:57.504640832Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:18:22.534924319Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:18:22.534964970Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:18:22.534971628Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:18:22.535051040Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:18:22.535059265Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:18:22.537460190Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:18:47.574065673Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:18:47.576275877Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:18:47.576286983Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:18:47.576291172Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:18:47.576295067Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:18:47.576298693Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:19:12.605011995Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:19:12.605054333Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:19:12.605560874Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:19:12.605579628Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:19:12.605585012Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:19:12.605589274Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:19:37.636301583Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:19:37.636339833Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:19:37.636345149Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:19:37.638572530Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:19:37.638578612Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:19:37.638582959Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:20:02.669942528Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:20:02.670002989Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:20:02.670012970Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:20:02.670019562Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:20:02.670026135Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:20:02.670050720Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:20:27.703339045Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:20:27.703464911Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:20:27.703498276Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:20:27.703502805Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:20:27.703506482Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:20:27.703509973Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:20:52.743383560Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:20:52.743641637Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:20:52.744047749Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:20:52.744058120Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:20:52.744063089Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:20:52.744067317Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:21:17.773878674Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:21:17.773955814Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:21:17.774021189Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:21:17.774029562Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:21:17.774033863Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:21:17.774038253Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:21:42.804512374Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:21:42.804586430Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:21:42.804710609Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:21:42.804739893Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:21:42.804748955Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:21:42.804755791Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:22:07.834273712Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:22:07.834315426Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:22:07.834420759Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:22:07.834442116Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:22:07.834447316Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:22:07.834462196Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:22:32.864874259Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:22:32.864919207Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:22:32.865070439Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:22:32.865079297Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:22:32.865083092Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:22:32.865086530Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:22:57.895137231Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:22:57.895179508Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:22:57.895187166Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:22:57.895193694Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:22:57.897400795Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:22:57.899195986Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:23:22.926741507Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:23:22.926780880Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:23:22.926786361Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:23:22.926790859Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:23:22.926795081Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:23:22.926799190Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:23:47.957961453Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:23:47.957994821Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:23:47.958000069Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:23:47.958098991Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:23:47.958119589Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:23:47.958123901Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:24:12.987777866Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:24:12.987938923Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:24:12.987955067Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:24:12.987974579Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:24:12.987979008Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:12.987982475Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:24:38.019986908Z    [33;1mengine:ws [0mreceived "2" [33m+25s[0m
2018-11-15T14:24:38.020023194Z    [34;1mengine:socket [0mpacket [34m+25s[0m
2018-11-15T14:24:38.020028664Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:24:38.020032875Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:24:38.020037007Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:38.020041189Z    [33;1mengine:ws [0mwriting "3" [33m+0ms[0m
2018-11-15T14:24:40.254254388Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+2s[0m
2018-11-15T14:24:40.254299078Z    [34;1mengine:socket [0mpacket [34m+2s[0m
2018-11-15T14:24:40.254308363Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+12m[0m
2018-11-15T14:24:40.254316047Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+12m[0m
2018-11-15T14:24:40.254453939Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:40.254481323Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:40.254490205Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+12m[0m
2018-11-15T14:24:40.254497290Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:40.254503858Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:40.467656376Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+214ms[0m
2018-11-15T14:24:40.467684739Z    [34;1mengine:socket [0mpacket [34m+214ms[0m
2018-11-15T14:24:40.467789436Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+213ms[0m
2018-11-15T14:24:40.467871429Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+213ms[0m
2018-11-15T14:24:40.467902578Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:40.467986516Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:40.468027987Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+213ms[0m
2018-11-15T14:24:40.468080740Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:40.468131750Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
2018-11-15T14:24:40.472758130Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
2018-11-15T14:24:40.472781498Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:40.472896809Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
2018-11-15T14:24:40.472977902Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
2018-11-15T14:24:40.472999367Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:40.473071510Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:40.473078646Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
2018-11-15T14:24:40.473129665Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+12m[0m
2018-11-15T14:24:40.473198859Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:40.473775769Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:40.476063252Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:40.476076377Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:40.476080860Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:40.476084366Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:40.476087827Z        return result !== '';
2018-11-15T14:24:40.476090993Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:40.476094628Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:40.476098387Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:40.476101572Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:40.476115433Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:40.476119015Z          if (condFunc()) {
2018-11-15T14:24:40.476122115Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:40.476125564Z            return resolve(value);
2018-11-15T14:24:40.476128716Z          }
2018-11-15T14:24:40.476131762Z          setTimeout(wait, interval);
2018-11-15T14:24:40.476134884Z        } [32m+0ms[0m
2018-11-15T14:24:40.476138015Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:40.476141500Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:40.476144806Z  => 3
2018-11-15T14:24:40.476147846Z  irb(main):003:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:40.476151214Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:40.476154498Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:40.476157570Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:40.476160735Z          if (condFunc()) {
2018-11-15T14:24:40.476163755Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:40.476167161Z            return resolve(value);
2018-11-15T14:24:40.476170220Z          }
2018-11-15T14:24:40.476173196Z          setTimeout(wait, interval);
2018-11-15T14:24:40.476176227Z        } [32m+1ms[0m
2018-11-15T14:24:40.476179391Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:40.476182654Z  => 3
2018-11-15T14:24:40.476185682Z  irb(main):003:0> " [32m+0ms[0m
2018-11-15T14:24:40.476188910Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:40.476192473Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:40.476195804Z  => 3
2018-11-15T14:24:40.476198846Z  irb(main):003:0> " [32m+0ms[0m
2018-11-15T14:24:40.476202212Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:40.480733572Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:40.480844838Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:40.480854030Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:40.480917264Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:40.480939984Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:40.480947152Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:40.480952295Z        return result += data;
2018-11-15T14:24:40.480965497Z      })] [32m+0ms[0m
2018-11-15T14:24:40.480969661Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:40.480972996Z  => 3
2018-11-15T14:24:40.480976197Z  irb(main):003:0> ") [32m+0ms[0m
2018-11-15T14:24:40.481041423Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:40.481050687Z  => 3
2018-11-15T14:24:40.481055133Z  irb(main):003:0>  [32m+8ms[0m
2018-11-15T14:24:40.481132678Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:24:40.481261262Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}] [32m+0ms[0m
2018-11-15T14:24:40.481372349Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):003:0> \"}]"] [33m+12m[0m
2018-11-15T14:24:40.481385501Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}]) [34m+9ms[0m
2018-11-15T14:24:40.481491228Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:40.481503553Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):003:0> "}]" [33m+9ms[0m
2018-11-15T14:24:40.737674035Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+256ms[0m
2018-11-15T14:24:40.737833265Z    [34;1mengine:socket [0mpacket [34m+256ms[0m
2018-11-15T14:24:40.737844411Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+256ms[0m
2018-11-15T14:24:40.737924265Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+265ms[0m
2018-11-15T14:24:40.737941493Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:40.737946472Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:40.738009218Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+257ms[0m
2018-11-15T14:24:40.738024239Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:40.738148336Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:40.742631580Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:24:40.742744614Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:40.742833814Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:24:40.742843484Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:24:40.742937011Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:40.742952763Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:40.742956840Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:24:40.743035696Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+262ms[0m
2018-11-15T14:24:40.743055301Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:40.743060141Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:40.743394540Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:40.743484627Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:40.743521750Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:40.743526245Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:40.743529685Z        return result !== '';
2018-11-15T14:24:40.743532747Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:40.743535990Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:40.743633755Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:40.743641554Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:40.743645078Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:40.743648357Z          if (condFunc()) {
2018-11-15T14:24:40.743651441Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:40.743654997Z            return resolve(value);
2018-11-15T14:24:40.743672636Z          }
2018-11-15T14:24:40.743676535Z          setTimeout(wait, interval);
2018-11-15T14:24:40.743689599Z        } [32m+0ms[0m
2018-11-15T14:24:40.743696786Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:40.743778789Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:40.743786058Z  irb(main):004:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:40.744830670Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:40.744846629Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:40.744855701Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:40.744859283Z          if (condFunc()) {
2018-11-15T14:24:40.744862370Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:40.744865869Z            return resolve(value);
2018-11-15T14:24:40.744869309Z          }
2018-11-15T14:24:40.744872354Z          setTimeout(wait, interval);
2018-11-15T14:24:40.744875540Z        } [32m+1ms[0m
2018-11-15T14:24:40.744939845Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:40.744947005Z  irb(main):004:0> " [32m+0ms[0m
2018-11-15T14:24:40.744950664Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:40.745033711Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:40.745041237Z  irb(main):004:0> " [32m+0ms[0m
2018-11-15T14:24:40.745196988Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:40.750266586Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:40.750369966Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:40.750389997Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:40.750477252Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:40.750485769Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:40.750489480Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:40.750512496Z        return result += data;
2018-11-15T14:24:40.750516176Z      })] [32m+0ms[0m
2018-11-15T14:24:40.750519397Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:40.750522842Z  irb(main):004:0> ") [32m+0ms[0m
2018-11-15T14:24:40.750526211Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:40.750529587Z  irb(main):004:0>  [32m+8ms[0m
2018-11-15T14:24:40.750615091Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):004:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:40.750624225Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):004:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):004:0> "}] [32m+0ms[0m
2018-11-15T14:24:40.750701987Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):004:0> \"}]"] [33m+269ms[0m
2018-11-15T14:24:40.750710167Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):004:0> "}]) [34m+8ms[0m
2018-11-15T14:24:40.750714426Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:40.750784197Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):004:0> "}]" [33m+8ms[0m
2018-11-15T14:24:41.195981175Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+445ms[0m
2018-11-15T14:24:41.196200110Z    [34;1mengine:socket [0mpacket [34m+445ms[0m
2018-11-15T14:24:41.196230238Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+445ms[0m
2018-11-15T14:24:41.196412575Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+454ms[0m
2018-11-15T14:24:41.196427580Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:41.196435666Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:41.196442701Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+446ms[0m
2018-11-15T14:24:41.196575031Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:41.196589431Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:41.269324562Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+74ms[0m
2018-11-15T14:24:41.269443030Z    [34;1mengine:socket [0mpacket [34m+74ms[0m
2018-11-15T14:24:41.269480684Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+73ms[0m
2018-11-15T14:24:41.269557170Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+73ms[0m
2018-11-15T14:24:41.269565254Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:41.269639364Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:41.269646891Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+73ms[0m
2018-11-15T14:24:41.269735451Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:41.269746358Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:41.336999068Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+67ms[0m
2018-11-15T14:24:41.337027831Z    [34;1mengine:socket [0mpacket [34m+67ms[0m
2018-11-15T14:24:41.337116726Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+67ms[0m
2018-11-15T14:24:41.337196462Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+68ms[0m
2018-11-15T14:24:41.337214091Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.337288450Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.337368887Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+68ms[0m
2018-11-15T14:24:41.337376973Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:41.337541484Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:41.445563485Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+109ms[0m
2018-11-15T14:24:41.445642486Z    [34;1mengine:socket [0mpacket [34m+109ms[0m
2018-11-15T14:24:41.445763926Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+108ms[0m
2018-11-15T14:24:41.445774657Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+108ms[0m
2018-11-15T14:24:41.445874628Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:41.445884064Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:41.445888167Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+108ms[0m
2018-11-15T14:24:41.445891915Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:41.445980375Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:41.451307137Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
2018-11-15T14:24:41.451411755Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:41.451454000Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
2018-11-15T14:24:41.451533607Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
2018-11-15T14:24:41.451623700Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.451632377Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.451782766Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
2018-11-15T14:24:41.451795777Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+701ms[0m
2018-11-15T14:24:41.451801401Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:41.452444715Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:41.452546087Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:41.452587247Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:41.452592792Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:41.452596111Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:41.452599507Z        return result !== '';
2018-11-15T14:24:41.452602650Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:41.452606163Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:41.452662885Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:41.452673199Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:41.452695537Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:41.452700963Z          if (condFunc()) {
2018-11-15T14:24:41.452705795Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:41.452712111Z            return resolve(value);
2018-11-15T14:24:41.452755856Z          }
2018-11-15T14:24:41.452761562Z          setTimeout(wait, interval);
2018-11-15T14:24:41.452764718Z        } [32m+0ms[0m
2018-11-15T14:24:41.452767920Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:41.452803191Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:41.452808972Z  => 123
2018-11-15T14:24:41.452828576Z  irb(main):005:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:41.453944889Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:41.453958022Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:41.453961847Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:41.453965155Z          if (condFunc()) {
2018-11-15T14:24:41.453968263Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:41.453971866Z            return resolve(value);
2018-11-15T14:24:41.453975165Z          }
2018-11-15T14:24:41.454021288Z          setTimeout(wait, interval);
2018-11-15T14:24:41.454035152Z        } [32m+1ms[0m
2018-11-15T14:24:41.454089583Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:41.454096589Z  => 123
2018-11-15T14:24:41.454099813Z  irb(main):005:0> " [32m+0ms[0m
2018-11-15T14:24:41.454103348Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:41.454107072Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:41.454110432Z  => 123
2018-11-15T14:24:41.454113486Z  irb(main):005:0> " [32m+0ms[0m
2018-11-15T14:24:41.454116861Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:41.459294567Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:41.459457371Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:41.459467837Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:41.459471542Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:41.459475092Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:41.459478691Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:41.459481962Z        return result += data;
2018-11-15T14:24:41.459485198Z      })] [32m+0ms[0m
2018-11-15T14:24:41.459578134Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:41.459594526Z  => 123
2018-11-15T14:24:41.459598520Z  irb(main):005:0> ") [32m+0ms[0m
2018-11-15T14:24:41.459663048Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:41.459669542Z  => 123
2018-11-15T14:24:41.459672770Z  irb(main):005:0>  [32m+8ms[0m
2018-11-15T14:24:41.459759102Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:41.459996606Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}] [32m+0ms[0m
2018-11-15T14:24:41.460011704Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):005:0> \"}]"] [33m+709ms[0m
2018-11-15T14:24:41.460019434Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]) [34m+8ms[0m
2018-11-15T14:24:41.460095907Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:41.460186004Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]" [33m+8ms[0m
2018-11-15T14:24:41.636187780Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+176ms[0m
2018-11-15T14:24:41.636334152Z    [34;1mengine:socket [0mpacket [34m+177ms[0m
2018-11-15T14:24:41.636468406Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+177ms[0m
2018-11-15T14:24:41.636479046Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+185ms[0m
2018-11-15T14:24:41.636483905Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:41.636488167Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:41.636578909Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+177ms[0m
2018-11-15T14:24:41.636694796Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:41.636703585Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:41.642118720Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
2018-11-15T14:24:41.642222939Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:41.642330851Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:24:41.642379958Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:24:41.642411620Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:41.642483567Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:41.642490813Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:24:41.642494564Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+183ms[0m
2018-11-15T14:24:41.642582978Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:41.642590938Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:41.642984253Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:41.643107645Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:41.643116602Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:41.643120210Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:41.643123712Z        return result !== '';
2018-11-15T14:24:41.643126930Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:41.643130227Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:41.643219620Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:41.643231516Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:41.643237250Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:41.643243537Z          if (condFunc()) {
2018-11-15T14:24:41.643248628Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:41.643253260Z            return resolve(value);
2018-11-15T14:24:41.643284547Z          }
2018-11-15T14:24:41.643289151Z          setTimeout(wait, interval);
2018-11-15T14:24:41.643292321Z        } [32m+1ms[0m
2018-11-15T14:24:41.643295522Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:41.643400848Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:41.643410729Z  irb(main):006:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:41.644487848Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:41.644500236Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:41.644504168Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:41.644507708Z          if (condFunc()) {
2018-11-15T14:24:41.644510822Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:41.644514252Z            return resolve(value);
2018-11-15T14:24:41.644517341Z          }
2018-11-15T14:24:41.644520825Z          setTimeout(wait, interval);
2018-11-15T14:24:41.644569694Z        } [32m+1ms[0m
2018-11-15T14:24:41.644636756Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:41.644660541Z  irb(main):006:0> " [32m+0ms[0m
2018-11-15T14:24:41.644666984Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:41.644672825Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:41.644676555Z  irb(main):006:0> " [32m+0ms[0m
2018-11-15T14:24:41.644763791Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:41.649975929Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:41.649989782Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:41.650072137Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:41.650079897Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:41.650083494Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:41.650087066Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:41.650090316Z        return result += data;
2018-11-15T14:24:41.650093491Z      })] [32m+0ms[0m
2018-11-15T14:24:41.650096841Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:41.650100094Z  irb(main):006:0> ") [32m+0ms[0m
2018-11-15T14:24:41.650287411Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:41.650313600Z  irb(main):006:0>  [32m+8ms[0m
2018-11-15T14:24:41.650317342Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):006:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:41.650322104Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):006:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):006:0> "}] [32m+0ms[0m
2018-11-15T14:24:41.650354715Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):006:0> \"}]"] [33m+191ms[0m
2018-11-15T14:24:41.650392169Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):006:0> "}]) [34m+8ms[0m
2018-11-15T14:24:41.650398607Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:41.650402207Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):006:0> "}]" [33m+8ms[0m
2018-11-15T14:24:41.774817646Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+124ms[0m
2018-11-15T14:24:41.774934394Z    [34;1mengine:socket [0mpacket [34m+124ms[0m
2018-11-15T14:24:41.775070715Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+124ms[0m
2018-11-15T14:24:41.775096521Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+132ms[0m
2018-11-15T14:24:41.775104305Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:41.775110189Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:41.775116049Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+124ms[0m
2018-11-15T14:24:41.775267685Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:41.775281330Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
2018-11-15T14:24:41.798561839Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+24ms[0m
2018-11-15T14:24:41.798741473Z    [34;1mengine:socket [0mpacket [34m+24ms[0m
2018-11-15T14:24:41.798751107Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+23ms[0m
2018-11-15T14:24:41.798760678Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+24ms[0m
2018-11-15T14:24:41.798828027Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:41.798835608Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:41.798839542Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+24ms[0m
2018-11-15T14:24:41.798955577Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:41.799063759Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:41.832040714Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+33ms[0m
2018-11-15T14:24:41.832159437Z    [34;1mengine:socket [0mpacket [34m+33ms[0m
2018-11-15T14:24:41.832206030Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+34ms[0m
2018-11-15T14:24:41.832305407Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+34ms[0m
2018-11-15T14:24:41.832329444Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.832441027Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.832454286Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+34ms[0m
2018-11-15T14:24:41.832579685Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:41.832588878Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:41.911108406Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+79ms[0m
2018-11-15T14:24:41.911287737Z    [34;1mengine:socket [0mpacket [34m+79ms[0m
2018-11-15T14:24:41.911298102Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+79ms[0m
2018-11-15T14:24:41.911392600Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+79ms[0m
2018-11-15T14:24:41.911401531Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:41.911405783Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:41.911478850Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+79ms[0m
2018-11-15T14:24:41.911529917Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:41.911552555Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:41.916754177Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
2018-11-15T14:24:41.916908788Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:41.916941004Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+5ms[0m
2018-11-15T14:24:41.917002364Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+5ms[0m
2018-11-15T14:24:41.917021651Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.917025783Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:41.917126865Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+5ms[0m
2018-11-15T14:24:41.917136070Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+268ms[0m
2018-11-15T14:24:41.917243603Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:41.917616425Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:41.917767869Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:41.917899410Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:41.917907789Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:41.917911359Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:41.917915173Z        return result !== '';
2018-11-15T14:24:41.917918289Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:41.917921597Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:41.918005570Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:41.918012821Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:41.918016144Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:41.918019420Z          if (condFunc()) {
2018-11-15T14:24:41.918022532Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:41.918025986Z            return resolve(value);
2018-11-15T14:24:41.918029074Z          }
2018-11-15T14:24:41.918032115Z          setTimeout(wait, interval);
2018-11-15T14:24:41.918035184Z        } [32m+0ms[0m
2018-11-15T14:24:41.918038307Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:41.918126114Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:41.918158865Z  => 123
2018-11-15T14:24:41.918164037Z  irb(main):007:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:41.919274831Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:41.919284028Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:41.919287381Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:41.919290700Z          if (condFunc()) {
2018-11-15T14:24:41.919293946Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:41.919297405Z            return resolve(value);
2018-11-15T14:24:41.919300495Z          }
2018-11-15T14:24:41.919329335Z          setTimeout(wait, interval);
2018-11-15T14:24:41.919332652Z        } [32m+2ms[0m
2018-11-15T14:24:41.919377183Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:41.919383697Z  => 123
2018-11-15T14:24:41.919386872Z  irb(main):007:0> " [32m+0ms[0m
2018-11-15T14:24:41.919425887Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:41.919431696Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:41.919435152Z  => 123
2018-11-15T14:24:41.919438167Z  irb(main):007:0> " [32m+0ms[0m
2018-11-15T14:24:41.919536671Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:41.924613112Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:41.924819533Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:41.924839421Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:41.924844068Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:41.924847693Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:41.924851135Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:41.924854341Z        return result += data;
2018-11-15T14:24:41.924857474Z      })] [32m+0ms[0m
2018-11-15T14:24:41.924949203Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:41.924956590Z  => 123
2018-11-15T14:24:41.924960028Z  irb(main):007:0> ") [32m+0ms[0m
2018-11-15T14:24:41.924963460Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:41.924996990Z  => 123
2018-11-15T14:24:41.925016787Z  irb(main):007:0>  [32m+8ms[0m
2018-11-15T14:24:41.925021081Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:41.925025830Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}] [32m+0ms[0m
2018-11-15T14:24:41.925106131Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):007:0> \"}]"] [33m+274ms[0m
2018-11-15T14:24:41.925114772Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]) [34m+8ms[0m
2018-11-15T14:24:41.925119149Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:41.925122576Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]" [33m+9ms[0m
2018-11-15T14:24:42.031352704Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+106ms[0m
2018-11-15T14:24:42.031585265Z    [34;1mengine:socket [0mpacket [34m+107ms[0m
2018-11-15T14:24:42.031613997Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+107ms[0m
2018-11-15T14:24:42.031624081Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+115ms[0m
2018-11-15T14:24:42.031646793Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:42.031816479Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:42.031826239Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+107ms[0m
2018-11-15T14:24:42.031830183Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:42.031915941Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:24:42.119140744Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+87ms[0m
2018-11-15T14:24:42.119223746Z    [34;1mengine:socket [0mpacket [34m+87ms[0m
2018-11-15T14:24:42.119305234Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+88ms[0m
2018-11-15T14:24:42.119424228Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+88ms[0m
2018-11-15T14:24:42.119451596Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:24:42.119458798Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:24:42.119547047Z    [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+88ms[0m
2018-11-15T14:24:42.119553251Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:42.119574366Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+0ms[0m
2018-11-15T14:24:42.123971330Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+5ms[0m
2018-11-15T14:24:42.124074239Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:42.124108567Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+4ms[0m
2018-11-15T14:24:42.124196653Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+5ms[0m
2018-11-15T14:24:42.124204825Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
2018-11-15T14:24:42.124254321Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+0ms[0m
2018-11-15T14:24:42.124295051Z    [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+5ms[0m
2018-11-15T14:24:42.124393564Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:42.124431846Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
2018-11-15T14:24:42.281174445Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+157ms[0m
2018-11-15T14:24:42.281342654Z    [34;1mengine:socket [0mpacket [34m+158ms[0m
2018-11-15T14:24:42.281359751Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+157ms[0m
2018-11-15T14:24:42.281472908Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+157ms[0m
2018-11-15T14:24:42.281481817Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:42.281485953Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:42.281594132Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+157ms[0m
2018-11-15T14:24:42.281602339Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:42.281685244Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:42.287343852Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"213"}]" [33m+7ms[0m
2018-11-15T14:24:42.287483403Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:42.287580427Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"213"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [32m+6ms[0m
2018-11-15T14:24:42.287590005Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [36m+6ms[0m
2018-11-15T14:24:42.287594328Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"213"}] [36m+0ms[0m
2018-11-15T14:24:42.289751090Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"213"}] [36m+1ms[0m
2018-11-15T14:24:42.289765074Z    [32;1mserver [0m  ["evaluate"] { code: 213 } [32m+7ms[0m
2018-11-15T14:24:42.289769532Z    [32;1mRepl [0m[bufferWrite(string = "213", bufferInterval = 5, write = true)] [32m+365ms[0m
2018-11-15T14:24:42.289773298Z    [32;1mRepl [0m  this.process.write('213' + '\n') [32m+0ms[0m
2018-11-15T14:24:42.289776852Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:42.289780319Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:42.289856742Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:42.289860360Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:42.289887577Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:42.289892772Z        return result !== '';
2018-11-15T14:24:42.289895963Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:42.289899360Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:42.289904383Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.289907649Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.289910896Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.289914121Z          if (condFunc()) {
2018-11-15T14:24:42.289917172Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.289932054Z            return resolve(value);
2018-11-15T14:24:42.289935732Z          }
2018-11-15T14:24:42.289938731Z          setTimeout(wait, interval);
2018-11-15T14:24:42.289941926Z        } [32m+0ms[0m
2018-11-15T14:24:42.291858161Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:42.291873585Z    [32;1mRepl [0m  [concatResult(data = 213
2018-11-15T14:24:42.291877793Z  => 213
2018-11-15T14:24:42.291881232Z  irb(main):008:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:42.291884895Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.291899675Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.291902985Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.291906372Z          if (condFunc()) {
2018-11-15T14:24:42.291909455Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.291912972Z            return resolve(value);
2018-11-15T14:24:42.291916128Z          }
2018-11-15T14:24:42.291919240Z          setTimeout(wait, interval);
2018-11-15T14:24:42.291922528Z        } [32m+1ms[0m
2018-11-15T14:24:42.291925803Z    [32;1mRepl [0m  [isDataReceived()] result: "213
2018-11-15T14:24:42.291929163Z  => 213
2018-11-15T14:24:42.291932272Z  irb(main):008:0> " [32m+0ms[0m
2018-11-15T14:24:42.291935610Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:42.291939225Z    [32;1mRepl [0m`let currResult = result` //==> "213
2018-11-15T14:24:42.291943305Z  => 213
2018-11-15T14:24:42.291947845Z  irb(main):008:0> " [32m+0ms[0m
2018-11-15T14:24:42.291952954Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:42.296981129Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:42.297209378Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:42.297414108Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:42.297649042Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:42.297662499Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:42.297668887Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:42.297675923Z        return result += data;
2018-11-15T14:24:42.297693023Z      })] [32m+0ms[0m
2018-11-15T14:24:42.297910617Z    [32;1mRepl [0m  resolve(result = "213
2018-11-15T14:24:42.297922861Z  => 213
2018-11-15T14:24:42.297927669Z  irb(main):008:0> ") [32m+0ms[0m
2018-11-15T14:24:42.298128535Z    [32;1mserver [0m  [emitOutput] output: 213
2018-11-15T14:24:42.298137668Z  => 213
2018-11-15T14:24:42.298142326Z  irb(main):008:0>  [32m+10ms[0m
2018-11-15T14:24:42.298353629Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:42.298557242Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}],"nsp":"/"} as 2["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}] [32m+0ms[0m
2018-11-15T14:24:42.298786905Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"213\\r\\n=> 213\\r\\nirb(main):008:0> \"}]"] [33m+374ms[0m
2018-11-15T14:24:42.298980929Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}]) [34m+11ms[0m
2018-11-15T14:24:42.299163940Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:42.299370893Z    [33;1mengine:ws [0mwriting "42["output",{"output":"213\r\n=> 213\r\nirb(main):008:0> "}]" [33m+12ms[0m
2018-11-15T14:24:42.437749747Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+138ms[0m
2018-11-15T14:24:42.438013670Z    [34;1mengine:socket [0mpacket [34m+139ms[0m
2018-11-15T14:24:42.438368329Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+140ms[0m
2018-11-15T14:24:42.438651181Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+150ms[0m
2018-11-15T14:24:42.438963062Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:42.439265271Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
2018-11-15T14:24:42.439496144Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+141ms[0m
2018-11-15T14:24:42.439771237Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:42.440044796Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:42.444146907Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:24:42.444383463Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:42.444638929Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
2018-11-15T14:24:42.444912964Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
2018-11-15T14:24:42.445115401Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:42.445277675Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:42.445767763Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:24:42.445779957Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:42.445784747Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:42.445982654Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+2ms[0m
2018-11-15T14:24:42.446180362Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:42.446400233Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+1ms[0m
2018-11-15T14:24:42.446611917Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+1ms[0m
2018-11-15T14:24:42.446816872Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:42.447007201Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:42.447192278Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+2ms[0m
2018-11-15T14:24:42.447411647Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+150ms[0m
2018-11-15T14:24:42.448127634Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:42.448386243Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:42.448656655Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:42.448903393Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:42.449129339Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:42.449148938Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:42.449153226Z        return result !== '';
2018-11-15T14:24:42.449156374Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:42.449356784Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:42.453538799Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.453553165Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.453557116Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.453560522Z          if (condFunc()) {
2018-11-15T14:24:42.453563725Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.453567635Z            return resolve(value);
2018-11-15T14:24:42.453570933Z          }
2018-11-15T14:24:42.453574037Z          setTimeout(wait, interval);
2018-11-15T14:24:42.453577128Z        } [32m+1ms[0m
2018-11-15T14:24:42.453596356Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:42.453601082Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:42.453604374Z  => 3
2018-11-15T14:24:42.453607517Z  irb(main):009:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:42.453611036Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.453614403Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.453617596Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.453620778Z          if (condFunc()) {
2018-11-15T14:24:42.453623848Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.453627279Z            return resolve(value);
2018-11-15T14:24:42.453630378Z          }
2018-11-15T14:24:42.453633378Z          setTimeout(wait, interval);
2018-11-15T14:24:42.453636501Z        } [32m+2ms[0m
2018-11-15T14:24:42.453639741Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:42.453643085Z  => 3
2018-11-15T14:24:42.453646243Z  irb(main):009:0> " [32m+0ms[0m
2018-11-15T14:24:42.453649622Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:42.453653256Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:42.453656616Z  => 3
2018-11-15T14:24:42.453659640Z  irb(main):009:0> " [32m+0ms[0m
2018-11-15T14:24:42.453685186Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:42.457692314Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:42.457910831Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:42.458112578Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:42.458305631Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:42.458315549Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:42.458319423Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:42.458322775Z        return result += data;
2018-11-15T14:24:42.458325995Z      })] [32m+1ms[0m
2018-11-15T14:24:42.458490772Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:42.458504532Z  => 3
2018-11-15T14:24:42.458511914Z  irb(main):009:0> ") [32m+0ms[0m
2018-11-15T14:24:42.458719482Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:42.458729060Z  => 3
2018-11-15T14:24:42.458732672Z  irb(main):009:0>  [32m+11ms[0m
2018-11-15T14:24:42.458933656Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:42.459129228Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}] [32m+1ms[0m
2018-11-15T14:24:42.459340851Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):009:0> \"}]"] [33m+161ms[0m
2018-11-15T14:24:42.459505910Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}]) [34m+13ms[0m
2018-11-15T14:24:42.459705151Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:42.459883932Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):009:0> "}]" [33m+14ms[0m
2018-11-15T14:24:42.582139877Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+122ms[0m
2018-11-15T14:24:42.582405445Z    [34;1mengine:socket [0mpacket [34m+123ms[0m
2018-11-15T14:24:42.582711898Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+123ms[0m
2018-11-15T14:24:42.582959386Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+136ms[0m
2018-11-15T14:24:42.583160828Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:42.583363270Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:42.583682522Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+125ms[0m
2018-11-15T14:24:42.583921028Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:42.584153578Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:42.588215285Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
2018-11-15T14:24:42.588439937Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:42.588677446Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:24:42.588903188Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:24:42.589102970Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:42.589251366Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:24:42.589465851Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:24:42.589680294Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+131ms[0m
2018-11-15T14:24:42.589845011Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:42.590382317Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:42.590593347Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:42.590751476Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:42.590932164Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:42.590941124Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:42.590944822Z        return result !== '';
2018-11-15T14:24:42.590948072Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:42.591111740Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:42.591281242Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.591299281Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.591303062Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.591306399Z          if (condFunc()) {
2018-11-15T14:24:42.591309460Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.591313004Z            return resolve(value);
2018-11-15T14:24:42.591316140Z          }
2018-11-15T14:24:42.591319402Z          setTimeout(wait, interval);
2018-11-15T14:24:42.591322645Z        } [32m+0ms[0m
2018-11-15T14:24:42.591487123Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:42.591759743Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:42.591769456Z  irb(main):010:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:42.593124085Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.593138502Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.593142445Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.593145929Z          if (condFunc()) {
2018-11-15T14:24:42.593149646Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.593153427Z            return resolve(value);
2018-11-15T14:24:42.593156542Z          }
2018-11-15T14:24:42.593159806Z          setTimeout(wait, interval);
2018-11-15T14:24:42.593182805Z        } [32m+1ms[0m
2018-11-15T14:24:42.593387260Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:42.593396780Z  irb(main):010:0> " [32m+1ms[0m
2018-11-15T14:24:42.593563489Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:42.593785378Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:42.593794967Z  irb(main):010:0> " [32m+0ms[0m
2018-11-15T14:24:42.594014703Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:42.599335886Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:42.599537711Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:42.599714604Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:42.599908782Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:42.599921228Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:42.599937081Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:42.599942942Z        return result += data;
2018-11-15T14:24:42.599947675Z      })] [32m+0ms[0m
2018-11-15T14:24:42.600238904Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:42.600247862Z  irb(main):010:0> ") [32m+0ms[0m
2018-11-15T14:24:42.600470260Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:42.600479507Z  irb(main):010:0>  [32m+11ms[0m
2018-11-15T14:24:42.600678106Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):010:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:42.600876237Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):010:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):010:0> "}] [32m+0ms[0m
2018-11-15T14:24:42.601067823Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):010:0> \"}]"] [33m+141ms[0m
2018-11-15T14:24:42.601269488Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):010:0> "}]) [34m+13ms[0m
2018-11-15T14:24:42.601451551Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:42.601647834Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):010:0> "}]" [33m+13ms[0m
2018-11-15T14:24:42.665123632Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+63ms[0m
2018-11-15T14:24:42.665402557Z    [34;1mengine:socket [0mpacket [34m+64ms[0m
2018-11-15T14:24:42.665762963Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+65ms[0m
2018-11-15T14:24:42.666004191Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+76ms[0m
2018-11-15T14:24:42.666207308Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+1ms[0m
2018-11-15T14:24:42.666381973Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:42.666626236Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+66ms[0m
2018-11-15T14:24:42.666847481Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:42.667047415Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:42.772020605Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+107ms[0m
2018-11-15T14:24:42.772105531Z    [34;1mengine:socket [0mpacket [34m+106ms[0m
2018-11-15T14:24:42.772218464Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+105ms[0m
2018-11-15T14:24:42.772387844Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+106ms[0m
2018-11-15T14:24:42.772400800Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:42.772631770Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:42.772643617Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+106ms[0m
2018-11-15T14:24:42.772726441Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:42.772888295Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:42.776795438Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
2018-11-15T14:24:42.776813765Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:42.777052002Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
2018-11-15T14:24:42.777066663Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+4ms[0m
2018-11-15T14:24:42.777124088Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:42.777234930Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+1ms[0m
2018-11-15T14:24:42.777403033Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
2018-11-15T14:24:42.777412841Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+178ms[0m
2018-11-15T14:24:42.777532165Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:42.777550595Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:42.778317727Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:42.778330156Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:42.778334190Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:42.778337852Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:42.778355855Z        return result !== '';
2018-11-15T14:24:42.778359613Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:42.778471474Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:42.778555249Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.778564472Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.778567697Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.778571068Z          if (condFunc()) {
2018-11-15T14:24:42.778574188Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.778577766Z            return resolve(value);
2018-11-15T14:24:42.778580921Z          }
2018-11-15T14:24:42.778584137Z          setTimeout(wait, interval);
2018-11-15T14:24:42.778587334Z        } [32m+0ms[0m
2018-11-15T14:24:42.778767891Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:42.778893871Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:42.778903408Z  => 3
2018-11-15T14:24:42.778906711Z  irb(main):011:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:42.780206780Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:42.780217235Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:42.780220563Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:42.780223842Z          if (condFunc()) {
2018-11-15T14:24:42.780226940Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:42.780230506Z            return resolve(value);
2018-11-15T14:24:42.780233683Z          }
2018-11-15T14:24:42.780241159Z          setTimeout(wait, interval);
2018-11-15T14:24:42.780244408Z        } [32m+2ms[0m
2018-11-15T14:24:42.780337399Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:42.780349445Z  => 3
2018-11-15T14:24:42.780353382Z  irb(main):011:0> " [32m+0ms[0m
2018-11-15T14:24:42.780453606Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:42.780651856Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:42.780660880Z  => 3
2018-11-15T14:24:42.780664278Z  irb(main):011:0> " [32m+0ms[0m
2018-11-15T14:24:42.780746600Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:42.783083904Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+6ms[0m
2018-11-15T14:24:42.783223063Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:42.783423892Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+7ms[0m
2018-11-15T14:24:42.783586369Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+6ms[0m
2018-11-15T14:24:42.783690416Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:42.783788909Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:42.783941619Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+6ms[0m
2018-11-15T14:24:42.784081594Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:42.784258563Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
2018-11-15T14:24:42.786492860Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:42.786650033Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:42.786736978Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:42.786797639Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:42.786804822Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:42.786808382Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:42.786811655Z        return result += data;
2018-11-15T14:24:42.786814763Z      })] [32m+0ms[0m
2018-11-15T14:24:42.786904117Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:42.786914322Z  => 3
2018-11-15T14:24:42.786917795Z  irb(main):011:0> ") [32m+0ms[0m
2018-11-15T14:24:42.787058371Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:42.787067710Z  => 3
2018-11-15T14:24:42.787076477Z  irb(main):011:0>  [32m+3ms[0m
2018-11-15T14:24:42.787198919Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}],"nsp":"/"} [32m+3ms[0m
2018-11-15T14:24:42.787338347Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}] [32m+0ms[0m
2018-11-15T14:24:42.787454756Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):011:0> \"}]"] [33m+187ms[0m
2018-11-15T14:24:42.787555805Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}]) [34m+4ms[0m
2018-11-15T14:24:42.787646037Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:42.787752850Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):011:0> "}]" [33m+5ms[0m
2018-11-15T14:24:42.950639796Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"33"}]" [33m+163ms[0m
2018-11-15T14:24:42.950684624Z    [34;1mengine:socket [0mpacket [34m+163ms[0m
2018-11-15T14:24:42.950892468Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"33"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [32m+163ms[0m
2018-11-15T14:24:42.951040246Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [36m+167ms[0m
2018-11-15T14:24:42.951169313Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"33"}] [36m+1ms[0m
2018-11-15T14:24:42.951281897Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"33"}] [36m+0ms[0m
2018-11-15T14:24:42.951464049Z    [32;1mserver [0m  ["lineChanged"] { line: 33 } [32m+165ms[0m
2018-11-15T14:24:42.951640966Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:42.951737337Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} as 2["syncLine",{"line":"33"}] [32m+0ms[0m
2018-11-15T14:24:43.113738770Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"333"}]" [33m+163ms[0m
2018-11-15T14:24:43.113787748Z    [34;1mengine:socket [0mpacket [34m+163ms[0m
2018-11-15T14:24:43.113986793Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"333"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"333"}]} [32m+162ms[0m
2018-11-15T14:24:43.114331976Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"333"}]} [36m+162ms[0m
2018-11-15T14:24:43.114358521Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"333"}] [36m+1ms[0m
2018-11-15T14:24:43.114363772Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"333"}] [36m+0ms[0m
2018-11-15T14:24:43.114423515Z    [32;1mserver [0m  ["lineChanged"] { line: 333 } [32m+163ms[0m
2018-11-15T14:24:43.114456749Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"333"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.114577163Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"333"}],"nsp":"/"} as 2["syncLine",{"line":"333"}] [32m+0ms[0m
2018-11-15T14:24:43.223975985Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+110ms[0m
2018-11-15T14:24:43.224020164Z    [34;1mengine:socket [0mpacket [34m+110ms[0m
2018-11-15T14:24:43.224236007Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+110ms[0m
2018-11-15T14:24:43.224558583Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+110ms[0m
2018-11-15T14:24:43.224713760Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:43.224888369Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:43.225039752Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+110ms[0m
2018-11-15T14:24:43.225244140Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.225364473Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:43.229153451Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"333"}]" [33m+5ms[0m
2018-11-15T14:24:43.229404239Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:43.229659430Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"333"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"333"}]} [32m+4ms[0m
2018-11-15T14:24:43.230569351Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"333"}]} [36m+5ms[0m
2018-11-15T14:24:43.230629061Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"333"}] [36m+1ms[0m
2018-11-15T14:24:43.230633951Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"333"}] [36m+0ms[0m
2018-11-15T14:24:43.230637879Z    [32;1mserver [0m  ["evaluate"] { code: 333 } [32m+6ms[0m
2018-11-15T14:24:43.230641940Z    [32;1mRepl [0m[bufferWrite(string = "333", bufferInterval = 5, write = true)] [32m+444ms[0m
2018-11-15T14:24:43.230645938Z    [32;1mRepl [0m  this.process.write('333' + '\n') [32m+0ms[0m
2018-11-15T14:24:43.230649578Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:43.230665960Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:43.230669858Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:43.230673242Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:43.230676639Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:43.230679955Z        return result !== '';
2018-11-15T14:24:43.230683072Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:43.230686293Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:43.230689747Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:43.230692944Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:43.230696123Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:43.230699279Z          if (condFunc()) {
2018-11-15T14:24:43.230702318Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:43.230705853Z            return resolve(value);
2018-11-15T14:24:43.230709039Z          }
2018-11-15T14:24:43.230712584Z          setTimeout(wait, interval);
2018-11-15T14:24:43.230715860Z        } [32m+0ms[0m
2018-11-15T14:24:43.230718998Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:43.230722535Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:43.230725813Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:43.230728878Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:43.230732002Z          if (condFunc()) {
2018-11-15T14:24:43.230735133Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:43.230738452Z            return resolve(value);
2018-11-15T14:24:43.230741504Z          }
2018-11-15T14:24:43.230744475Z          setTimeout(wait, interval);
2018-11-15T14:24:43.230747635Z        } [32m+0ms[0m
2018-11-15T14:24:43.231252597Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:43.231522257Z    [32;1mRepl [0m  [concatResult(data = 333
2018-11-15T14:24:43.231534068Z  => 333
2018-11-15T14:24:43.231537852Z  irb(main):012:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:43.231721934Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:43.231739947Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:43.231750120Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:43.231753783Z          if (condFunc()) {
2018-11-15T14:24:43.231756873Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:43.231760352Z            return resolve(value);
2018-11-15T14:24:43.231767653Z          }
2018-11-15T14:24:43.231771139Z          setTimeout(wait, interval);
2018-11-15T14:24:43.231774288Z        } [32m+0ms[0m
2018-11-15T14:24:43.231865814Z    [32;1mRepl [0m  [isDataReceived()] result: "333
2018-11-15T14:24:43.231879824Z  => 333
2018-11-15T14:24:43.231885672Z  irb(main):012:0> " [32m+0ms[0m
2018-11-15T14:24:43.232012554Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:43.232246151Z    [32;1mRepl [0m`let currResult = result` //==> "333
2018-11-15T14:24:43.232256497Z  => 333
2018-11-15T14:24:43.232260017Z  irb(main):012:0> " [32m+1ms[0m
2018-11-15T14:24:43.232491302Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:43.237821610Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:43.237961650Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:43.238114550Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:43.238239894Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:43.238248094Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:43.238251715Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:43.238255052Z        return result += data;
2018-11-15T14:24:43.238258222Z      })] [32m+1ms[0m
2018-11-15T14:24:43.238332919Z    [32;1mRepl [0m  resolve(result = "333
2018-11-15T14:24:43.238344967Z  => 333
2018-11-15T14:24:43.238348985Z  irb(main):012:0> ") [32m+0ms[0m
2018-11-15T14:24:43.238511012Z    [32;1mserver [0m  [emitOutput] output: 333
2018-11-15T14:24:43.238520756Z  => 333
2018-11-15T14:24:43.238524116Z  irb(main):012:0>  [32m+8ms[0m
2018-11-15T14:24:43.238692441Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:24:43.238889508Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}],"nsp":"/"} as 2["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}] [32m+0ms[0m
2018-11-15T14:24:43.239025631Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"333\\r\\n=> 333\\r\\nirb(main):012:0> \"}]"] [33m+451ms[0m
2018-11-15T14:24:43.239163748Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}]) [34m+9ms[0m
2018-11-15T14:24:43.239220060Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:24:43.239332460Z    [33;1mengine:ws [0mwriting "42["output",{"output":"333\r\n=> 333\r\nirb(main):012:0> "}]" [33m+11ms[0m
2018-11-15T14:24:43.268412632Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+29ms[0m
2018-11-15T14:24:43.268457618Z    [34;1mengine:socket [0mpacket [34m+29ms[0m
2018-11-15T14:24:43.268692325Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+30ms[0m
2018-11-15T14:24:43.268870278Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+38ms[0m
2018-11-15T14:24:43.269020751Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:43.269200591Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
2018-11-15T14:24:43.269339963Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+31ms[0m
2018-11-15T14:24:43.269552378Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.269693012Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:43.397700807Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+129ms[0m
2018-11-15T14:24:43.397746519Z    [34;1mengine:socket [0mpacket [34m+129ms[0m
2018-11-15T14:24:43.398009529Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+128ms[0m
2018-11-15T14:24:43.398191440Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+129ms[0m
2018-11-15T14:24:43.398328714Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:43.398402693Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:43.398544563Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+129ms[0m
2018-11-15T14:24:43.398704792Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.398854222Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:43.403341112Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
2018-11-15T14:24:43.403472163Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:43.403724617Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+5ms[0m
2018-11-15T14:24:43.403878425Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
2018-11-15T14:24:43.404092527Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:43.404249775Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+1ms[0m
2018-11-15T14:24:43.404464788Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
2018-11-15T14:24:43.404612766Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+166ms[0m
2018-11-15T14:24:43.404785223Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:43.405416531Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:43.405628338Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:43.405699921Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:43.405779934Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:43.405788298Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:43.405792023Z        return result !== '';
2018-11-15T14:24:43.405795208Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:43.405889862Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:43.406875443Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:43.406889802Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:43.406901057Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:43.406904729Z          if (condFunc()) {
2018-11-15T14:24:43.406923255Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:43.406928425Z            return resolve(value);
2018-11-15T14:24:43.406933265Z          }
2018-11-15T14:24:43.406939017Z          setTimeout(wait, interval);
2018-11-15T14:24:43.406943897Z        } [32m+0ms[0m
2018-11-15T14:24:43.406949175Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:43.407052238Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:43.407065014Z  => 3
2018-11-15T14:24:43.407076078Z  irb(main):013:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:43.408189954Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:43.408199762Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:43.408203084Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:43.408206478Z          if (condFunc()) {
2018-11-15T14:24:43.408209735Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:43.408213247Z            return resolve(value);
2018-11-15T14:24:43.408216360Z          }
2018-11-15T14:24:43.408219574Z          setTimeout(wait, interval);
2018-11-15T14:24:43.408222721Z        } [32m+2ms[0m
2018-11-15T14:24:43.408380039Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:43.408391881Z  => 3
2018-11-15T14:24:43.408402006Z  irb(main):013:0> " [32m+0ms[0m
2018-11-15T14:24:43.408548472Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:43.408749669Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:43.408757736Z  => 3
2018-11-15T14:24:43.408761113Z  irb(main):013:0> " [32m+0ms[0m
2018-11-15T14:24:43.409014674Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:43.414173878Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:43.414289743Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:43.414443717Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:43.414666508Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:43.414674731Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:43.414678421Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:43.414690889Z        return result += data;
2018-11-15T14:24:43.414694366Z      })] [32m+0ms[0m
2018-11-15T14:24:43.414869490Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:43.414877392Z  => 3
2018-11-15T14:24:43.414880990Z  irb(main):013:0> ") [32m+0ms[0m
2018-11-15T14:24:43.415062736Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:43.415080945Z  => 3
2018-11-15T14:24:43.415085628Z  irb(main):013:0>  [32m+10ms[0m
2018-11-15T14:24:43.415337165Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:43.415464575Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}] [32m+0ms[0m
2018-11-15T14:24:43.415627806Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):013:0> \"}]"] [33m+177ms[0m
2018-11-15T14:24:43.415736937Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}]) [34m+12ms[0m
2018-11-15T14:24:43.416030065Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:43.416201529Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):013:0> "}]" [33m+12ms[0m
2018-11-15T14:24:43.438970403Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+23ms[0m
2018-11-15T14:24:43.439093147Z    [34;1mengine:socket [0mpacket [34m+23ms[0m
2018-11-15T14:24:43.439337613Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+24ms[0m
2018-11-15T14:24:43.439629065Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+35ms[0m
2018-11-15T14:24:43.439666359Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:43.439866458Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:43.440090519Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+25ms[0m
2018-11-15T14:24:43.440289879Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.440463141Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:43.624618052Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"33"}]" [33m+186ms[0m
2018-11-15T14:24:43.624763531Z    [34;1mengine:socket [0mpacket [34m+186ms[0m
2018-11-15T14:24:43.624993010Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"33"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [32m+184ms[0m
2018-11-15T14:24:43.625220446Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"33"}]} [36m+186ms[0m
2018-11-15T14:24:43.625478257Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"33"}] [36m+0ms[0m
2018-11-15T14:24:43.625652896Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"33"}] [36m+0ms[0m
2018-11-15T14:24:43.625822162Z    [32;1mserver [0m  ["lineChanged"] { line: 33 } [32m+186ms[0m
2018-11-15T14:24:43.626009457Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.626168899Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"33"}],"nsp":"/"} as 2["syncLine",{"line":"33"}] [32m+0ms[0m
2018-11-15T14:24:43.726906708Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"331"}]" [33m+102ms[0m
2018-11-15T14:24:43.727047502Z    [34;1mengine:socket [0mpacket [34m+102ms[0m
2018-11-15T14:24:43.727299287Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"331"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"331"}]} [32m+102ms[0m
2018-11-15T14:24:43.727526616Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"331"}]} [36m+102ms[0m
2018-11-15T14:24:43.727705865Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"331"}] [36m+0ms[0m
2018-11-15T14:24:43.727880852Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"331"}] [36m+0ms[0m
2018-11-15T14:24:43.728058172Z    [32;1mserver [0m  ["lineChanged"] { line: 331 } [32m+102ms[0m
2018-11-15T14:24:43.728222993Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"331"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.728500143Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"331"}],"nsp":"/"} as 2["syncLine",{"line":"331"}] [32m+0ms[0m
2018-11-15T14:24:43.733068073Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3312"}]" [33m+6ms[0m
2018-11-15T14:24:43.733165984Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:43.733365715Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3312"}]} [32m+5ms[0m
2018-11-15T14:24:43.733590290Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3312"}]} [36m+6ms[0m
2018-11-15T14:24:43.733741611Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3312"}] [36m+0ms[0m
2018-11-15T14:24:43.733877727Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3312"}] [36m+0ms[0m
2018-11-15T14:24:43.734076204Z    [32;1mserver [0m  ["lineChanged"] { line: 3312 } [32m+6ms[0m
2018-11-15T14:24:43.734238481Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:43.734373978Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3312"}],"nsp":"/"} as 2["syncLine",{"line":"3312"}] [32m+0ms[0m
2018-11-15T14:24:44.037133649Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"33123"}]" [33m+304ms[0m
2018-11-15T14:24:44.037288587Z    [34;1mengine:socket [0mpacket [34m+305ms[0m
2018-11-15T14:24:44.037392463Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"33123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"33123"}]} [32m+303ms[0m
2018-11-15T14:24:44.037669422Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"33123"}]} [36m+304ms[0m
2018-11-15T14:24:44.037761204Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"33123"}] [36m+0ms[0m
2018-11-15T14:24:44.037922571Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"33123"}] [36m+0ms[0m
2018-11-15T14:24:44.038082885Z    [32;1mserver [0m  ["lineChanged"] { line: 33123 } [32m+304ms[0m
2018-11-15T14:24:44.038229929Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"33123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.038365675Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"33123"}],"nsp":"/"} as 2["syncLine",{"line":"33123"}] [32m+0ms[0m
2018-11-15T14:24:44.104545654Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"331232"}]" [33m+68ms[0m
2018-11-15T14:24:44.104680694Z    [34;1mengine:socket [0mpacket [34m+67ms[0m
2018-11-15T14:24:44.104941583Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"331232"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"331232"}]} [32m+66ms[0m
2018-11-15T14:24:44.105200318Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"331232"}]} [36m+68ms[0m
2018-11-15T14:24:44.105370077Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"331232"}] [36m+0ms[0m
2018-11-15T14:24:44.105564291Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"331232"}] [36m+0ms[0m
2018-11-15T14:24:44.105824625Z    [32;1mserver [0m  ["lineChanged"] { line: 331232 } [32m+68ms[0m
2018-11-15T14:24:44.106052618Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"331232"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.106222248Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"331232"}],"nsp":"/"} as 2["syncLine",{"line":"331232"}] [32m+1ms[0m
2018-11-15T14:24:44.109109886Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+4ms[0m
2018-11-15T14:24:44.109283875Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:44.109575100Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+3ms[0m
2018-11-15T14:24:44.109902357Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+4ms[0m
2018-11-15T14:24:44.110056795Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:44.110246710Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:44.110481581Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
2018-11-15T14:24:44.110685199Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.110892990Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:44.111302713Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"331232"}]" [33m+3ms[0m
2018-11-15T14:24:44.111457843Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:44.111708709Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"331232"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"331232"}]} [32m+1ms[0m
2018-11-15T14:24:44.111968231Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"331232"}]} [36m+1ms[0m
2018-11-15T14:24:44.112090174Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"331232"}] [36m+0ms[0m
2018-11-15T14:24:44.112294942Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"331232"}] [36m+1ms[0m
2018-11-15T14:24:44.112597498Z    [32;1mserver [0m  ["evaluate"] { code: 331232 } [32m+2ms[0m
2018-11-15T14:24:44.112782394Z    [32;1mRepl [0m[bufferWrite(string = "331232", bufferInterval = 5, write = true)] [32m+698ms[0m
2018-11-15T14:24:44.113033995Z    [32;1mRepl [0m  this.process.write('331232' + '\n') [32m+0ms[0m
2018-11-15T14:24:44.113936594Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:44.114144426Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:44.114349427Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:24:44.114530501Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:44.114545607Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:44.114549546Z        return result !== '';
2018-11-15T14:24:44.114552812Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:44.114725934Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:44.114936845Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.114949016Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.114959536Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.114963456Z          if (condFunc()) {
2018-11-15T14:24:44.114966579Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.114970178Z            return resolve(value);
2018-11-15T14:24:44.114973453Z          }
2018-11-15T14:24:44.115003373Z          setTimeout(wait, interval);
2018-11-15T14:24:44.115008019Z        } [32m+0ms[0m
2018-11-15T14:24:44.115070930Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:44.115400340Z    [32;1mRepl [0m  [concatResult(data = 331232
2018-11-15T14:24:44.115418620Z  => 331232
2018-11-15T14:24:44.115424337Z  irb(main):014:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:44.116593806Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.116604929Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.116608607Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.116611898Z          if (condFunc()) {
2018-11-15T14:24:44.116614978Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.116618552Z            return resolve(value);
2018-11-15T14:24:44.116621782Z          }
2018-11-15T14:24:44.116624792Z          setTimeout(wait, interval);
2018-11-15T14:24:44.116644449Z        } [32m+1ms[0m
2018-11-15T14:24:44.116749989Z    [32;1mRepl [0m  [isDataReceived()] result: "331232
2018-11-15T14:24:44.116758330Z  => 331232
2018-11-15T14:24:44.116761685Z  irb(main):014:0> " [32m+0ms[0m
2018-11-15T14:24:44.116900490Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:44.117134839Z    [32;1mRepl [0m`let currResult = result` //==> "331232
2018-11-15T14:24:44.117143878Z  => 331232
2018-11-15T14:24:44.117147127Z  irb(main):014:0> " [32m+1ms[0m
2018-11-15T14:24:44.117353552Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:44.122605594Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:44.122815169Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:44.123017667Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:44.123181330Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:44.123189976Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:44.123193700Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:44.123197210Z        return result += data;
2018-11-15T14:24:44.123200576Z      })] [32m+0ms[0m
2018-11-15T14:24:44.123365622Z    [32;1mRepl [0m  resolve(result = "331232
2018-11-15T14:24:44.123373586Z  => 331232
2018-11-15T14:24:44.123377126Z  irb(main):014:0> ") [32m+1ms[0m
2018-11-15T14:24:44.123614325Z    [32;1mserver [0m  [emitOutput] output: 331232
2018-11-15T14:24:44.123622777Z  => 331232
2018-11-15T14:24:44.123626136Z  irb(main):014:0>  [32m+11ms[0m
2018-11-15T14:24:44.123848192Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:44.124103784Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}],"nsp":"/"} as 2["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}] [32m+0ms[0m
2018-11-15T14:24:44.124292443Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"331232\\r\\n=> 331232\\r\\nirb(main):014:0> \"}]"] [33m+709ms[0m
2018-11-15T14:24:44.124494963Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}]) [34m+13ms[0m
2018-11-15T14:24:44.124679716Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:44.124890668Z    [33;1mengine:ws [0mwriting "42["output",{"output":"331232\r\n=> 331232\r\nirb(main):014:0> "}]" [33m+13ms[0m
2018-11-15T14:24:44.135892680Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+11ms[0m
2018-11-15T14:24:44.135987813Z    [34;1mengine:socket [0mpacket [34m+11ms[0m
2018-11-15T14:24:44.136266729Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+13ms[0m
2018-11-15T14:24:44.136544178Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+24ms[0m
2018-11-15T14:24:44.136706711Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:44.136900350Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:44.137127526Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+13ms[0m
2018-11-15T14:24:44.137350714Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.137614729Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:44.278265827Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+142ms[0m
2018-11-15T14:24:44.278404966Z    [34;1mengine:socket [0mpacket [34m+143ms[0m
2018-11-15T14:24:44.278676369Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+141ms[0m
2018-11-15T14:24:44.278918169Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+142ms[0m
2018-11-15T14:24:44.279087923Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:44.279293508Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:44.279524275Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+143ms[0m
2018-11-15T14:24:44.279806657Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.280013137Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:44.284575368Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+7ms[0m
2018-11-15T14:24:44.284690968Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:44.284967520Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+5ms[0m
2018-11-15T14:24:44.285219932Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+6ms[0m
2018-11-15T14:24:44.285380776Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:44.285578456Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:44.285856632Z    [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+6ms[0m
2018-11-15T14:24:44.286032525Z    [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+162ms[0m
2018-11-15T14:24:44.286207108Z    [32;1mRepl [0m  this.process.write('1' + '\n') [32m+1ms[0m
2018-11-15T14:24:44.287112901Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:44.287342531Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:44.287523908Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:44.287729410Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:44.287739567Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:44.287743313Z        return result !== '';
2018-11-15T14:24:44.287746585Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:44.287882098Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:44.288103031Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.288112325Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.288115834Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.288119127Z          if (condFunc()) {
2018-11-15T14:24:44.288122320Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.288125897Z            return resolve(value);
2018-11-15T14:24:44.288129155Z          }
2018-11-15T14:24:44.288132197Z          setTimeout(wait, interval);
2018-11-15T14:24:44.288135440Z        } [32m+0ms[0m
2018-11-15T14:24:44.288196005Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:44.288568658Z    [32;1mRepl [0m  [concatResult(data = 1
2018-11-15T14:24:44.288578766Z  => 1
2018-11-15T14:24:44.288582159Z  irb(main):015:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:44.288830511Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.288839039Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.288842430Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.288845767Z          if (condFunc()) {
2018-11-15T14:24:44.288848866Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.288852321Z            return resolve(value);
2018-11-15T14:24:44.288855516Z          }
2018-11-15T14:24:44.288858508Z          setTimeout(wait, interval);
2018-11-15T14:24:44.288861639Z        } [32m+0ms[0m
2018-11-15T14:24:44.288924737Z    [32;1mRepl [0m  [isDataReceived()] result: "1
2018-11-15T14:24:44.288931588Z  => 1
2018-11-15T14:24:44.288940988Z  irb(main):015:0> " [32m+0ms[0m
2018-11-15T14:24:44.289116955Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:44.289329512Z    [32;1mRepl [0m`let currResult = result` //==> "1
2018-11-15T14:24:44.289337910Z  => 1
2018-11-15T14:24:44.289341232Z  irb(main):015:0> " [32m+0ms[0m
2018-11-15T14:24:44.289539622Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:44.294867737Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:44.295053882Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:44.295260750Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:24:44.295460802Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:44.295474642Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:44.295481598Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:44.295486642Z        return result += data;
2018-11-15T14:24:44.295491626Z      })] [32m+0ms[0m
2018-11-15T14:24:44.295643018Z    [32;1mRepl [0m  resolve(result = "1
2018-11-15T14:24:44.295651331Z  => 1
2018-11-15T14:24:44.295654770Z  irb(main):015:0> ") [32m+0ms[0m
2018-11-15T14:24:44.295889948Z    [32;1mserver [0m  [emitOutput] output: 1
2018-11-15T14:24:44.295899113Z  => 1
2018-11-15T14:24:44.295912559Z  irb(main):015:0>  [32m+10ms[0m
2018-11-15T14:24:44.296150387Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:44.296355728Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}] [32m+1ms[0m
2018-11-15T14:24:44.296587030Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):015:0> \"}]"] [33m+172ms[0m
2018-11-15T14:24:44.296772810Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}]) [34m+12ms[0m
2018-11-15T14:24:44.296968088Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:44.297174870Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):015:0> "}]" [33m+13ms[0m
2018-11-15T14:24:44.319220583Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+21ms[0m
2018-11-15T14:24:44.319330051Z    [34;1mengine:socket [0mpacket [34m+23ms[0m
2018-11-15T14:24:44.319565868Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+23ms[0m
2018-11-15T14:24:44.319861767Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+34ms[0m
2018-11-15T14:24:44.320025776Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:44.320222184Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:44.320565433Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+25ms[0m
2018-11-15T14:24:44.320827365Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.321091229Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:24:44.360849150Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+42ms[0m
2018-11-15T14:24:44.360972149Z    [34;1mengine:socket [0mpacket [34m+41ms[0m
2018-11-15T14:24:44.361147316Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+40ms[0m
2018-11-15T14:24:44.361288689Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+42ms[0m
2018-11-15T14:24:44.361558250Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:24:44.361653856Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:24:44.361816551Z    [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+41ms[0m
2018-11-15T14:24:44.361977094Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.362065031Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+0ms[0m
2018-11-15T14:24:44.441916070Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+81ms[0m
2018-11-15T14:24:44.441942539Z    [34;1mengine:socket [0mpacket [34m+81ms[0m
2018-11-15T14:24:44.442052755Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+80ms[0m
2018-11-15T14:24:44.442249519Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+81ms[0m
2018-11-15T14:24:44.442353535Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
2018-11-15T14:24:44.442525537Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+0ms[0m
2018-11-15T14:24:44.442708109Z    [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+81ms[0m
2018-11-15T14:24:44.442800590Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.442967066Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
2018-11-15T14:24:44.597809563Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+156ms[0m
2018-11-15T14:24:44.597953488Z    [34;1mengine:socket [0mpacket [34m+156ms[0m
2018-11-15T14:24:44.597964394Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+155ms[0m
2018-11-15T14:24:44.598172285Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+155ms[0m
2018-11-15T14:24:44.598263482Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:44.598431039Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:44.598591056Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+156ms[0m
2018-11-15T14:24:44.598750856Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.598859735Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:44.611985773Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"213"}]" [33m+14ms[0m
2018-11-15T14:24:44.612084695Z    [34;1mengine:socket [0mpacket [34m+14ms[0m
2018-11-15T14:24:44.612284826Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"213"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [32m+14ms[0m
2018-11-15T14:24:44.612522576Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"213"}]} [36m+14ms[0m
2018-11-15T14:24:44.612675293Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"213"}] [36m+0ms[0m
2018-11-15T14:24:44.612774117Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"213"}] [36m+0ms[0m
2018-11-15T14:24:44.612942757Z    [32;1mserver [0m  ["evaluate"] { code: 213 } [32m+14ms[0m
2018-11-15T14:24:44.613030746Z    [32;1mRepl [0m[bufferWrite(string = "213", bufferInterval = 5, write = true)] [32m+317ms[0m
2018-11-15T14:24:44.613164800Z    [32;1mRepl [0m  this.process.write('213' + '\n') [32m+1ms[0m
2018-11-15T14:24:44.613800639Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:44.614007130Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:44.614189407Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:44.614304374Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:44.614312570Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:44.614316198Z        return result !== '';
2018-11-15T14:24:44.614319578Z      }, interval = 1, value = undefined)] [32m+1ms[0m
2018-11-15T14:24:44.614445230Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:44.614560897Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.614568918Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.614572371Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.614575801Z          if (condFunc()) {
2018-11-15T14:24:44.614578955Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.614599083Z            return resolve(value);
2018-11-15T14:24:44.614602933Z          }
2018-11-15T14:24:44.614606119Z          setTimeout(wait, interval);
2018-11-15T14:24:44.614609301Z        } [32m+0ms[0m
2018-11-15T14:24:44.614672356Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:44.614901914Z    [32;1mRepl [0m  [concatResult(data = 213
2018-11-15T14:24:44.614911311Z  => 213
2018-11-15T14:24:44.614914698Z  irb(main):016:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:44.616086628Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.616096359Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.616099685Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.616103033Z          if (condFunc()) {
2018-11-15T14:24:44.616106122Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.616109600Z            return resolve(value);
2018-11-15T14:24:44.616112822Z          }
2018-11-15T14:24:44.616115935Z          setTimeout(wait, interval);
2018-11-15T14:24:44.616124437Z        } [32m+1ms[0m
2018-11-15T14:24:44.616187955Z    [32;1mRepl [0m  [isDataReceived()] result: "213
2018-11-15T14:24:44.616200254Z  => 213
2018-11-15T14:24:44.616203982Z  irb(main):016:0> " [32m+1ms[0m
2018-11-15T14:24:44.616207271Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:44.617025009Z    [32;1mRepl [0m`let currResult = result` //==> "213
2018-11-15T14:24:44.617040103Z  => 213
2018-11-15T14:24:44.617044224Z  irb(main):016:0> " [32m+0ms[0m
2018-11-15T14:24:44.617048309Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:44.622331569Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:44.622717991Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:44.623057417Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:44.623389424Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:44.623818670Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:44.624080877Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:44.624341667Z        return result += data;
2018-11-15T14:24:44.624616470Z      })] [32m+1ms[0m
2018-11-15T14:24:44.625062125Z    [32;1mRepl [0m  resolve(result = "213
2018-11-15T14:24:44.625325608Z  => 213
2018-11-15T14:24:44.625595393Z  irb(main):016:0> ") [32m+1ms[0m
2018-11-15T14:24:44.625961208Z    [32;1mserver [0m  [emitOutput] output: 213
2018-11-15T14:24:44.626221371Z  => 213
2018-11-15T14:24:44.626482987Z  irb(main):016:0>  [32m+13ms[0m
2018-11-15T14:24:44.626915049Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}],"nsp":"/"} [32m+14ms[0m
2018-11-15T14:24:44.627273079Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}],"nsp":"/"} as 2["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}] [32m+1ms[0m
2018-11-15T14:24:44.627648296Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"213\\r\\n=> 213\\r\\nirb(main):016:0> \"}]"] [33m+331ms[0m
2018-11-15T14:24:44.628059065Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}]) [34m+16ms[0m
2018-11-15T14:24:44.628411316Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:24:44.628769925Z    [33;1mengine:ws [0mwriting "42["output",{"output":"213\r\n=> 213\r\nirb(main):016:0> "}]" [33m+17ms[0m
2018-11-15T14:24:44.705221245Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+76ms[0m
2018-11-15T14:24:44.705658643Z    [34;1mengine:socket [0mpacket [34m+77ms[0m
2018-11-15T14:24:44.706083687Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+78ms[0m
2018-11-15T14:24:44.706488922Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+94ms[0m
2018-11-15T14:24:44.706905595Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:44.707239786Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
2018-11-15T14:24:44.707579083Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+82ms[0m
2018-11-15T14:24:44.707915392Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:24:44.708226626Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
2018-11-15T14:24:44.759564544Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+55ms[0m
2018-11-15T14:24:44.759715642Z    [34;1mengine:socket [0mpacket [34m+54ms[0m
2018-11-15T14:24:44.760107318Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+51ms[0m
2018-11-15T14:24:44.760361733Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+53ms[0m
2018-11-15T14:24:44.760579689Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:44.760763606Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:44.761001548Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+53ms[0m
2018-11-15T14:24:44.761206708Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:24:44.761406476Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:44.763877871Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+4ms[0m
2018-11-15T14:24:44.764071945Z    [34;1mengine:socket [0mpacket [34m+4ms[0m
2018-11-15T14:24:44.764360349Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+3ms[0m
2018-11-15T14:24:44.764588525Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+4ms[0m
2018-11-15T14:24:44.764767083Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:44.764956709Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:44.765164507Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+5ms[0m
2018-11-15T14:24:44.765383800Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.765595053Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
2018-11-15T14:24:44.799764994Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+36ms[0m
2018-11-15T14:24:44.800118046Z    [34;1mengine:socket [0mpacket [34m+36ms[0m
2018-11-15T14:24:44.800529433Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+35ms[0m
2018-11-15T14:24:44.800918597Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+36ms[0m
2018-11-15T14:24:44.801108431Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:44.801308665Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:44.801528786Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+36ms[0m
2018-11-15T14:24:44.801875217Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.802067819Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:44.802400343Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+3ms[0m
2018-11-15T14:24:44.802595061Z    [34;1mengine:socket [0mpacket [34m+3ms[0m
2018-11-15T14:24:44.802847402Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+1ms[0m
2018-11-15T14:24:44.803188870Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+1ms[0m
2018-11-15T14:24:44.803405864Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+1ms[0m
2018-11-15T14:24:44.803697064Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:44.803898408Z    [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+2ms[0m
2018-11-15T14:24:44.804073581Z    [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+179ms[0m
2018-11-15T14:24:44.804284999Z    [32;1mRepl [0m  this.process.write('312' + '\n') [32m+1ms[0m
2018-11-15T14:24:44.804931546Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:44.805150097Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:44.805312350Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:44.805495781Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:44.805696806Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:44.805706383Z        return result !== '';
2018-11-15T14:24:44.805924098Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:44.806093138Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:44.806359721Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.806496210Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.806646240Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.806880484Z          if (condFunc()) {
2018-11-15T14:24:44.806927817Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.807148101Z            return resolve(value);
2018-11-15T14:24:44.807195216Z          }
2018-11-15T14:24:44.807439135Z          setTimeout(wait, interval);
2018-11-15T14:24:44.807605438Z        } [32m+1ms[0m
2018-11-15T14:24:44.807898410Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:44.808200436Z    [32;1mRepl [0m  [concatResult(data = 312
2018-11-15T14:24:44.808359721Z  => 312
2018-11-15T14:24:44.808532711Z  irb(main):017:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:44.809346530Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.809574057Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.809783294Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.809968040Z          if (condFunc()) {
2018-11-15T14:24:44.810202522Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.810405702Z            return resolve(value);
2018-11-15T14:24:44.810670588Z          }
2018-11-15T14:24:44.810716903Z          setTimeout(wait, interval);
2018-11-15T14:24:44.810922750Z        } [32m+1ms[0m
2018-11-15T14:24:44.811207286Z    [32;1mRepl [0m  [isDataReceived()] result: "312
2018-11-15T14:24:44.811320524Z  => 312
2018-11-15T14:24:44.811418752Z  irb(main):017:0> " [32m+2ms[0m
2018-11-15T14:24:44.812047185Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:44.812059995Z    [32;1mRepl [0m`let currResult = result` //==> "312
2018-11-15T14:24:44.812064428Z  => 312
2018-11-15T14:24:44.812067750Z  irb(main):017:0> " [32m+0ms[0m
2018-11-15T14:24:44.812071462Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:44.817443870Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:44.817810880Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:44.818191569Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:44.818586597Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:44.818854553Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:44.819103469Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:44.819368496Z        return result += data;
2018-11-15T14:24:44.819633430Z      })] [32m+1ms[0m
2018-11-15T14:24:44.820641255Z    [32;1mRepl [0m  resolve(result = "312
2018-11-15T14:24:44.820940020Z  => 312
2018-11-15T14:24:44.821173194Z  irb(main):017:0> ") [32m+1ms[0m
2018-11-15T14:24:44.821506895Z    [32;1mserver [0m  [emitOutput] output: 312
2018-11-15T14:24:44.821761220Z  => 312
2018-11-15T14:24:44.822014934Z  irb(main):017:0>  [32m+18ms[0m
2018-11-15T14:24:44.822371468Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}],"nsp":"/"} [32m+20ms[0m
2018-11-15T14:24:44.822705485Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}] [32m+0ms[0m
2018-11-15T14:24:44.823032808Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):017:0> \"}]"] [33m+195ms[0m
2018-11-15T14:24:44.823358261Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}]) [34m+21ms[0m
2018-11-15T14:24:44.823686015Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:44.823988691Z    [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):017:0> "}]" [33m+21ms[0m
2018-11-15T14:24:44.932340264Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+109ms[0m
2018-11-15T14:24:44.932440454Z    [34;1mengine:socket [0mpacket [34m+109ms[0m
2018-11-15T14:24:44.932668799Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+110ms[0m
2018-11-15T14:24:44.932869577Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+129ms[0m
2018-11-15T14:24:44.932956544Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:44.933052221Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:44.933254345Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+112ms[0m
2018-11-15T14:24:44.933796789Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.933808623Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:44.936768522Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+4ms[0m
2018-11-15T14:24:44.936902377Z    [34;1mengine:socket [0mpacket [34m+4ms[0m
2018-11-15T14:24:44.937096230Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+3ms[0m
2018-11-15T14:24:44.937252489Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:24:44.937368038Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:44.937483362Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:44.937631407Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+4ms[0m
2018-11-15T14:24:44.937753654Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+118ms[0m
2018-11-15T14:24:44.937839391Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:44.938002323Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:44.938136872Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:44.938216335Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:44.938347639Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:44.938356790Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:44.938360484Z        return result !== '';
2018-11-15T14:24:44.938449284Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:44.938570352Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:44.938579656Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.938644696Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.938651909Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.938655375Z          if (condFunc()) {
2018-11-15T14:24:44.938666203Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.938670158Z            return resolve(value);
2018-11-15T14:24:44.938673305Z          }
2018-11-15T14:24:44.938676320Z          setTimeout(wait, interval);
2018-11-15T14:24:44.938679695Z        } [32m+0ms[0m
2018-11-15T14:24:44.938773506Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:44.939045111Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:44.939057151Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:44.939233767Z    [32;1mRepl [0m  [concatResult(data = irb(main):018:0> )] result: "
2018-11-15T14:24:44.939242447Z  " [32m+1ms[0m
2018-11-15T14:24:44.940480705Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:44.940491376Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:44.940494860Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:44.940498467Z          if (condFunc()) {
2018-11-15T14:24:44.940592401Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:44.940600266Z            return resolve(value);
2018-11-15T14:24:44.940603557Z          }
2018-11-15T14:24:44.940606667Z          setTimeout(wait, interval);
2018-11-15T14:24:44.940609752Z        } [32m+1ms[0m
2018-11-15T14:24:44.940713385Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:44.940721467Z  irb(main):018:0> " [32m+0ms[0m
2018-11-15T14:24:44.940799777Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:44.940992441Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:44.941000177Z  irb(main):018:0> " [32m+0ms[0m
2018-11-15T14:24:44.941127466Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:44.946494193Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:44.946613996Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:44.946738561Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:44.946859684Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:44.946867967Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:44.946871601Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:44.947021660Z        return result += data;
2018-11-15T14:24:44.947030000Z      })] [32m+0ms[0m
2018-11-15T14:24:44.947033657Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:44.947036995Z  irb(main):018:0> ") [32m+0ms[0m
2018-11-15T14:24:44.947134038Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:44.947215828Z  irb(main):018:0>  [32m+10ms[0m
2018-11-15T14:24:44.947409994Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:44.947526245Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):018:0> "}] [32m+0ms[0m
2018-11-15T14:24:44.947726833Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):018:0> \"}]"] [33m+125ms[0m
2018-11-15T14:24:44.947817714Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):018:0> "}]) [34m+11ms[0m
2018-11-15T14:24:44.947948071Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:44.948076754Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):018:0> "}]" [33m+11ms[0m
2018-11-15T14:24:44.965775691Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+18ms[0m
2018-11-15T14:24:44.965937411Z    [34;1mengine:socket [0mpacket [34m+18ms[0m
2018-11-15T14:24:44.966195572Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+18ms[0m
2018-11-15T14:24:44.966477842Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+29ms[0m
2018-11-15T14:24:44.966615399Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:44.966756543Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:44.966908403Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+19ms[0m
2018-11-15T14:24:44.967086965Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:44.967217321Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
2018-11-15T14:24:45.026545562Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+61ms[0m
2018-11-15T14:24:45.026754813Z    [34;1mengine:socket [0mpacket [34m+61ms[0m
2018-11-15T14:24:45.026994099Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+59ms[0m
2018-11-15T14:24:45.027213362Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+61ms[0m
2018-11-15T14:24:45.027327884Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:45.027585954Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:45.027800305Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+61ms[0m
2018-11-15T14:24:45.028024198Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.028189998Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+1ms[0m
2018-11-15T14:24:45.279545806Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"313"}]" [33m+253ms[0m
2018-11-15T14:24:45.279667286Z    [34;1mengine:socket [0mpacket [34m+253ms[0m
2018-11-15T14:24:45.279964586Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"313"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"313"}]} [32m+251ms[0m
2018-11-15T14:24:45.280150819Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"313"}]} [36m+252ms[0m
2018-11-15T14:24:45.280267518Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"313"}] [36m+1ms[0m
2018-11-15T14:24:45.280446133Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"313"}] [36m+0ms[0m
2018-11-15T14:24:45.280610272Z    [32;1mserver [0m  ["lineChanged"] { line: 313 } [32m+253ms[0m
2018-11-15T14:24:45.280796513Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"313"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.280940864Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"313"}],"nsp":"/"} as 2["syncLine",{"line":"313"}] [32m+0ms[0m
2018-11-15T14:24:45.285665000Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:24:45.285782280Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:45.286001297Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
2018-11-15T14:24:45.286221582Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
2018-11-15T14:24:45.286345149Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:45.286509663Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:45.286640646Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:24:45.286845533Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.286989324Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:45.287250676Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"313"}]" [33m+2ms[0m
2018-11-15T14:24:45.287477643Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:45.287667325Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"313"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"313"}]} [32m+1ms[0m
2018-11-15T14:24:45.287825567Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"313"}]} [36m+1ms[0m
2018-11-15T14:24:45.288035080Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"313"}] [36m+0ms[0m
2018-11-15T14:24:45.288188402Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"313"}] [36m+1ms[0m
2018-11-15T14:24:45.288344418Z    [32;1mserver [0m  ["evaluate"] { code: 313 } [32m+2ms[0m
2018-11-15T14:24:45.288472789Z    [32;1mRepl [0m[bufferWrite(string = "313", bufferInterval = 5, write = true)] [32m+342ms[0m
2018-11-15T14:24:45.288563921Z    [32;1mRepl [0m  this.process.write('313' + '\n') [32m+0ms[0m
2018-11-15T14:24:45.289200335Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:45.289212461Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:45.289227663Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:45.289231700Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:45.289235135Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:45.289238703Z        return result !== '';
2018-11-15T14:24:45.289241999Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:45.289245267Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:45.289253454Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.289266874Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.289270441Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.289273652Z          if (condFunc()) {
2018-11-15T14:24:45.289276841Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.289280420Z            return resolve(value);
2018-11-15T14:24:45.289283643Z          }
2018-11-15T14:24:45.289286675Z          setTimeout(wait, interval);
2018-11-15T14:24:45.289289777Z        } [32m+0ms[0m
2018-11-15T14:24:45.289293139Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:45.289296520Z    [32;1mRepl [0m  [concatResult(data = 313
2018-11-15T14:24:45.289299760Z  => 313
2018-11-15T14:24:45.289302925Z  )] result: "" [32m+1ms[0m
2018-11-15T14:24:45.289399576Z    [32;1mRepl [0m  [concatResult(data = irb(main):019:0> )] result: "313
2018-11-15T14:24:45.289407724Z  => 313
2018-11-15T14:24:45.289418795Z  " [32m+0ms[0m
2018-11-15T14:24:45.290526524Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.290537170Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.290540681Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.290543993Z          if (condFunc()) {
2018-11-15T14:24:45.290736038Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.290744331Z            return resolve(value);
2018-11-15T14:24:45.290747653Z          }
2018-11-15T14:24:45.290750691Z          setTimeout(wait, interval);
2018-11-15T14:24:45.290753837Z        } [32m+1ms[0m
2018-11-15T14:24:45.290892015Z    [32;1mRepl [0m  [isDataReceived()] result: "313
2018-11-15T14:24:45.290900138Z  => 313
2018-11-15T14:24:45.290903349Z  irb(main):019:0> " [32m+0ms[0m
2018-11-15T14:24:45.290968651Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:45.291110180Z    [32;1mRepl [0m`let currResult = result` //==> "313
2018-11-15T14:24:45.291165486Z  => 313
2018-11-15T14:24:45.291171809Z  irb(main):019:0> " [32m+0ms[0m
2018-11-15T14:24:45.291312129Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:45.296549938Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:45.296650932Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:45.296834740Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:45.297050042Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:45.297059968Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:45.297063650Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:45.297067142Z        return result += data;
2018-11-15T14:24:45.297118572Z      })] [32m+0ms[0m
2018-11-15T14:24:45.297151432Z    [32;1mRepl [0m  resolve(result = "313
2018-11-15T14:24:45.297155764Z  => 313
2018-11-15T14:24:45.297159047Z  irb(main):019:0> ") [32m+0ms[0m
2018-11-15T14:24:45.297295833Z    [32;1mserver [0m  [emitOutput] output: 313
2018-11-15T14:24:45.297304441Z  => 313
2018-11-15T14:24:45.297307684Z  irb(main):019:0>  [32m+9ms[0m
2018-11-15T14:24:45.297482059Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:24:45.297602465Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}],"nsp":"/"} as 2["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}] [32m+0ms[0m
2018-11-15T14:24:45.297787224Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"313\\r\\n=> 313\\r\\nirb(main):019:0> \"}]"] [33m+350ms[0m
2018-11-15T14:24:45.297932889Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}]) [34m+10ms[0m
2018-11-15T14:24:45.298048222Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:45.298197618Z    [33;1mengine:ws [0mwriting "42["output",{"output":"313\r\n=> 313\r\nirb(main):019:0> "}]" [33m+11ms[0m
2018-11-15T14:24:45.449982774Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+151ms[0m
2018-11-15T14:24:45.450103280Z    [34;1mengine:socket [0mpacket [34m+152ms[0m
2018-11-15T14:24:45.450390716Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+153ms[0m
2018-11-15T14:24:45.450684861Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+162ms[0m
2018-11-15T14:24:45.450874887Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:45.451080807Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:45.451309619Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+154ms[0m
2018-11-15T14:24:45.451460825Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.451698184Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:45.455578312Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:24:45.455694882Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:45.455903546Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
2018-11-15T14:24:45.456145085Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
2018-11-15T14:24:45.456313964Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:45.456434402Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:45.457857766Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:24:45.458027116Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:24:45.458203488Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
2018-11-15T14:24:45.458483522Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+3ms[0m
2018-11-15T14:24:45.458552551Z    [34;1mengine:socket [0mpacket [34m+3ms[0m
2018-11-15T14:24:45.458754843Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
2018-11-15T14:24:45.459018128Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+2ms[0m
2018-11-15T14:24:45.459226175Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:45.459416194Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:45.459562637Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+2ms[0m
2018-11-15T14:24:45.459684348Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.459829407Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:45.460082240Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+1ms[0m
2018-11-15T14:24:45.460219047Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:45.460420490Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+1ms[0m
2018-11-15T14:24:45.460664218Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+1ms[0m
2018-11-15T14:24:45.460739046Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:24:45.460878588Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:24:45.460972557Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+1ms[0m
2018-11-15T14:24:45.461216338Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+164ms[0m
2018-11-15T14:24:45.461225488Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+1ms[0m
2018-11-15T14:24:45.461816182Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:45.461827999Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:45.461831913Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:45.461835361Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:45.461838759Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:45.461842159Z        return result !== '';
2018-11-15T14:24:45.461845307Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:45.461848646Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:45.461852076Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.461855268Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.461858438Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.461861813Z          if (condFunc()) {
2018-11-15T14:24:45.461864937Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.461868374Z            return resolve(value);
2018-11-15T14:24:45.461871533Z          }
2018-11-15T14:24:45.461874664Z          setTimeout(wait, interval);
2018-11-15T14:24:45.461885163Z        } [32m+0ms[0m
2018-11-15T14:24:45.461888522Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:45.461891886Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:24:45.461895196Z  => 12
2018-11-15T14:24:45.461898352Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:45.461979703Z    [32;1mRepl [0m  [concatResult(data = irb(main):020:0> )] result: "12
2018-11-15T14:24:45.461987123Z  => 12
2018-11-15T14:24:45.461990309Z  " [32m+0ms[0m
2018-11-15T14:24:45.463264758Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.463310619Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.463314977Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.463350947Z          if (condFunc()) {
2018-11-15T14:24:45.463355378Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.463358930Z            return resolve(value);
2018-11-15T14:24:45.463362773Z          }
2018-11-15T14:24:45.463365871Z          setTimeout(wait, interval);
2018-11-15T14:24:45.463369009Z        } [32m+2ms[0m
2018-11-15T14:24:45.463493840Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:24:45.463502181Z  => 12
2018-11-15T14:24:45.463505568Z  irb(main):020:0> " [32m+0ms[0m
2018-11-15T14:24:45.463583989Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:45.463744977Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:24:45.463753110Z  => 12
2018-11-15T14:24:45.463756368Z  irb(main):020:0> " [32m+0ms[0m
2018-11-15T14:24:45.463966287Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:45.469225390Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:45.469462160Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:45.469696013Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:45.469854353Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:45.469865484Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:45.469869671Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:45.469976771Z        return result += data;
2018-11-15T14:24:45.470006971Z      })] [32m+0ms[0m
2018-11-15T14:24:45.470132148Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:24:45.470141619Z  => 12
2018-11-15T14:24:45.470145062Z  irb(main):020:0> ") [32m+1ms[0m
2018-11-15T14:24:45.470349160Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:24:45.470361477Z  => 12
2018-11-15T14:24:45.470367260Z  irb(main):020:0>  [32m+10ms[0m
2018-11-15T14:24:45.470599235Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:24:45.470779157Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}] [32m+0ms[0m
2018-11-15T14:24:45.470959762Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):020:0> \"}]"] [33m+173ms[0m
2018-11-15T14:24:45.471121743Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}]) [34m+10ms[0m
2018-11-15T14:24:45.471290422Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:24:45.471519838Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):020:0> "}]" [33m+12ms[0m
2018-11-15T14:24:45.517519533Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+46ms[0m
2018-11-15T14:24:45.517795032Z    [34;1mengine:socket [0mpacket [34m+46ms[0m
2018-11-15T14:24:45.518293875Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+48ms[0m
2018-11-15T14:24:45.518687226Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+58ms[0m
2018-11-15T14:24:45.519041312Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:45.519272156Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
2018-11-15T14:24:45.519554668Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+49ms[0m
2018-11-15T14:24:45.519867605Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.520228957Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:45.555813803Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+38ms[0m
2018-11-15T14:24:45.555997823Z    [34;1mengine:socket [0mpacket [34m+38ms[0m
2018-11-15T14:24:45.556282077Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+37ms[0m
2018-11-15T14:24:45.556492446Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+37ms[0m
2018-11-15T14:24:45.556645541Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:45.556812234Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:45.556951942Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+37ms[0m
2018-11-15T14:24:45.557106721Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:45.557238105Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
2018-11-15T14:24:45.561709826Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
2018-11-15T14:24:45.561869581Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:45.562062170Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
2018-11-15T14:24:45.562192478Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
2018-11-15T14:24:45.562445649Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:45.562458040Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:45.562514657Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
2018-11-15T14:24:45.562520139Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+92ms[0m
2018-11-15T14:24:45.562602371Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:45.563215123Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:45.563231597Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:45.563239068Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:45.563253857Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:45.563279282Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:45.563289653Z        return result !== '';
2018-11-15T14:24:45.563294885Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:45.563299922Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:45.563305600Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.563311813Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.563317529Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.563323445Z          if (condFunc()) {
2018-11-15T14:24:45.563328242Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.563335535Z            return resolve(value);
2018-11-15T14:24:45.563340559Z          }
2018-11-15T14:24:45.563346460Z          setTimeout(wait, interval);
2018-11-15T14:24:45.563351418Z        } [32m+0ms[0m
2018-11-15T14:24:45.563357569Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:45.563363161Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:45.563368495Z  => 3
2018-11-15T14:24:45.563373776Z  )] result: "" [32m+1ms[0m
2018-11-15T14:24:45.563690631Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.563708119Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.563712203Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.563715647Z          if (condFunc()) {
2018-11-15T14:24:45.563719151Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.563778011Z            return resolve(value);
2018-11-15T14:24:45.563784870Z          }
2018-11-15T14:24:45.563788206Z          setTimeout(wait, interval);
2018-11-15T14:24:45.563791432Z        } [32m+0ms[0m
2018-11-15T14:24:45.563794689Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:45.563798286Z  => 3
2018-11-15T14:24:45.563801446Z  " [32m+0ms[0m
2018-11-15T14:24:45.563806435Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:45.563939993Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:45.563953968Z  => 3
2018-11-15T14:24:45.563960488Z  " [32m+0ms[0m
2018-11-15T14:24:45.564124218Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:45.564262784Z    [32;1mRepl [0m  [concatResult(data = irb(main):021:0> )] result: "3
2018-11-15T14:24:45.564272713Z  => 3
2018-11-15T14:24:45.564276148Z  " [32m+0ms[0m
2018-11-15T14:24:45.569735898Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:45.569766885Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "3
2018-11-15T14:24:45.569780482Z  => 3
2018-11-15T14:24:45.569783912Z  ", result: "3
2018-11-15T14:24:45.569787266Z  => 3
2018-11-15T14:24:45.569790507Z  irb(main):021:0> " [32m+0ms[0m
2018-11-15T14:24:45.574964079Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:45.575223558Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:45.575246264Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:24:45.575403368Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:45.575415947Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:45.575420464Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:45.575429835Z        return result += data;
2018-11-15T14:24:45.575433648Z      })] [32m+0ms[0m
2018-11-15T14:24:45.575636687Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:45.575647636Z  => 3
2018-11-15T14:24:45.575651225Z  irb(main):021:0> ") [32m+0ms[0m
2018-11-15T14:24:45.575836313Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:45.575845542Z  => 3
2018-11-15T14:24:45.575848872Z  irb(main):021:0>  [32m+13ms[0m
2018-11-15T14:24:45.576049255Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}],"nsp":"/"} [32m+14ms[0m
2018-11-15T14:24:45.576227057Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}] [32m+1ms[0m
2018-11-15T14:24:45.576430017Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):021:0> \"}]"] [33m+106ms[0m
2018-11-15T14:24:45.576690133Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}]) [34m+15ms[0m
2018-11-15T14:24:45.576707840Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:45.576724843Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):021:0> "}]" [33m+15ms[0m
2018-11-15T14:24:45.625813539Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+49ms[0m
2018-11-15T14:24:45.626070629Z    [34;1mengine:socket [0mpacket [34m+49ms[0m
2018-11-15T14:24:45.626392747Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+50ms[0m
2018-11-15T14:24:45.626587398Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+64ms[0m
2018-11-15T14:24:45.626848334Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:45.626860654Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:45.627048083Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+51ms[0m
2018-11-15T14:24:45.627256754Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.627432063Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:45.703411233Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+78ms[0m
2018-11-15T14:24:45.703460825Z    [34;1mengine:socket [0mpacket [34m+78ms[0m
2018-11-15T14:24:45.703790622Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+76ms[0m
2018-11-15T14:24:45.704093493Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+77ms[0m
2018-11-15T14:24:45.704265870Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+1ms[0m
2018-11-15T14:24:45.704511377Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+0ms[0m
2018-11-15T14:24:45.704676361Z    [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+78ms[0m
2018-11-15T14:24:45.704920177Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.705179651Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
2018-11-15T14:24:45.848228187Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"132"}]" [33m+144ms[0m
2018-11-15T14:24:45.848289775Z    [34;1mengine:socket [0mpacket [34m+145ms[0m
2018-11-15T14:24:45.848509386Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"132"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"132"}]} [32m+144ms[0m
2018-11-15T14:24:45.848733905Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"132"}]} [36m+144ms[0m
2018-11-15T14:24:45.848846064Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"132"}] [36m+0ms[0m
2018-11-15T14:24:45.849025475Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"132"}] [36m+0ms[0m
2018-11-15T14:24:45.849210117Z    [32;1mserver [0m  ["lineChanged"] { line: 132 } [32m+145ms[0m
2018-11-15T14:24:45.849467162Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"132"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.849651204Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"132"}],"nsp":"/"} as 2["syncLine",{"line":"132"}] [32m+0ms[0m
2018-11-15T14:24:45.899591701Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1323"}]" [33m+52ms[0m
2018-11-15T14:24:45.899644445Z    [34;1mengine:socket [0mpacket [34m+51ms[0m
2018-11-15T14:24:45.899857193Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1323"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1323"}]} [32m+50ms[0m
2018-11-15T14:24:45.900089429Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1323"}]} [36m+51ms[0m
2018-11-15T14:24:45.900241536Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1323"}] [36m+1ms[0m
2018-11-15T14:24:45.900381463Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1323"}] [36m+0ms[0m
2018-11-15T14:24:45.900517017Z    [32;1mserver [0m  ["lineChanged"] { line: 1323 } [32m+51ms[0m
2018-11-15T14:24:45.900650120Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1323"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.900861577Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1323"}],"nsp":"/"} as 2["syncLine",{"line":"1323"}] [32m+0ms[0m
2018-11-15T14:24:45.915885744Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+16ms[0m
2018-11-15T14:24:45.915942641Z    [34;1mengine:socket [0mpacket [34m+16ms[0m
2018-11-15T14:24:45.916169762Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+15ms[0m
2018-11-15T14:24:45.916553557Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+16ms[0m
2018-11-15T14:24:45.916811396Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:45.916972312Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:45.917231944Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+17ms[0m
2018-11-15T14:24:45.917473093Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:24:45.917489375Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:45.917984871Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1323"}]" [33m+2ms[0m
2018-11-15T14:24:45.918186563Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:45.918430215Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1323"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1323"}]} [32m+1ms[0m
2018-11-15T14:24:45.918653753Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1323"}]} [36m+2ms[0m
2018-11-15T14:24:45.918877319Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1323"}] [36m+0ms[0m
2018-11-15T14:24:45.918920033Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1323"}] [36m+0ms[0m
2018-11-15T14:24:45.919130277Z    [32;1mserver [0m  ["evaluate"] { code: 1323 } [32m+1ms[0m
2018-11-15T14:24:45.919428320Z    [32;1mRepl [0m[bufferWrite(string = "1323", bufferInterval = 5, write = true)] [32m+344ms[0m
2018-11-15T14:24:45.919444205Z    [32;1mRepl [0m  this.process.write('1323' + '\n') [32m+0ms[0m
2018-11-15T14:24:45.920174639Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:45.920195424Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:45.920200325Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:45.920203884Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:45.920207307Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:45.920210800Z        return result !== '';
2018-11-15T14:24:45.920214050Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:45.920217525Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:45.920229174Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.920232749Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.920236269Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.920239447Z          if (condFunc()) {
2018-11-15T14:24:45.920248312Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.920251824Z            return resolve(value);
2018-11-15T14:24:45.920254984Z          }
2018-11-15T14:24:45.920258096Z          setTimeout(wait, interval);
2018-11-15T14:24:45.920261255Z        } [32m+0ms[0m
2018-11-15T14:24:45.920264523Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:45.920500808Z    [32;1mRepl [0m  [concatResult(data = 1323
2018-11-15T14:24:45.920516651Z  => 1323
2018-11-15T14:24:45.920529623Z  )] result: "" [32m+1ms[0m
2018-11-15T14:24:45.920775378Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:45.920800067Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:45.920808250Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:45.920813370Z          if (condFunc()) {
2018-11-15T14:24:45.920817898Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:45.921043417Z            return resolve(value);
2018-11-15T14:24:45.921055995Z          }
2018-11-15T14:24:45.921061347Z          setTimeout(wait, interval);
2018-11-15T14:24:45.921066545Z        } [32m+0ms[0m
2018-11-15T14:24:45.921071830Z    [32;1mRepl [0m  [isDataReceived()] result: "1323
2018-11-15T14:24:45.921085488Z  => 1323
2018-11-15T14:24:45.921090656Z  " [32m+0ms[0m
2018-11-15T14:24:45.921192449Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:45.921383499Z    [32;1mRepl [0m`let currResult = result` //==> "1323
2018-11-15T14:24:45.921393680Z  => 1323
2018-11-15T14:24:45.921397067Z  " [32m+0ms[0m
2018-11-15T14:24:45.921584700Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:45.921803641Z    [32;1mRepl [0m  [concatResult(data = irb(main):022:0> )] result: "1323
2018-11-15T14:24:45.921816816Z  => 1323
2018-11-15T14:24:45.921822224Z  " [32m+0ms[0m
2018-11-15T14:24:45.925978463Z    [32;1mRepl [0m  [setInterval()] [32m+4ms[0m
2018-11-15T14:24:45.926170380Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "1323
2018-11-15T14:24:45.926183422Z  => 1323
2018-11-15T14:24:45.926187542Z  ", result: "1323
2018-11-15T14:24:45.926197637Z  => 1323
2018-11-15T14:24:45.926201048Z  irb(main):022:0> " [32m+0ms[0m
2018-11-15T14:24:45.931524892Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:45.931623114Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:45.931794671Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:45.932078261Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:45.932097441Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:45.932102535Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:45.932106070Z        return result += data;
2018-11-15T14:24:45.932109333Z      })] [32m+0ms[0m
2018-11-15T14:24:45.932113567Z    [32;1mRepl [0m  resolve(result = "1323
2018-11-15T14:24:45.932117050Z  => 1323
2018-11-15T14:24:45.932120198Z  irb(main):022:0> ") [32m+0ms[0m
2018-11-15T14:24:45.932266939Z    [32;1mserver [0m  [emitOutput] output: 1323
2018-11-15T14:24:45.932281456Z  => 1323
2018-11-15T14:24:45.932288123Z  irb(main):022:0>  [32m+14ms[0m
2018-11-15T14:24:45.932533772Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}],"nsp":"/"} [32m+14ms[0m
2018-11-15T14:24:45.932710408Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}],"nsp":"/"} as 2["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}] [32m+0ms[0m
2018-11-15T14:24:45.932834379Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1323\\r\\n=> 1323\\r\\nirb(main):022:0> \"}]"] [33m+356ms[0m
2018-11-15T14:24:45.932964805Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}]) [34m+15ms[0m
2018-11-15T14:24:45.933138426Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:24:45.933298560Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1323\r\n=> 1323\r\nirb(main):022:0> "}]" [33m+16ms[0m
2018-11-15T14:24:45.985867945Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+52ms[0m
2018-11-15T14:24:45.986029761Z    [34;1mengine:socket [0mpacket [34m+52ms[0m
2018-11-15T14:24:45.986291763Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+54ms[0m
2018-11-15T14:24:45.986492330Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+68ms[0m
2018-11-15T14:24:45.986689412Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:45.987332748Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:45.987487627Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+55ms[0m
2018-11-15T14:24:45.987799234Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:45.988064347Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:46.048591556Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+63ms[0m
2018-11-15T14:24:46.048642413Z    [34;1mengine:socket [0mpacket [34m+63ms[0m
2018-11-15T14:24:46.048888887Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+61ms[0m
2018-11-15T14:24:46.049244921Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+63ms[0m
2018-11-15T14:24:46.049408348Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.049599786Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.049869196Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+62ms[0m
2018-11-15T14:24:46.050114326Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.050375636Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
2018-11-15T14:24:46.050682670Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+2ms[0m
2018-11-15T14:24:46.050839685Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:46.051154129Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+0ms[0m
2018-11-15T14:24:46.051426303Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+2ms[0m
2018-11-15T14:24:46.051456126Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:46.051597588Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:46.051821198Z    [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+2ms[0m
2018-11-15T14:24:46.052134312Z    [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+120ms[0m
2018-11-15T14:24:46.052156892Z    [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
2018-11-15T14:24:46.052772831Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:46.052785053Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:46.052789417Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:46.052792988Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:46.052804693Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:46.052808707Z        return result !== '';
2018-11-15T14:24:46.052811930Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:46.052815421Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:46.052818975Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.052822275Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.052831647Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.052835216Z          if (condFunc()) {
2018-11-15T14:24:46.052838359Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.052841839Z            return resolve(value);
2018-11-15T14:24:46.052845058Z          }
2018-11-15T14:24:46.052848021Z          setTimeout(wait, interval);
2018-11-15T14:24:46.052851089Z        } [32m+0ms[0m
2018-11-15T14:24:46.052854304Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:46.053118693Z    [32;1mRepl [0m  [concatResult(data = 1
2018-11-15T14:24:46.053131010Z  => 1
2018-11-15T14:24:46.053134871Z  irb(main):023:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:46.054396684Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.054435027Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.054439292Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.054509089Z          if (condFunc()) {
2018-11-15T14:24:46.054515925Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.054519647Z            return resolve(value);
2018-11-15T14:24:46.054522825Z          }
2018-11-15T14:24:46.054525900Z          setTimeout(wait, interval);
2018-11-15T14:24:46.054529153Z        } [32m+2ms[0m
2018-11-15T14:24:46.054532518Z    [32;1mRepl [0m  [isDataReceived()] result: "1
2018-11-15T14:24:46.054535929Z  => 1
2018-11-15T14:24:46.054539076Z  irb(main):023:0> " [32m+0ms[0m
2018-11-15T14:24:46.054542565Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:46.054546428Z    [32;1mRepl [0m`let currResult = result` //==> "1
2018-11-15T14:24:46.054549783Z  => 1
2018-11-15T14:24:46.054552831Z  irb(main):023:0> " [32m+0ms[0m
2018-11-15T14:24:46.054557676Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:46.059705320Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:46.060007503Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:46.060031756Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:46.060037164Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:46.060040852Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:46.060044364Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:46.060115564Z        return result += data;
2018-11-15T14:24:46.060122055Z      })] [32m+0ms[0m
2018-11-15T14:24:46.060154774Z    [32;1mRepl [0m  resolve(result = "1
2018-11-15T14:24:46.060160516Z  => 1
2018-11-15T14:24:46.060163844Z  irb(main):023:0> ") [32m+0ms[0m
2018-11-15T14:24:46.060236612Z    [32;1mserver [0m  [emitOutput] output: 1
2018-11-15T14:24:46.060248799Z  => 1
2018-11-15T14:24:46.060252723Z  irb(main):023:0>  [32m+9ms[0m
2018-11-15T14:24:46.060484178Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:24:46.060589643Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}] [32m+0ms[0m
2018-11-15T14:24:46.060607887Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):023:0> \"}]"] [33m+128ms[0m
2018-11-15T14:24:46.060684101Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}]) [34m+10ms[0m
2018-11-15T14:24:46.060745332Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:46.060896595Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):023:0> "}]" [33m+10ms[0m
2018-11-15T14:24:46.068806981Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+8ms[0m
2018-11-15T14:24:46.068831216Z    [34;1mengine:socket [0mpacket [34m+8ms[0m
2018-11-15T14:24:46.068954535Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+8ms[0m
2018-11-15T14:24:46.069275228Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+18ms[0m
2018-11-15T14:24:46.069287687Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:46.069292185Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:46.069296166Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+9ms[0m
2018-11-15T14:24:46.069407387Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.071705315Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:46.190606354Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+122ms[0m
2018-11-15T14:24:46.190677158Z    [34;1mengine:socket [0mpacket [34m+122ms[0m
2018-11-15T14:24:46.190774996Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+121ms[0m
2018-11-15T14:24:46.190912251Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+121ms[0m
2018-11-15T14:24:46.190948309Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:46.190990853Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:46.191039547Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+121ms[0m
2018-11-15T14:24:46.191156060Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.191243698Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:46.197327923Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
2018-11-15T14:24:46.197387835Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:46.197394235Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+6ms[0m
2018-11-15T14:24:46.197399533Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+7ms[0m
2018-11-15T14:24:46.197403869Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:46.197407806Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:46.197411463Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+7ms[0m
2018-11-15T14:24:46.197544586Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.197554728Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
2018-11-15T14:24:46.197559372Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
2018-11-15T14:24:46.197672690Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:46.197681629Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
2018-11-15T14:24:46.197827787Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+0ms[0m
2018-11-15T14:24:46.197840868Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.197845290Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.197947940Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+0ms[0m
2018-11-15T14:24:46.197956390Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.197961090Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:46.198274671Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+1ms[0m
2018-11-15T14:24:46.198297544Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:46.198689829Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+1ms[0m
2018-11-15T14:24:46.199008903Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+1ms[0m
2018-11-15T14:24:46.199016436Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:46.199022226Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:46.199028313Z    [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+1ms[0m
2018-11-15T14:24:46.199033982Z    [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+139ms[0m
2018-11-15T14:24:46.199039721Z    [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
2018-11-15T14:24:46.199045140Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:46.199052868Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:46.199058514Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:46.199084207Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:46.199090903Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:46.199095800Z        return result !== '';
2018-11-15T14:24:46.199099138Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:46.199102361Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:46.199105779Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.199108982Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.199112230Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.199115472Z          if (condFunc()) {
2018-11-15T14:24:46.199118520Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.199121881Z            return resolve(value);
2018-11-15T14:24:46.199125756Z          }
2018-11-15T14:24:46.199130345Z          setTimeout(wait, interval);
2018-11-15T14:24:46.199135160Z        } [32m+0ms[0m
2018-11-15T14:24:46.199140146Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:46.199454568Z    [32;1mRepl [0m  [concatResult(data = 312
2018-11-15T14:24:46.199472941Z  )] result: "" [32m+1ms[0m
2018-11-15T14:24:46.199932432Z    [32;1mRepl [0m  [concatResult(data = => 312
2018-11-15T14:24:46.199945621Z  )] result: "312
2018-11-15T14:24:46.199951125Z  " [32m+0ms[0m
2018-11-15T14:24:46.200067669Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.200079041Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.200084350Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.200089341Z          if (condFunc()) {
2018-11-15T14:24:46.200094004Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.200099698Z            return resolve(value);
2018-11-15T14:24:46.200104556Z          }
2018-11-15T14:24:46.200109140Z          setTimeout(wait, interval);
2018-11-15T14:24:46.200113879Z        } [32m+0ms[0m
2018-11-15T14:24:46.200119131Z    [32;1mRepl [0m  [isDataReceived()] result: "312
2018-11-15T14:24:46.200124476Z  => 312
2018-11-15T14:24:46.200129429Z  " [32m+0ms[0m
2018-11-15T14:24:46.200134660Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:46.200140497Z    [32;1mRepl [0m`let currResult = result` //==> "312
2018-11-15T14:24:46.200146131Z  => 312
2018-11-15T14:24:46.200150700Z  " [32m+0ms[0m
2018-11-15T14:24:46.200240412Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:46.200661135Z    [32;1mRepl [0m  [concatResult(data = irb(main):024:0> )] result: "312
2018-11-15T14:24:46.200671643Z  => 312
2018-11-15T14:24:46.200675173Z  " [32m+1ms[0m
2018-11-15T14:24:46.204860134Z    [32;1mRepl [0m  [setInterval()] [32m+4ms[0m
2018-11-15T14:24:46.204991555Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "312
2018-11-15T14:24:46.205003890Z  => 312
2018-11-15T14:24:46.205009275Z  ", result: "312
2018-11-15T14:24:46.205013975Z  => 312
2018-11-15T14:24:46.205018102Z  irb(main):024:0> " [32m+0ms[0m
2018-11-15T14:24:46.210066340Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:46.210211052Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:46.210221837Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:24:46.210237000Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:46.210240972Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:46.210244402Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:46.210247610Z        return result += data;
2018-11-15T14:24:46.210250858Z      })] [32m+0ms[0m
2018-11-15T14:24:46.210254056Z    [32;1mRepl [0m  resolve(result = "312
2018-11-15T14:24:46.210257375Z  => 312
2018-11-15T14:24:46.210260530Z  irb(main):024:0> ") [32m+0ms[0m
2018-11-15T14:24:46.210345070Z    [32;1mserver [0m  [emitOutput] output: 312
2018-11-15T14:24:46.210362273Z  => 312
2018-11-15T14:24:46.210366268Z  irb(main):024:0>  [32m+12ms[0m
2018-11-15T14:24:46.210369546Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:46.210374375Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}] [32m+0ms[0m
2018-11-15T14:24:46.210442159Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):024:0> \"}]"] [33m+150ms[0m
2018-11-15T14:24:46.210450156Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}]) [34m+12ms[0m
2018-11-15T14:24:46.210454385Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:46.210457834Z    [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):024:0> "}]" [33m+12ms[0m
2018-11-15T14:24:46.290038610Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+79ms[0m
2018-11-15T14:24:46.290197514Z    [34;1mengine:socket [0mpacket [34m+79ms[0m
2018-11-15T14:24:46.290207154Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+80ms[0m
2018-11-15T14:24:46.290285515Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+92ms[0m
2018-11-15T14:24:46.290293586Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:46.290404641Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:46.290416317Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+80ms[0m
2018-11-15T14:24:46.290513845Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.290536189Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:46.367121556Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"32"}]" [33m+77ms[0m
2018-11-15T14:24:46.367156562Z    [34;1mengine:socket [0mpacket [34m+77ms[0m
2018-11-15T14:24:46.367277421Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"32"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [32m+77ms[0m
2018-11-15T14:24:46.367287512Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [36m+77ms[0m
2018-11-15T14:24:46.367367104Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"32"}] [36m+0ms[0m
2018-11-15T14:24:46.367374953Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"32"}] [36m+0ms[0m
2018-11-15T14:24:46.367482136Z    [32;1mserver [0m  ["lineChanged"] { line: 32 } [32m+77ms[0m
2018-11-15T14:24:46.367490481Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.367573549Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} as 2["syncLine",{"line":"32"}] [32m+0ms[0m
2018-11-15T14:24:46.372823754Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:24:46.372843284Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:46.372933101Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
2018-11-15T14:24:46.373173001Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
2018-11-15T14:24:46.373184562Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.373188771Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:46.373247818Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:24:46.373278798Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.373299117Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:46.373537609Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"32"}]" [33m+1ms[0m
2018-11-15T14:24:46.373547801Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:46.373671934Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"32"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [32m+0ms[0m
2018-11-15T14:24:46.373753216Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [36m+0ms[0m
2018-11-15T14:24:46.373760621Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"32"}] [36m+0ms[0m
2018-11-15T14:24:46.373836465Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"32"}] [36m+0ms[0m
2018-11-15T14:24:46.373843499Z    [32;1mserver [0m  ["evaluate"] { code: 32 } [32m+0ms[0m
2018-11-15T14:24:46.374491460Z    [32;1mRepl [0m[bufferWrite(string = "32", bufferInterval = 5, write = true)] [32m+163ms[0m
2018-11-15T14:24:46.374502978Z    [32;1mRepl [0m  this.process.write('32' + '\n') [32m+0ms[0m
2018-11-15T14:24:46.374506669Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:46.374510109Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:46.374558249Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:46.374601903Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:46.374605955Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:46.374609407Z        return result !== '';
2018-11-15T14:24:46.374612484Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:46.374615764Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:46.374619304Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.374622607Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.374625779Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.374629034Z          if (condFunc()) {
2018-11-15T14:24:46.374663627Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.374667725Z            return resolve(value);
2018-11-15T14:24:46.374670901Z          }
2018-11-15T14:24:46.374701470Z          setTimeout(wait, interval);
2018-11-15T14:24:46.374705506Z        } [32m+0ms[0m
2018-11-15T14:24:46.374708775Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:46.374719526Z    [32;1mRepl [0m  [concatResult(data = 32
2018-11-15T14:24:46.374723138Z  => 32
2018-11-15T14:24:46.374762927Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:46.374767963Z    [32;1mRepl [0m  [concatResult(data = irb(main):025:0> )] result: "32
2018-11-15T14:24:46.374771549Z  => 32
2018-11-15T14:24:46.374774767Z  " [32m+0ms[0m
2018-11-15T14:24:46.374827231Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.374833443Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.374836623Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.374839884Z          if (condFunc()) {
2018-11-15T14:24:46.374842970Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.374846471Z            return resolve(value);
2018-11-15T14:24:46.374849554Z          }
2018-11-15T14:24:46.374852612Z          setTimeout(wait, interval);
2018-11-15T14:24:46.374855661Z        } [32m+0ms[0m
2018-11-15T14:24:46.374858807Z    [32;1mRepl [0m  [isDataReceived()] result: "32
2018-11-15T14:24:46.374862142Z  => 32
2018-11-15T14:24:46.374865185Z  irb(main):025:0> " [32m+0ms[0m
2018-11-15T14:24:46.374868444Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:46.374872177Z    [32;1mRepl [0m`let currResult = result` //==> "32
2018-11-15T14:24:46.374875535Z  => 32
2018-11-15T14:24:46.374878534Z  irb(main):025:0> " [32m+0ms[0m
2018-11-15T14:24:46.374881831Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:46.380074483Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:46.380117557Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:46.380225723Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:24:46.380233227Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:46.380236754Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:46.380240228Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:46.380243421Z        return result += data;
2018-11-15T14:24:46.380246589Z      })] [32m+0ms[0m
2018-11-15T14:24:46.380249747Z    [32;1mRepl [0m  resolve(result = "32
2018-11-15T14:24:46.380314032Z  => 32
2018-11-15T14:24:46.380320194Z  irb(main):025:0> ") [32m+0ms[0m
2018-11-15T14:24:46.380344485Z    [32;1mserver [0m  [emitOutput] output: 32
2018-11-15T14:24:46.380349928Z  => 32
2018-11-15T14:24:46.380353115Z  irb(main):025:0>  [32m+7ms[0m
2018-11-15T14:24:46.380468380Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:46.380523290Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}],"nsp":"/"} as 2["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}] [32m+0ms[0m
2018-11-15T14:24:46.380612379Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"32\\r\\n=> 32\\r\\nirb(main):025:0> \"}]"] [33m+170ms[0m
2018-11-15T14:24:46.380732238Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}]) [34m+7ms[0m
2018-11-15T14:24:46.380739476Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:46.380752345Z    [33;1mengine:ws [0mwriting "42["output",{"output":"32\r\n=> 32\r\nirb(main):025:0> "}]" [33m+7ms[0m
2018-11-15T14:24:46.391009356Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+10ms[0m
2018-11-15T14:24:46.391080628Z    [34;1mengine:socket [0mpacket [34m+10ms[0m
2018-11-15T14:24:46.391211276Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+10ms[0m
2018-11-15T14:24:46.391219918Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+18ms[0m
2018-11-15T14:24:46.391271482Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:46.391275478Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:46.391324692Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+11ms[0m
2018-11-15T14:24:46.391378254Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.391430945Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:46.448978249Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+58ms[0m
2018-11-15T14:24:46.449030492Z    [34;1mengine:socket [0mpacket [34m+58ms[0m
2018-11-15T14:24:46.449178205Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+57ms[0m
2018-11-15T14:24:46.449558145Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+58ms[0m
2018-11-15T14:24:46.449725232Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+0ms[0m
2018-11-15T14:24:46.449738531Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+0ms[0m
2018-11-15T14:24:46.449745939Z    [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+58ms[0m
2018-11-15T14:24:46.449976933Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.450003421Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
2018-11-15T14:24:46.500909848Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+52ms[0m
2018-11-15T14:24:46.500937777Z    [34;1mengine:socket [0mpacket [34m+52ms[0m
2018-11-15T14:24:46.501171139Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+51ms[0m
2018-11-15T14:24:46.501327552Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+52ms[0m
2018-11-15T14:24:46.501399249Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.501599686Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.501609678Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+52ms[0m
2018-11-15T14:24:46.501821859Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.501840139Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:46.505802521Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"13"}]" [33m+5ms[0m
2018-11-15T14:24:46.505817775Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:46.505984564Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"13"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [32m+4ms[0m
2018-11-15T14:24:46.506115248Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [36m+4ms[0m
2018-11-15T14:24:46.506137072Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"13"}] [36m+0ms[0m
2018-11-15T14:24:46.506188069Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"13"}] [36m+1ms[0m
2018-11-15T14:24:46.506214906Z    [32;1mserver [0m  ["evaluate"] { code: 13 } [32m+5ms[0m
2018-11-15T14:24:46.506372638Z    [32;1mRepl [0m[bufferWrite(string = "13", bufferInterval = 5, write = true)] [32m+126ms[0m
2018-11-15T14:24:46.506380545Z    [32;1mRepl [0m  this.process.write('13' + '\n') [32m+0ms[0m
2018-11-15T14:24:46.506384202Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:46.506459493Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:46.506523556Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:46.507106805Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:46.507117932Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:46.507121691Z        return result !== '';
2018-11-15T14:24:46.507124794Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:46.507128323Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:46.507131908Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.507135122Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.507138278Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.507141912Z          if (condFunc()) {
2018-11-15T14:24:46.507145082Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.507148529Z            return resolve(value);
2018-11-15T14:24:46.507151590Z          }
2018-11-15T14:24:46.507154627Z          setTimeout(wait, interval);
2018-11-15T14:24:46.507167762Z        } [32m+0ms[0m
2018-11-15T14:24:46.507171692Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:46.507175104Z    [32;1mRepl [0m  [concatResult(data = 13
2018-11-15T14:24:46.507178332Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:46.507181633Z    [32;1mRepl [0m  [concatResult(data = => 13
2018-11-15T14:24:46.507184982Z  )] result: "13
2018-11-15T14:24:46.507188132Z  " [32m+0ms[0m
2018-11-15T14:24:46.507272933Z    [32;1mRepl [0m  [concatResult(data = irb(main):026:0> )] result: "13
2018-11-15T14:24:46.507290478Z  => 13
2018-11-15T14:24:46.507301704Z  " [32m+1ms[0m
2018-11-15T14:24:46.508294237Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.508322139Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.508326871Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.508330322Z          if (condFunc()) {
2018-11-15T14:24:46.508333407Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.508336948Z            return resolve(value);
2018-11-15T14:24:46.508340124Z          }
2018-11-15T14:24:46.508343158Z          setTimeout(wait, interval);
2018-11-15T14:24:46.508355558Z        } [32m+1ms[0m
2018-11-15T14:24:46.508464796Z    [32;1mRepl [0m  [isDataReceived()] result: "13
2018-11-15T14:24:46.508474037Z  => 13
2018-11-15T14:24:46.508477476Z  irb(main):026:0> " [32m+0ms[0m
2018-11-15T14:24:46.508480799Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:46.508484497Z    [32;1mRepl [0m`let currResult = result` //==> "13
2018-11-15T14:24:46.508487953Z  => 13
2018-11-15T14:24:46.508491311Z  irb(main):026:0> " [32m+0ms[0m
2018-11-15T14:24:46.508494718Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:46.513657065Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:46.513774578Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:46.513783442Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:46.513897240Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:46.513905115Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:46.513908851Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:46.513912051Z        return result += data;
2018-11-15T14:24:46.513915199Z      })] [32m+0ms[0m
2018-11-15T14:24:46.513918502Z    [32;1mRepl [0m  resolve(result = "13
2018-11-15T14:24:46.513922176Z  => 13
2018-11-15T14:24:46.513984927Z  irb(main):026:0> ") [32m+0ms[0m
2018-11-15T14:24:46.514015169Z    [32;1mserver [0m  [emitOutput] output: 13
2018-11-15T14:24:46.514020852Z  => 13
2018-11-15T14:24:46.514023994Z  irb(main):026:0>  [32m+7ms[0m
2018-11-15T14:24:46.514161049Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:46.514268300Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}],"nsp":"/"} as 2["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}] [32m+1ms[0m
2018-11-15T14:24:46.514410941Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"13\\r\\n=> 13\\r\\nirb(main):026:0> \"}]"] [33m+134ms[0m
2018-11-15T14:24:46.514425816Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}]) [34m+9ms[0m
2018-11-15T14:24:46.514435632Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:46.514441162Z    [33;1mengine:ws [0mwriting "42["output",{"output":"13\r\n=> 13\r\nirb(main):026:0> "}]" [33m+9ms[0m
2018-11-15T14:24:46.567914399Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+53ms[0m
2018-11-15T14:24:46.568119092Z    [34;1mengine:socket [0mpacket [34m+53ms[0m
2018-11-15T14:24:46.568136118Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+53ms[0m
2018-11-15T14:24:46.568253718Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+62ms[0m
2018-11-15T14:24:46.568435975Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:46.568445942Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:46.570945919Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+57ms[0m
2018-11-15T14:24:46.571195572Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+3ms[0m
2018-11-15T14:24:46.571293290Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
2018-11-15T14:24:46.633896126Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+66ms[0m
2018-11-15T14:24:46.633940969Z    [34;1mengine:socket [0mpacket [34m+66ms[0m
2018-11-15T14:24:46.634208945Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+62ms[0m
2018-11-15T14:24:46.634377569Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+66ms[0m
2018-11-15T14:24:46.634510303Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+0ms[0m
2018-11-15T14:24:46.634603646Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+0ms[0m
2018-11-15T14:24:46.634754489Z    [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+64ms[0m
2018-11-15T14:24:46.634922362Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.635052899Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
2018-11-15T14:24:46.698127064Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+64ms[0m
2018-11-15T14:24:46.698202928Z    [34;1mengine:socket [0mpacket [34m+64ms[0m
2018-11-15T14:24:46.698320482Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+64ms[0m
2018-11-15T14:24:46.698438957Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+64ms[0m
2018-11-15T14:24:46.698600604Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.698610987Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:46.698705835Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+64ms[0m
2018-11-15T14:24:46.698868766Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.699065483Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:46.703173580Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"13"}]" [33m+5ms[0m
2018-11-15T14:24:46.703188163Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:46.703304776Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"13"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [32m+5ms[0m
2018-11-15T14:24:46.703463797Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"13"}]} [36m+5ms[0m
2018-11-15T14:24:46.703473647Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"13"}] [36m+0ms[0m
2018-11-15T14:24:46.703546218Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"13"}] [36m+0ms[0m
2018-11-15T14:24:46.703719894Z    [32;1mserver [0m  ["evaluate"] { code: 13 } [32m+5ms[0m
2018-11-15T14:24:46.703788412Z    [32;1mRepl [0m[bufferWrite(string = "13", bufferInterval = 5, write = true)] [32m+190ms[0m
2018-11-15T14:24:46.703807614Z    [32;1mRepl [0m  this.process.write('13' + '\n') [32m+0ms[0m
2018-11-15T14:24:46.703811720Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:46.704398574Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:46.704409808Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:46.704413629Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:46.704416969Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:46.704420420Z        return result !== '';
2018-11-15T14:24:46.704423742Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:46.704427035Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:46.704430492Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.704433714Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.704436940Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.704457099Z          if (condFunc()) {
2018-11-15T14:24:46.704461134Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.704464532Z            return resolve(value);
2018-11-15T14:24:46.704467717Z          }
2018-11-15T14:24:46.704470723Z          setTimeout(wait, interval);
2018-11-15T14:24:46.704474212Z        } [32m+1ms[0m
2018-11-15T14:24:46.704477366Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:46.704481125Z    [32;1mRepl [0m  [concatResult(data = 13
2018-11-15T14:24:46.704484539Z  => 13
2018-11-15T14:24:46.704487740Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:46.704584553Z    [32;1mRepl [0m  [concatResult(data = irb(main):027:0> )] result: "13
2018-11-15T14:24:46.704593059Z  => 13
2018-11-15T14:24:46.704596268Z  " [32m+0ms[0m
2018-11-15T14:24:46.705613281Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:46.705624990Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:46.705628523Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:46.705633707Z          if (condFunc()) {
2018-11-15T14:24:46.705636907Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:46.705647427Z            return resolve(value);
2018-11-15T14:24:46.705650878Z          }
2018-11-15T14:24:46.705684112Z          setTimeout(wait, interval);
2018-11-15T14:24:46.705689465Z        } [32m+1ms[0m
2018-11-15T14:24:46.705692729Z    [32;1mRepl [0m  [isDataReceived()] result: "13
2018-11-15T14:24:46.705696156Z  => 13
2018-11-15T14:24:46.705699347Z  irb(main):027:0> " [32m+0ms[0m
2018-11-15T14:24:46.705702694Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:46.705781483Z    [32;1mRepl [0m`let currResult = result` //==> "13
2018-11-15T14:24:46.705789399Z  => 13
2018-11-15T14:24:46.705792637Z  irb(main):027:0> " [32m+0ms[0m
2018-11-15T14:24:46.705795949Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:46.710948565Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:46.710964072Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:46.711080899Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:46.711313367Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:46.711395273Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:46.711400706Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:46.711412737Z        return result += data;
2018-11-15T14:24:46.711416339Z      })] [32m+0ms[0m
2018-11-15T14:24:46.711419793Z    [32;1mRepl [0m  resolve(result = "13
2018-11-15T14:24:46.711423252Z  => 13
2018-11-15T14:24:46.711447948Z  irb(main):027:0> ") [32m+0ms[0m
2018-11-15T14:24:46.711452615Z    [32;1mserver [0m  [emitOutput] output: 13
2018-11-15T14:24:46.711456086Z  => 13
2018-11-15T14:24:46.711459260Z  irb(main):027:0>  [32m+7ms[0m
2018-11-15T14:24:46.711464440Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:46.711469441Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}],"nsp":"/"} as 2["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}] [32m+0ms[0m
2018-11-15T14:24:46.711474628Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"13\\r\\n=> 13\\r\\nirb(main):027:0> \"}]"] [33m+197ms[0m
2018-11-15T14:24:46.711487793Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}]) [34m+8ms[0m
2018-11-15T14:24:46.711498228Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:46.711502241Z    [33;1mengine:ws [0mwriting "42["output",{"output":"13\r\n=> 13\r\nirb(main):027:0> "}]" [33m+9ms[0m
2018-11-15T14:24:46.754650060Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+43ms[0m
2018-11-15T14:24:46.754700900Z    [34;1mengine:socket [0mpacket [34m+43ms[0m
2018-11-15T14:24:46.754859076Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+43ms[0m
2018-11-15T14:24:46.754870559Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+51ms[0m
2018-11-15T14:24:46.754995591Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:46.755004835Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:46.755015460Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+44ms[0m
2018-11-15T14:24:46.755162539Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.755175403Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+1ms[0m
2018-11-15T14:24:46.767145929Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+12ms[0m
2018-11-15T14:24:46.767193913Z    [34;1mengine:socket [0mpacket [34m+12ms[0m
2018-11-15T14:24:46.767346735Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+12ms[0m
2018-11-15T14:24:46.767740155Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+13ms[0m
2018-11-15T14:24:46.767939545Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:24:46.767953873Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:24:46.767960633Z    [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+13ms[0m
2018-11-15T14:24:46.768104743Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.768117966Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+0ms[0m
2018-11-15T14:24:46.841777389Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+75ms[0m
2018-11-15T14:24:46.841851291Z    [34;1mengine:socket [0mpacket [34m+75ms[0m
2018-11-15T14:24:46.841929851Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+74ms[0m
2018-11-15T14:24:46.842073952Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+74ms[0m
2018-11-15T14:24:46.842083478Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
2018-11-15T14:24:46.842220982Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+1ms[0m
2018-11-15T14:24:46.842228389Z    [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+75ms[0m
2018-11-15T14:24:46.842343708Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:46.842352025Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
2018-11-15T14:24:46.974008629Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2131"}]" [33m+132ms[0m
2018-11-15T14:24:46.974080028Z    [34;1mengine:socket [0mpacket [34m+132ms[0m
2018-11-15T14:24:46.974165919Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2131"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131"}]} [32m+132ms[0m
2018-11-15T14:24:46.974449984Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131"}]} [36m+132ms[0m
2018-11-15T14:24:46.974487445Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2131"}] [36m+0ms[0m
2018-11-15T14:24:46.974522565Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2131"}] [36m+0ms[0m
2018-11-15T14:24:46.974531401Z    [32;1mserver [0m  ["lineChanged"] { line: 2131 } [32m+132ms[0m
2018-11-15T14:24:46.974742493Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2131"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:46.974833070Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2131"}],"nsp":"/"} as 2["syncLine",{"line":"2131"}] [32m+0ms[0m
2018-11-15T14:24:47.060646237Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21313"}]" [33m+86ms[0m
2018-11-15T14:24:47.060686755Z    [34;1mengine:socket [0mpacket [34m+87ms[0m
2018-11-15T14:24:47.060796493Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21313"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21313"}]} [32m+86ms[0m
2018-11-15T14:24:47.060831058Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21313"}]} [36m+86ms[0m
2018-11-15T14:24:47.060838631Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21313"}] [36m+0ms[0m
2018-11-15T14:24:47.060993181Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21313"}] [36m+0ms[0m
2018-11-15T14:24:47.061006245Z    [32;1mserver [0m  ["lineChanged"] { line: 21313 } [32m+86ms[0m
2018-11-15T14:24:47.061013734Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21313"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:47.061020110Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21313"}],"nsp":"/"} as 2["syncLine",{"line":"21313"}] [32m+0ms[0m
2018-11-15T14:24:47.210929969Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213131"}]" [33m+151ms[0m
2018-11-15T14:24:47.211006370Z    [34;1mengine:socket [0mpacket [34m+150ms[0m
2018-11-15T14:24:47.211197535Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213131"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213131"}]} [32m+150ms[0m
2018-11-15T14:24:47.211213620Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213131"}]} [36m+150ms[0m
2018-11-15T14:24:47.211221398Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213131"}] [36m+0ms[0m
2018-11-15T14:24:47.211227688Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213131"}] [36m+0ms[0m
2018-11-15T14:24:47.211257778Z    [32;1mserver [0m  ["lineChanged"] { line: 213131 } [32m+150ms[0m
2018-11-15T14:24:47.211263647Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213131"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:47.211392387Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213131"}],"nsp":"/"} as 2["syncLine",{"line":"213131"}] [32m+0ms[0m
2018-11-15T14:24:47.244454953Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2131312"}]" [33m+34ms[0m
2018-11-15T14:24:47.244535983Z    [34;1mengine:socket [0mpacket [34m+34ms[0m
2018-11-15T14:24:47.244678385Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2131312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131312"}]} [32m+33ms[0m
2018-11-15T14:24:47.244690604Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2131312"}]} [36m+34ms[0m
2018-11-15T14:24:47.244739755Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2131312"}] [36m+0ms[0m
2018-11-15T14:24:47.244750730Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2131312"}] [36m+0ms[0m
2018-11-15T14:24:47.244923429Z    [32;1mserver [0m  ["lineChanged"] { line: 2131312 } [32m+34ms[0m
2018-11-15T14:24:47.244940515Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2131312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:47.244945329Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2131312"}],"nsp":"/"} as 2["syncLine",{"line":"2131312"}] [32m+0ms[0m
2018-11-15T14:24:47.268264491Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+23ms[0m
2018-11-15T14:24:47.268362286Z    [34;1mengine:socket [0mpacket [34m+24ms[0m
2018-11-15T14:24:47.268502461Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+24ms[0m
2018-11-15T14:24:47.268512525Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+24ms[0m
2018-11-15T14:24:47.268517021Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.268520930Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.268524869Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+24ms[0m
2018-11-15T14:24:47.268653816Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:47.268663799Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:47.273659645Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2131312"}]" [33m+6ms[0m
2018-11-15T14:24:47.273678911Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:47.273776725Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2131312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2131312"}]} [32m+5ms[0m
2018-11-15T14:24:47.273802318Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2131312"}]} [36m+5ms[0m
2018-11-15T14:24:47.273806867Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2131312"}] [36m+0ms[0m
2018-11-15T14:24:47.274825963Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2131312"}] [36m+0ms[0m
2018-11-15T14:24:47.274852456Z    [32;1mserver [0m  ["evaluate"] { code: 2131312 } [32m+5ms[0m
2018-11-15T14:24:47.274857325Z    [32;1mRepl [0m[bufferWrite(string = "2131312", bufferInterval = 5, write = true)] [32m+563ms[0m
2018-11-15T14:24:47.274861205Z    [32;1mRepl [0m  this.process.write('2131312' + '\n') [32m+0ms[0m
2018-11-15T14:24:47.274903001Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:47.274909652Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:47.274913215Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:47.274916712Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:47.274920106Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:47.274923637Z        return result !== '';
2018-11-15T14:24:47.274926760Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:47.274930179Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:47.274933680Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.274937034Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.274940418Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.274943621Z          if (condFunc()) {
2018-11-15T14:24:47.274946920Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.274964795Z            return resolve(value);
2018-11-15T14:24:47.274968141Z          }
2018-11-15T14:24:47.274971234Z          setTimeout(wait, interval);
2018-11-15T14:24:47.274974386Z        } [32m+0ms[0m
2018-11-15T14:24:47.274977673Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:47.274981276Z    [32;1mRepl [0m  [concatResult(data = 2131312
2018-11-15T14:24:47.274984505Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:47.274987738Z    [32;1mRepl [0m  [concatResult(data = => 2131312
2018-11-15T14:24:47.274991120Z  )] result: "2131312
2018-11-15T14:24:47.274994353Z  " [32m+0ms[0m
2018-11-15T14:24:47.275088911Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.275097573Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.275100868Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.275104074Z          if (condFunc()) {
2018-11-15T14:24:47.275113632Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.275117351Z            return resolve(value);
2018-11-15T14:24:47.275120463Z          }
2018-11-15T14:24:47.275123583Z          setTimeout(wait, interval);
2018-11-15T14:24:47.275126738Z        } [32m+0ms[0m
2018-11-15T14:24:47.275129814Z    [32;1mRepl [0m  [isDataReceived()] result: "2131312
2018-11-15T14:24:47.275133172Z  => 2131312
2018-11-15T14:24:47.275151680Z  " [32m+0ms[0m
2018-11-15T14:24:47.275156093Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:47.275159719Z    [32;1mRepl [0m`let currResult = result` //==> "2131312
2018-11-15T14:24:47.275163292Z  => 2131312
2018-11-15T14:24:47.275166354Z  " [32m+0ms[0m
2018-11-15T14:24:47.275169637Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:47.275173340Z    [32;1mRepl [0m  [concatResult(data = irb(main):028:0> )] result: "2131312
2018-11-15T14:24:47.275176830Z  => 2131312
2018-11-15T14:24:47.275179933Z  " [32m+0ms[0m
2018-11-15T14:24:47.280785553Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:47.280805484Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "2131312
2018-11-15T14:24:47.280809959Z  => 2131312
2018-11-15T14:24:47.280813247Z  ", result: "2131312
2018-11-15T14:24:47.280816551Z  => 2131312
2018-11-15T14:24:47.280819794Z  irb(main):028:0> " [32m+0ms[0m
2018-11-15T14:24:47.286112588Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:47.286168885Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:47.286174061Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:47.286357257Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:47.286364798Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:47.286368608Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:47.286372020Z        return result += data;
2018-11-15T14:24:47.286468536Z      })] [32m+1ms[0m
2018-11-15T14:24:47.286476557Z    [32;1mRepl [0m  resolve(result = "2131312
2018-11-15T14:24:47.286480306Z  => 2131312
2018-11-15T14:24:47.286483529Z  irb(main):028:0> ") [32m+0ms[0m
2018-11-15T14:24:47.286590858Z    [32;1mserver [0m  [emitOutput] output: 2131312
2018-11-15T14:24:47.286624102Z  => 2131312
2018-11-15T14:24:47.286627937Z  irb(main):028:0>  [32m+13ms[0m
2018-11-15T14:24:47.286632869Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}],"nsp":"/"} [32m+13ms[0m
2018-11-15T14:24:47.286638289Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}],"nsp":"/"} as 2["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}] [32m+0ms[0m
2018-11-15T14:24:47.286643343Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2131312\\r\\n=> 2131312\\r\\nirb(main):028:0> \"}]"] [33m+575ms[0m
2018-11-15T14:24:47.286648059Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}]) [34m+13ms[0m
2018-11-15T14:24:47.286652411Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:47.286655791Z    [33;1mengine:ws [0mwriting "42["output",{"output":"2131312\r\n=> 2131312\r\nirb(main):028:0> "}]" [33m+13ms[0m
2018-11-15T14:24:47.292485915Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+6ms[0m
2018-11-15T14:24:47.292762723Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:47.292772671Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+6ms[0m
2018-11-15T14:24:47.292783714Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+19ms[0m
2018-11-15T14:24:47.292791449Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:47.292797991Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:47.292855498Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+6ms[0m
2018-11-15T14:24:47.292882665Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:47.292890822Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:47.452541985Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+160ms[0m
2018-11-15T14:24:47.452593696Z    [34;1mengine:socket [0mpacket [34m+160ms[0m
2018-11-15T14:24:47.452600326Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+160ms[0m
2018-11-15T14:24:47.452725020Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+160ms[0m
2018-11-15T14:24:47.452734336Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.452738903Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.452767540Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+160ms[0m
2018-11-15T14:24:47.452771273Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:47.452775464Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:47.458233880Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
2018-11-15T14:24:47.458255123Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:47.458345789Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
2018-11-15T14:24:47.458441026Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
2018-11-15T14:24:47.458465657Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:47.458469708Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:47.459021154Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
2018-11-15T14:24:47.459032821Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+172ms[0m
2018-11-15T14:24:47.459039100Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:47.459044619Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:47.459049888Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:47.459056630Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:47.459061820Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:47.459110621Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:47.459114259Z        return result !== '';
2018-11-15T14:24:47.459125714Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:47.459139430Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:47.459143341Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.459146507Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.459168410Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.459172751Z          if (condFunc()) {
2018-11-15T14:24:47.459175919Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.459179326Z            return resolve(value);
2018-11-15T14:24:47.459182474Z          }
2018-11-15T14:24:47.459185497Z          setTimeout(wait, interval);
2018-11-15T14:24:47.459188714Z        } [32m+0ms[0m
2018-11-15T14:24:47.459191909Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:47.459195366Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:47.459198614Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:47.459201785Z    [32;1mRepl [0m  [concatResult(data = => 3
2018-11-15T14:24:47.459205181Z  )] result: "3
2018-11-15T14:24:47.459208286Z  " [32m+0ms[0m
2018-11-15T14:24:47.459294895Z    [32;1mRepl [0m  [concatResult(data = irb(main):029:0> )] result: "3
2018-11-15T14:24:47.459302999Z  => 3
2018-11-15T14:24:47.459306246Z  " [32m+0ms[0m
2018-11-15T14:24:47.460262309Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.460272413Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.460275915Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.460279147Z          if (condFunc()) {
2018-11-15T14:24:47.460282189Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.460285683Z            return resolve(value);
2018-11-15T14:24:47.460288767Z          }
2018-11-15T14:24:47.460291995Z          setTimeout(wait, interval);
2018-11-15T14:24:47.460295166Z        } [32m+2ms[0m
2018-11-15T14:24:47.460396881Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:47.460404218Z  => 3
2018-11-15T14:24:47.460407429Z  irb(main):029:0> " [32m+0ms[0m
2018-11-15T14:24:47.460411650Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:47.460421645Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:47.460452072Z  => 3
2018-11-15T14:24:47.460462967Z  irb(main):029:0> " [32m+0ms[0m
2018-11-15T14:24:47.460466564Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:47.465952245Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:47.465971246Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:47.466016810Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:47.466021356Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:47.466024920Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:47.466028464Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:47.466037796Z        return result += data;
2018-11-15T14:24:47.466054714Z      })] [32m+0ms[0m
2018-11-15T14:24:47.466080565Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:47.466085624Z  => 3
2018-11-15T14:24:47.466088829Z  irb(main):029:0> ") [32m+0ms[0m
2018-11-15T14:24:47.466092287Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:47.466096064Z  => 3
2018-11-15T14:24:47.466100820Z  irb(main):029:0>  [32m+7ms[0m
2018-11-15T14:24:47.466104788Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:47.466109821Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}] [32m+0ms[0m
2018-11-15T14:24:47.466115170Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):029:0> \"}]"] [33m+179ms[0m
2018-11-15T14:24:47.466119887Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}]) [34m+7ms[0m
2018-11-15T14:24:47.466124114Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:47.466127520Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):029:0> "}]" [33m+7ms[0m
2018-11-15T14:24:47.581654602Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+115ms[0m
2018-11-15T14:24:47.581683991Z    [34;1mengine:socket [0mpacket [34m+115ms[0m
2018-11-15T14:24:47.581689389Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+115ms[0m
2018-11-15T14:24:47.581706297Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+122ms[0m
2018-11-15T14:24:47.588496483Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.588596279Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+8ms[0m
2018-11-15T14:24:47.588644966Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+123ms[0m
2018-11-15T14:24:47.588716293Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:47.588725011Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:47.589126611Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+8ms[0m
2018-11-15T14:24:47.589135684Z    [34;1mengine:socket [0mpacket [34m+9ms[0m
2018-11-15T14:24:47.589253544Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
2018-11-15T14:24:47.589397914Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
2018-11-15T14:24:47.589410761Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:47.589417466Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:47.589832293Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
2018-11-15T14:24:47.589844103Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+124ms[0m
2018-11-15T14:24:47.589848155Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:47.589851704Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:47.589855182Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:47.589858752Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:47.589862034Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:47.589881067Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:47.589885641Z        return result !== '';
2018-11-15T14:24:47.589888793Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:47.589892192Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:47.589903742Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.589907261Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.589910484Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.589913724Z          if (condFunc()) {
2018-11-15T14:24:47.589916832Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.589920307Z            return resolve(value);
2018-11-15T14:24:47.589923472Z          }
2018-11-15T14:24:47.589926461Z          setTimeout(wait, interval);
2018-11-15T14:24:47.589929634Z        } [32m+0ms[0m
2018-11-15T14:24:47.589932840Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:47.590008491Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:47.590015847Z  irb(main):030:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:47.594969425Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.594989333Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.594997286Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.595047748Z          if (condFunc()) {
2018-11-15T14:24:47.595057493Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.595062658Z            return resolve(value);
2018-11-15T14:24:47.595067279Z          }
2018-11-15T14:24:47.595071644Z          setTimeout(wait, interval);
2018-11-15T14:24:47.595077911Z        } [32m+5ms[0m
2018-11-15T14:24:47.595084189Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:47.595109688Z  irb(main):030:0> " [32m+0ms[0m
2018-11-15T14:24:47.595118071Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:47.595125212Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:47.595130201Z  irb(main):030:0> " [32m+0ms[0m
2018-11-15T14:24:47.595135290Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:47.600721881Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:47.600762149Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:47.600768106Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:47.600771863Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:47.600787087Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:47.600790977Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:47.600794282Z        return result += data;
2018-11-15T14:24:47.600797474Z      })] [32m+0ms[0m
2018-11-15T14:24:47.600800780Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:47.600804207Z  irb(main):030:0> ") [32m+0ms[0m
2018-11-15T14:24:47.600810015Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:47.600813437Z  irb(main):030:0>  [32m+11ms[0m
2018-11-15T14:24:47.600819061Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:47.600839706Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):030:0> "}] [32m+0ms[0m
2018-11-15T14:24:47.600845386Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):030:0> \"}]"] [33m+135ms[0m
2018-11-15T14:24:47.600849725Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):030:0> "}]) [34m+11ms[0m
2018-11-15T14:24:47.600853775Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:47.600857301Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):030:0> "}]" [33m+12ms[0m
2018-11-15T14:24:47.772448717Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+171ms[0m
2018-11-15T14:24:47.772477486Z    [34;1mengine:socket [0mpacket [34m+171ms[0m
2018-11-15T14:24:47.772530861Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+171ms[0m
2018-11-15T14:24:47.772536040Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+183ms[0m
2018-11-15T14:24:47.772540512Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:47.772544632Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:47.772548406Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+172ms[0m
2018-11-15T14:24:47.772552203Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:47.772556278Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:47.786711146Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+15ms[0m
2018-11-15T14:24:47.786736382Z    [34;1mengine:socket [0mpacket [34m+15ms[0m
2018-11-15T14:24:47.786741146Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+14ms[0m
2018-11-15T14:24:47.786745885Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+14ms[0m
2018-11-15T14:24:47.786750068Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.786753789Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.786757442Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+14ms[0m
2018-11-15T14:24:47.786760931Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:47.786764985Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:47.786843222Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+0ms[0m
2018-11-15T14:24:47.786850425Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:24:47.788235895Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+0ms[0m
2018-11-15T14:24:47.788252421Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+0ms[0m
2018-11-15T14:24:47.788257740Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:47.788261841Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:47.788265604Z    [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+1ms[0m
2018-11-15T14:24:47.788269423Z    [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+187ms[0m
2018-11-15T14:24:47.788273304Z    [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
2018-11-15T14:24:47.788333464Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:47.788337160Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:47.788340884Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:47.788384799Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:47.788389735Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:47.788393045Z        return result !== '';
2018-11-15T14:24:47.788396181Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:47.788399463Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:47.788402941Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.788406179Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.788409433Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.788412640Z          if (condFunc()) {
2018-11-15T14:24:47.788415919Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.788419393Z            return resolve(value);
2018-11-15T14:24:47.788422502Z          }
2018-11-15T14:24:47.788427964Z          setTimeout(wait, interval);
2018-11-15T14:24:47.788431236Z        } [32m+0ms[0m
2018-11-15T14:24:47.788434475Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:47.788438006Z    [32;1mRepl [0m  [concatResult(data = 1
2018-11-15T14:24:47.788454201Z  => 1
2018-11-15T14:24:47.788458153Z  irb(main):031:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:47.789595246Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.789607483Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.789611148Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.789614373Z          if (condFunc()) {
2018-11-15T14:24:47.789617573Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.789621057Z            return resolve(value);
2018-11-15T14:24:47.789624255Z          }
2018-11-15T14:24:47.789627313Z          setTimeout(wait, interval);
2018-11-15T14:24:47.789630460Z        } [32m+1ms[0m
2018-11-15T14:24:47.789633762Z    [32;1mRepl [0m  [isDataReceived()] result: "1
2018-11-15T14:24:47.789653507Z  => 1
2018-11-15T14:24:47.789657756Z  irb(main):031:0> " [32m+0ms[0m
2018-11-15T14:24:47.789661678Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:47.789665316Z    [32;1mRepl [0m`let currResult = result` //==> "1
2018-11-15T14:24:47.789668767Z  => 1
2018-11-15T14:24:47.789671793Z  irb(main):031:0> " [32m+0ms[0m
2018-11-15T14:24:47.789681856Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:47.795370130Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:47.795387436Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:47.795394765Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:47.795400076Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:47.795405686Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:47.795452655Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:47.795457941Z        return result += data;
2018-11-15T14:24:47.795461463Z      })] [32m+0ms[0m
2018-11-15T14:24:47.795465036Z    [32;1mRepl [0m  resolve(result = "1
2018-11-15T14:24:47.795468472Z  => 1
2018-11-15T14:24:47.795471698Z  irb(main):031:0> ") [32m+0ms[0m
2018-11-15T14:24:47.795481195Z    [32;1mserver [0m  [emitOutput] output: 1
2018-11-15T14:24:47.795485066Z  => 1
2018-11-15T14:24:47.795488146Z  irb(main):031:0>  [32m+7ms[0m
2018-11-15T14:24:47.795491549Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:47.795531772Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}] [32m+1ms[0m
2018-11-15T14:24:47.795537724Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):031:0> \"}]"] [33m+195ms[0m
2018-11-15T14:24:47.795542245Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}]) [34m+9ms[0m
2018-11-15T14:24:47.795546527Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:47.795549929Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):031:0> "}]" [33m+9ms[0m
2018-11-15T14:24:47.805526386Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+10ms[0m
2018-11-15T14:24:47.805679490Z    [34;1mengine:socket [0mpacket [34m+10ms[0m
2018-11-15T14:24:47.806118385Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+10ms[0m
2018-11-15T14:24:47.806141760Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+19ms[0m
2018-11-15T14:24:47.806146949Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:47.806262510Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+1ms[0m
2018-11-15T14:24:47.806624569Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+12ms[0m
2018-11-15T14:24:47.806635811Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:47.806642857Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:24:47.858916563Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"23"}]" [33m+53ms[0m
2018-11-15T14:24:47.859347281Z    [34;1mengine:socket [0mpacket [34m+54ms[0m
2018-11-15T14:24:47.859615720Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"23"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [32m+53ms[0m
2018-11-15T14:24:47.859628378Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [36m+53ms[0m
2018-11-15T14:24:47.859898650Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"23"}] [36m+0ms[0m
2018-11-15T14:24:47.859909173Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"23"}] [36m+0ms[0m
2018-11-15T14:24:47.860154885Z    [32;1mserver [0m  ["lineChanged"] { line: 23 } [32m+53ms[0m
2018-11-15T14:24:47.860393405Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:47.860404445Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} as 2["syncLine",{"line":"23"}] [32m+0ms[0m
2018-11-15T14:24:47.939890931Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+81ms[0m
2018-11-15T14:24:47.939967205Z    [34;1mengine:socket [0mpacket [34m+80ms[0m
2018-11-15T14:24:47.939973488Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+79ms[0m
2018-11-15T14:24:47.940399070Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+80ms[0m
2018-11-15T14:24:47.940411178Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:47.940415497Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:47.940431377Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+81ms[0m
2018-11-15T14:24:47.940435668Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:47.940439870Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:47.945265820Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"23"}]" [33m+6ms[0m
2018-11-15T14:24:47.945450962Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:47.945699235Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"23"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [32m+5ms[0m
2018-11-15T14:24:47.945913501Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [36m+5ms[0m
2018-11-15T14:24:47.946035157Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"23"}] [36m+0ms[0m
2018-11-15T14:24:47.946223377Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"23"}] [36m+1ms[0m
2018-11-15T14:24:47.946390872Z    [32;1mserver [0m  ["evaluate"] { code: 23 } [32m+6ms[0m
2018-11-15T14:24:47.946562003Z    [32;1mRepl [0m[bufferWrite(string = "23", bufferInterval = 5, write = true)] [32m+152ms[0m
2018-11-15T14:24:47.946732097Z    [32;1mRepl [0m  this.process.write('23' + '\n') [32m+0ms[0m
2018-11-15T14:24:47.947308272Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:47.947531705Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:47.947541679Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:47.947715515Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:47.947724998Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:47.947728683Z        return result !== '';
2018-11-15T14:24:47.947731910Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:47.947894892Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:47.948061999Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.948071676Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.948075230Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.948078593Z          if (condFunc()) {
2018-11-15T14:24:47.948093334Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.948097169Z            return resolve(value);
2018-11-15T14:24:47.948100305Z          }
2018-11-15T14:24:47.948103302Z          setTimeout(wait, interval);
2018-11-15T14:24:47.948106457Z        } [32m+0ms[0m
2018-11-15T14:24:47.948259744Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:47.948543410Z    [32;1mRepl [0m  [concatResult(data = 23
2018-11-15T14:24:47.948553629Z  => 23
2018-11-15T14:24:47.948557186Z  irb(main):032:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:47.948810343Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:47.948820246Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:47.948823769Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:47.948826977Z          if (condFunc()) {
2018-11-15T14:24:47.948830093Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:47.948833616Z            return resolve(value);
2018-11-15T14:24:47.948836788Z          }
2018-11-15T14:24:47.948839790Z          setTimeout(wait, interval);
2018-11-15T14:24:47.948843019Z        } [32m+0ms[0m
2018-11-15T14:24:47.948846232Z    [32;1mRepl [0m  [isDataReceived()] result: "23
2018-11-15T14:24:47.948849982Z  => 23
2018-11-15T14:24:47.948853168Z  irb(main):032:0> " [32m+0ms[0m
2018-11-15T14:24:47.948872131Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:47.949097898Z    [32;1mRepl [0m`let currResult = result` //==> "23
2018-11-15T14:24:47.949107621Z  => 23
2018-11-15T14:24:47.949111099Z  irb(main):032:0> " [32m+0ms[0m
2018-11-15T14:24:47.949346308Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:47.954505985Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:47.954759824Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:47.954774231Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:47.954953172Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:47.954963087Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:47.954967002Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:47.954981221Z        return result += data;
2018-11-15T14:24:47.954984812Z      })] [32m+0ms[0m
2018-11-15T14:24:47.955157344Z    [32;1mRepl [0m  resolve(result = "23
2018-11-15T14:24:47.955166395Z  => 23
2018-11-15T14:24:47.955169913Z  irb(main):032:0> ") [32m+0ms[0m
2018-11-15T14:24:47.955538665Z    [32;1mserver [0m  [emitOutput] output: 23
2018-11-15T14:24:47.955548868Z  => 23
2018-11-15T14:24:47.955552344Z  irb(main):032:0>  [32m+9ms[0m
2018-11-15T14:24:47.955555680Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:24:47.955734286Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}],"nsp":"/"} as 2["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}] [32m+0ms[0m
2018-11-15T14:24:47.955957469Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"23\\r\\n=> 23\\r\\nirb(main):032:0> \"}]"] [33m+160ms[0m
2018-11-15T14:24:47.956198714Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}]) [34m+10ms[0m
2018-11-15T14:24:47.956208922Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:24:47.956484142Z    [33;1mengine:ws [0mwriting "42["output",{"output":"23\r\n=> 23\r\nirb(main):032:0> "}]" [33m+11ms[0m
2018-11-15T14:24:48.003617872Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+47ms[0m
2018-11-15T14:24:48.003756767Z    [34;1mengine:socket [0mpacket [34m+47ms[0m
2018-11-15T14:24:48.004045430Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+48ms[0m
2018-11-15T14:24:48.004311176Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+58ms[0m
2018-11-15T14:24:48.004486535Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:48.004653201Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:48.004818603Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+49ms[0m
2018-11-15T14:24:48.005012167Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.005162757Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:48.005525140Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+2ms[0m
2018-11-15T14:24:48.005535932Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:48.005745620Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+1ms[0m
2018-11-15T14:24:48.005947393Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+1ms[0m
2018-11-15T14:24:48.006083858Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:48.006260338Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
2018-11-15T14:24:48.006430510Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+2ms[0m
2018-11-15T14:24:48.006623524Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.006774005Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:48.036844736Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+31ms[0m
2018-11-15T14:24:48.036887209Z    [34;1mengine:socket [0mpacket [34m+31ms[0m
2018-11-15T14:24:48.037129148Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+30ms[0m
2018-11-15T14:24:48.037343367Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+31ms[0m
2018-11-15T14:24:48.037543781Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:48.037698408Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:48.037883885Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+31ms[0m
2018-11-15T14:24:48.038071723Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.038266569Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+1ms[0m
2018-11-15T14:24:48.199223924Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+162ms[0m
2018-11-15T14:24:48.199271979Z    [34;1mengine:socket [0mpacket [34m+163ms[0m
2018-11-15T14:24:48.199548637Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+161ms[0m
2018-11-15T14:24:48.199850250Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+162ms[0m
2018-11-15T14:24:48.200048716Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:48.200243447Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+1ms[0m
2018-11-15T14:24:48.200540709Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+163ms[0m
2018-11-15T14:24:48.200759668Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.200993982Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
2018-11-15T14:24:48.206813910Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+8ms[0m
2018-11-15T14:24:48.206973389Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:48.207208818Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+7ms[0m
2018-11-15T14:24:48.207471036Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+7ms[0m
2018-11-15T14:24:48.207484932Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:48.207690597Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:48.207702216Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+7ms[0m
2018-11-15T14:24:48.207850855Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:48.208002092Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:24:48.247761902Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+41ms[0m
2018-11-15T14:24:48.247973667Z    [34;1mengine:socket [0mpacket [34m+41ms[0m
2018-11-15T14:24:48.248271301Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+41ms[0m
2018-11-15T14:24:48.248490218Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+41ms[0m
2018-11-15T14:24:48.248633590Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:24:48.248826303Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:24:48.248983770Z    [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+41ms[0m
2018-11-15T14:24:48.249190391Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.249329201Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
2018-11-15T14:24:48.253369242Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:24:48.253579550Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:48.253844421Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+4ms[0m
2018-11-15T14:24:48.254179403Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
2018-11-15T14:24:48.254352598Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:48.254513161Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.254766929Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:24:48.254777555Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.254935383Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:48.255180019Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+2ms[0m
2018-11-15T14:24:48.255327769Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:48.255519872Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+1ms[0m
2018-11-15T14:24:48.255740459Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+1ms[0m
2018-11-15T14:24:48.255902735Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:24:48.256042511Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:24:48.256321611Z    [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+2ms[0m
2018-11-15T14:24:48.256344360Z    [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+302ms[0m
2018-11-15T14:24:48.256365114Z    [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
2018-11-15T14:24:48.257007966Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:48.257203580Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:48.257339199Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:48.257519661Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:48.257530629Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:48.257540621Z        return result !== '';
2018-11-15T14:24:48.257543910Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:48.257675550Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:48.257808619Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.257818945Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.257823856Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.257828679Z          if (condFunc()) {
2018-11-15T14:24:48.257833301Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.257848656Z            return resolve(value);
2018-11-15T14:24:48.257859827Z          }
2018-11-15T14:24:48.257864695Z          setTimeout(wait, interval);
2018-11-15T14:24:48.257869294Z        } [32m+0ms[0m
2018-11-15T14:24:48.257960482Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.258188142Z    [32;1mRepl [0m  [concatResult(data = 123123
2018-11-15T14:24:48.258197475Z  => 123123
2018-11-15T14:24:48.258200829Z  irb(main):033:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:48.259519683Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.259533374Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.259539663Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.259545813Z          if (condFunc()) {
2018-11-15T14:24:48.259569294Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.259575010Z            return resolve(value);
2018-11-15T14:24:48.259578700Z          }
2018-11-15T14:24:48.259581844Z          setTimeout(wait, interval);
2018-11-15T14:24:48.259594284Z        } [32m+1ms[0m
2018-11-15T14:24:48.259708777Z    [32;1mRepl [0m  [isDataReceived()] result: "123123
2018-11-15T14:24:48.259723702Z  => 123123
2018-11-15T14:24:48.259736363Z  irb(main):033:0> " [32m+0ms[0m
2018-11-15T14:24:48.259900738Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:48.260075337Z    [32;1mRepl [0m`let currResult = result` //==> "123123
2018-11-15T14:24:48.260084698Z  => 123123
2018-11-15T14:24:48.260088201Z  irb(main):033:0> " [32m+0ms[0m
2018-11-15T14:24:48.260286688Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:48.265467859Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:48.265635746Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:48.265798392Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:48.265966766Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:48.265982728Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:48.265997758Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:48.266003236Z        return result += data;
2018-11-15T14:24:48.266008147Z      })] [32m+0ms[0m
2018-11-15T14:24:48.266146990Z    [32;1mRepl [0m  resolve(result = "123123
2018-11-15T14:24:48.266157610Z  => 123123
2018-11-15T14:24:48.266160905Z  irb(main):033:0> ") [32m+0ms[0m
2018-11-15T14:24:48.266327135Z    [32;1mserver [0m  [emitOutput] output: 123123
2018-11-15T14:24:48.266338926Z  => 123123
2018-11-15T14:24:48.266350911Z  irb(main):033:0>  [32m+10ms[0m
2018-11-15T14:24:48.266530086Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:48.266848349Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}] [32m+0ms[0m
2018-11-15T14:24:48.266860122Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):033:0> \"}]"] [33m+311ms[0m
2018-11-15T14:24:48.266864893Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}]) [34m+11ms[0m
2018-11-15T14:24:48.267021019Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:48.267174582Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):033:0> "}]" [33m+11ms[0m
2018-11-15T14:24:48.380869318Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+114ms[0m
2018-11-15T14:24:48.381036677Z    [34;1mengine:socket [0mpacket [34m+114ms[0m
2018-11-15T14:24:48.381283667Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+115ms[0m
2018-11-15T14:24:48.381499947Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+126ms[0m
2018-11-15T14:24:48.381733188Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:48.381744334Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:48.381931298Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+115ms[0m
2018-11-15T14:24:48.382130266Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:48.382256697Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
2018-11-15T14:24:48.401983881Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+21ms[0m
2018-11-15T14:24:48.402103664Z    [34;1mengine:socket [0mpacket [34m+21ms[0m
2018-11-15T14:24:48.402376735Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+20ms[0m
2018-11-15T14:24:48.402587068Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+21ms[0m
2018-11-15T14:24:48.402696302Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.402874220Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.403039291Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+21ms[0m
2018-11-15T14:24:48.403239796Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.403478219Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:48.408346273Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+7ms[0m
2018-11-15T14:24:48.408551975Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:48.408843110Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+5ms[0m
2018-11-15T14:24:48.409041845Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+6ms[0m
2018-11-15T14:24:48.409187711Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:48.409335859Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+1ms[0m
2018-11-15T14:24:48.409579676Z    [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+7ms[0m
2018-11-15T14:24:48.409747039Z    [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+144ms[0m
2018-11-15T14:24:48.409891683Z    [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
2018-11-15T14:24:48.410669074Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:48.410897483Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:48.410998144Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:48.411235467Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:48.411251341Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:48.411257570Z        return result !== '';
2018-11-15T14:24:48.411262975Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:48.411413679Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:48.411590470Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.411604664Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.411610906Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.411621861Z          if (condFunc()) {
2018-11-15T14:24:48.411627478Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.411631143Z            return resolve(value);
2018-11-15T14:24:48.411634426Z          }
2018-11-15T14:24:48.411637622Z          setTimeout(wait, interval);
2018-11-15T14:24:48.411640950Z        } [32m+0ms[0m
2018-11-15T14:24:48.411905295Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.412164662Z    [32;1mRepl [0m  [concatResult(data = 1
2018-11-15T14:24:48.412175258Z  => 1
2018-11-15T14:24:48.412178629Z  irb(main):034:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:48.413495368Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.413507410Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.413511056Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.413514488Z          if (condFunc()) {
2018-11-15T14:24:48.413517586Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.413521245Z            return resolve(value);
2018-11-15T14:24:48.413524442Z          }
2018-11-15T14:24:48.413527604Z          setTimeout(wait, interval);
2018-11-15T14:24:48.413530867Z        } [32m+1ms[0m
2018-11-15T14:24:48.413754020Z    [32;1mRepl [0m  [isDataReceived()] result: "1
2018-11-15T14:24:48.413762802Z  => 1
2018-11-15T14:24:48.413767337Z  irb(main):034:0> " [32m+0ms[0m
2018-11-15T14:24:48.413771023Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:48.414010473Z    [32;1mRepl [0m`let currResult = result` //==> "1
2018-11-15T14:24:48.414027138Z  => 1
2018-11-15T14:24:48.414034255Z  irb(main):034:0> " [32m+0ms[0m
2018-11-15T14:24:48.414239442Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:48.419522242Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:48.419658563Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:48.419872965Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:48.420032507Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:48.420042384Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:48.420046877Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:48.420050365Z        return result += data;
2018-11-15T14:24:48.420053584Z      })] [32m+0ms[0m
2018-11-15T14:24:48.420178433Z    [32;1mRepl [0m  resolve(result = "1
2018-11-15T14:24:48.420189356Z  => 1
2018-11-15T14:24:48.420193155Z  irb(main):034:0> ") [32m+0ms[0m
2018-11-15T14:24:48.420367155Z    [32;1mserver [0m  [emitOutput] output: 1
2018-11-15T14:24:48.420376499Z  => 1
2018-11-15T14:24:48.420466756Z  irb(main):034:0>  [32m+11ms[0m
2018-11-15T14:24:48.420695898Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:48.420910648Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}] [32m+0ms[0m
2018-11-15T14:24:48.421081261Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):034:0> \"}]"] [33m+154ms[0m
2018-11-15T14:24:48.421277080Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}]) [34m+13ms[0m
2018-11-15T14:24:48.421419489Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:48.421602574Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):034:0> "}]" [33m+13ms[0m
2018-11-15T14:24:48.438740996Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+17ms[0m
2018-11-15T14:24:48.438935977Z    [34;1mengine:socket [0mpacket [34m+17ms[0m
2018-11-15T14:24:48.439265429Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+19ms[0m
2018-11-15T14:24:48.439402969Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+30ms[0m
2018-11-15T14:24:48.439600654Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:48.439837533Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:48.439973984Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+19ms[0m
2018-11-15T14:24:48.440173562Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.440381132Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:48.571460600Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"32"}]" [33m+133ms[0m
2018-11-15T14:24:48.571639418Z    [34;1mengine:socket [0mpacket [34m+133ms[0m
2018-11-15T14:24:48.571934001Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"32"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [32m+131ms[0m
2018-11-15T14:24:48.572186241Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"32"}]} [36m+133ms[0m
2018-11-15T14:24:48.572401120Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"32"}] [36m+0ms[0m
2018-11-15T14:24:48.572650232Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"32"}] [36m+0ms[0m
2018-11-15T14:24:48.572761938Z    [32;1mserver [0m  ["lineChanged"] { line: 32 } [32m+133ms[0m
2018-11-15T14:24:48.572968561Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.573119854Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"32"}],"nsp":"/"} as 2["syncLine",{"line":"32"}] [32m+0ms[0m
2018-11-15T14:24:48.577700967Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:24:48.577914591Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:48.578105688Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
2018-11-15T14:24:48.578333267Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
2018-11-15T14:24:48.578501229Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.578662566Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.578829736Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:24:48.579082624Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.579093035Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:48.579377599Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"32"}]" [33m+2ms[0m
2018-11-15T14:24:48.579538847Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:48.579726781Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"32"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [32m+1ms[0m
2018-11-15T14:24:48.579957877Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"32"}]} [36m+1ms[0m
2018-11-15T14:24:48.579968442Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"32"}] [36m+0ms[0m
2018-11-15T14:24:48.580067038Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"32"}] [36m+0ms[0m
2018-11-15T14:24:48.580225274Z    [32;1mserver [0m  ["evaluate"] { code: 32 } [32m+2ms[0m
2018-11-15T14:24:48.580433904Z    [32;1mRepl [0m[bufferWrite(string = "32", bufferInterval = 5, write = true)] [32m+161ms[0m
2018-11-15T14:24:48.580612683Z    [32;1mRepl [0m  this.process.write('32' + '\n') [32m+0ms[0m
2018-11-15T14:24:48.581274594Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:48.581496903Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:48.581654393Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:48.581860593Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:48.581869971Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:48.581873535Z        return result !== '';
2018-11-15T14:24:48.581994120Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:48.582171562Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:48.582339651Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.582348053Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.582351544Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.582440184Z          if (condFunc()) {
2018-11-15T14:24:48.582452150Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.582456659Z            return resolve(value);
2018-11-15T14:24:48.582614675Z          }
2018-11-15T14:24:48.582626978Z          setTimeout(wait, interval);
2018-11-15T14:24:48.582747095Z        } [32m+1ms[0m
2018-11-15T14:24:48.582922188Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.583200427Z    [32;1mRepl [0m  [concatResult(data = 32
2018-11-15T14:24:48.583322852Z  => 32
2018-11-15T14:24:48.583417493Z  irb(main):035:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:48.583626073Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.583635644Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.583639083Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.583642532Z          if (condFunc()) {
2018-11-15T14:24:48.583645742Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.583649345Z            return resolve(value);
2018-11-15T14:24:48.583652582Z          }
2018-11-15T14:24:48.583668354Z          setTimeout(wait, interval);
2018-11-15T14:24:48.583687736Z        } [32m+0ms[0m
2018-11-15T14:24:48.583777592Z    [32;1mRepl [0m  [isDataReceived()] result: "32
2018-11-15T14:24:48.583787134Z  => 32
2018-11-15T14:24:48.583790625Z  irb(main):035:0> " [32m+0ms[0m
2018-11-15T14:24:48.583928168Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:48.584153422Z    [32;1mRepl [0m`let currResult = result` //==> "32
2018-11-15T14:24:48.584163351Z  => 32
2018-11-15T14:24:48.584166753Z  irb(main):035:0> " [32m+1ms[0m
2018-11-15T14:24:48.584322926Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:48.589539713Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:48.589730140Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:48.589970922Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:48.590142443Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:48.590151976Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:48.590155699Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:48.590158870Z        return result += data;
2018-11-15T14:24:48.590167665Z      })] [32m+1ms[0m
2018-11-15T14:24:48.590317883Z    [32;1mRepl [0m  resolve(result = "32
2018-11-15T14:24:48.590330118Z  => 32
2018-11-15T14:24:48.590334081Z  irb(main):035:0> ") [32m+0ms[0m
2018-11-15T14:24:48.590499823Z    [32;1mserver [0m  [emitOutput] output: 32
2018-11-15T14:24:48.590509719Z  => 32
2018-11-15T14:24:48.590513277Z  irb(main):035:0>  [32m+10ms[0m
2018-11-15T14:24:48.590759354Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:48.590957552Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}],"nsp":"/"} as 2["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}] [32m+0ms[0m
2018-11-15T14:24:48.591208846Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"32\\r\\n=> 32\\r\\nirb(main):035:0> \"}]"] [33m+170ms[0m
2018-11-15T14:24:48.591382474Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}]) [34m+12ms[0m
2018-11-15T14:24:48.591576757Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:48.591756115Z    [33;1mengine:ws [0mwriting "42["output",{"output":"32\r\n=> 32\r\nirb(main):035:0> "}]" [33m+12ms[0m
2018-11-15T14:24:48.604555355Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+13ms[0m
2018-11-15T14:24:48.604743839Z    [34;1mengine:socket [0mpacket [34m+13ms[0m
2018-11-15T14:24:48.604991526Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+14ms[0m
2018-11-15T14:24:48.605201288Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+26ms[0m
2018-11-15T14:24:48.605361784Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:48.605542053Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:48.605703878Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+15ms[0m
2018-11-15T14:24:48.605897547Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.606084448Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:48.645234838Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"13"}]" [33m+40ms[0m
2018-11-15T14:24:48.645433857Z    [34;1mengine:socket [0mpacket [34m+41ms[0m
2018-11-15T14:24:48.645730050Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"13"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [32m+40ms[0m
2018-11-15T14:24:48.645934197Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"13"}]} [36m+40ms[0m
2018-11-15T14:24:48.646117531Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"13"}] [36m+0ms[0m
2018-11-15T14:24:48.646320926Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"13"}] [36m+1ms[0m
2018-11-15T14:24:48.646526673Z    [32;1mserver [0m  ["lineChanged"] { line: 13 } [32m+41ms[0m
2018-11-15T14:24:48.646741041Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.646916118Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"13"}],"nsp":"/"} as 2["syncLine",{"line":"13"}] [32m+0ms[0m
2018-11-15T14:24:48.770565625Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"131"}]" [33m+126ms[0m
2018-11-15T14:24:48.770774345Z    [34;1mengine:socket [0mpacket [34m+125ms[0m
2018-11-15T14:24:48.771144574Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"131"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"131"}]} [32m+124ms[0m
2018-11-15T14:24:48.771358387Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"131"}]} [36m+125ms[0m
2018-11-15T14:24:48.771569694Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"131"}] [36m+0ms[0m
2018-11-15T14:24:48.771724189Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"131"}] [36m+0ms[0m
2018-11-15T14:24:48.771875208Z    [32;1mserver [0m  ["lineChanged"] { line: 131 } [32m+125ms[0m
2018-11-15T14:24:48.772077276Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"131"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.772212086Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"131"}],"nsp":"/"} as 2["syncLine",{"line":"131"}] [32m+0ms[0m
2018-11-15T14:24:48.776018745Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1312"}]" [33m+5ms[0m
2018-11-15T14:24:48.776166270Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:48.776414304Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1312"}]} [32m+5ms[0m
2018-11-15T14:24:48.776674614Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1312"}]} [36m+5ms[0m
2018-11-15T14:24:48.776865161Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1312"}] [36m+0ms[0m
2018-11-15T14:24:48.777015043Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1312"}] [36m+0ms[0m
2018-11-15T14:24:48.777201631Z    [32;1mserver [0m  ["lineChanged"] { line: 1312 } [32m+6ms[0m
2018-11-15T14:24:48.777446934Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.777615184Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1312"}],"nsp":"/"} as 2["syncLine",{"line":"1312"}] [32m+0ms[0m
2018-11-15T14:24:48.777963184Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+2ms[0m
2018-11-15T14:24:48.778124805Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:48.778423062Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+1ms[0m
2018-11-15T14:24:48.778708655Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+2ms[0m
2018-11-15T14:24:48.778920094Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.779090532Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.779364645Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+2ms[0m
2018-11-15T14:24:48.779484546Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.779670021Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:48.779986931Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1312"}]" [33m+2ms[0m
2018-11-15T14:24:48.780160048Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:48.780395900Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1312"}]} [32m+1ms[0m
2018-11-15T14:24:48.780606933Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1312"}]} [36m+2ms[0m
2018-11-15T14:24:48.780773490Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1312"}] [36m+0ms[0m
2018-11-15T14:24:48.780948726Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1312"}] [36m+0ms[0m
2018-11-15T14:24:48.781124072Z    [32;1mserver [0m  ["evaluate"] { code: 1312 } [32m+1ms[0m
2018-11-15T14:24:48.781317182Z    [32;1mRepl [0m[bufferWrite(string = "1312", bufferInterval = 5, write = true)] [32m+191ms[0m
2018-11-15T14:24:48.781588438Z    [32;1mRepl [0m  this.process.write('1312' + '\n') [32m+0ms[0m
2018-11-15T14:24:48.782167699Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:48.782414915Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:48.782584075Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:48.782787978Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:48.782799452Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:48.782806237Z        return result !== '';
2018-11-15T14:24:48.782811274Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:48.782972309Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:48.783189291Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.783198800Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.783202408Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.783300533Z          if (condFunc()) {
2018-11-15T14:24:48.783324741Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.783332464Z            return resolve(value);
2018-11-15T14:24:48.783337506Z          }
2018-11-15T14:24:48.783465553Z          setTimeout(wait, interval);
2018-11-15T14:24:48.783474865Z        } [32m+1ms[0m
2018-11-15T14:24:48.783653593Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.783908229Z    [32;1mRepl [0m  [concatResult(data = 1312
2018-11-15T14:24:48.783924400Z  => 1312
2018-11-15T14:24:48.783928050Z  irb(main):036:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:48.785248205Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.785260073Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.785263899Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.785354386Z          if (condFunc()) {
2018-11-15T14:24:48.785478756Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.785489573Z            return resolve(value);
2018-11-15T14:24:48.785492983Z          }
2018-11-15T14:24:48.785496069Z          setTimeout(wait, interval);
2018-11-15T14:24:48.785506464Z        } [32m+2ms[0m
2018-11-15T14:24:48.785683126Z    [32;1mRepl [0m  [isDataReceived()] result: "1312
2018-11-15T14:24:48.785694713Z  => 1312
2018-11-15T14:24:48.785698523Z  irb(main):036:0> " [32m+0ms[0m
2018-11-15T14:24:48.785833989Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:48.786043904Z    [32;1mRepl [0m`let currResult = result` //==> "1312
2018-11-15T14:24:48.786052768Z  => 1312
2018-11-15T14:24:48.786056087Z  irb(main):036:0> " [32m+0ms[0m
2018-11-15T14:24:48.786199746Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:48.791421511Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:48.791520863Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:48.791593606Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:48.791684022Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:48.791692109Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:48.791695849Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:48.791699720Z        return result += data;
2018-11-15T14:24:48.791703080Z      })] [32m+0ms[0m
2018-11-15T14:24:48.791768799Z    [32;1mRepl [0m  resolve(result = "1312
2018-11-15T14:24:48.791775617Z  => 1312
2018-11-15T14:24:48.791779106Z  irb(main):036:0> ") [32m+0ms[0m
2018-11-15T14:24:48.791926395Z    [32;1mserver [0m  [emitOutput] output: 1312
2018-11-15T14:24:48.791934115Z  => 1312
2018-11-15T14:24:48.791937482Z  irb(main):036:0>  [32m+11ms[0m
2018-11-15T14:24:48.792065367Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:48.792156027Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}],"nsp":"/"} as 2["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}] [32m+1ms[0m
2018-11-15T14:24:48.792372463Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1312\\r\\n=> 1312\\r\\nirb(main):036:0> \"}]"] [33m+202ms[0m
2018-11-15T14:24:48.792533543Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}]) [34m+13ms[0m
2018-11-15T14:24:48.792606140Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:48.792705426Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1312\r\n=> 1312\r\nirb(main):036:0> "}]" [33m+13ms[0m
2018-11-15T14:24:48.839251775Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+47ms[0m
2018-11-15T14:24:48.839338490Z    [34;1mengine:socket [0mpacket [34m+47ms[0m
2018-11-15T14:24:48.839615901Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+47ms[0m
2018-11-15T14:24:48.839677204Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+59ms[0m
2018-11-15T14:24:48.839769457Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:48.839867373Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:48.840001689Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+48ms[0m
2018-11-15T14:24:48.840146645Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.840235722Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:48.950701895Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+111ms[0m
2018-11-15T14:24:48.950810175Z    [34;1mengine:socket [0mpacket [34m+111ms[0m
2018-11-15T14:24:48.951036535Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+110ms[0m
2018-11-15T14:24:48.951243485Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+112ms[0m
2018-11-15T14:24:48.951303800Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:48.951432845Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:48.951544744Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+112ms[0m
2018-11-15T14:24:48.951636975Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:48.951721372Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:48.956158640Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+5ms[0m
2018-11-15T14:24:48.956174924Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:48.956187600Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+4ms[0m
2018-11-15T14:24:48.956193217Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+4ms[0m
2018-11-15T14:24:48.956197403Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.956206247Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:48.956210379Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+4ms[0m
2018-11-15T14:24:48.956214150Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:48.956235316Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:48.956936792Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"31"}]" [33m+1ms[0m
2018-11-15T14:24:48.956953066Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:48.956964229Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"31"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [32m+1ms[0m
2018-11-15T14:24:48.956969293Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [36m+1ms[0m
2018-11-15T14:24:48.956988232Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"31"}] [36m+0ms[0m
2018-11-15T14:24:48.956992106Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"31"}] [36m+0ms[0m
2018-11-15T14:24:48.956995779Z    [32;1mserver [0m  ["evaluate"] { code: 31 } [32m+1ms[0m
2018-11-15T14:24:48.956999520Z    [32;1mRepl [0m[bufferWrite(string = "31", bufferInterval = 5, write = true)] [32m+165ms[0m
2018-11-15T14:24:48.957003293Z    [32;1mRepl [0m  this.process.write('31' + '\n') [32m+0ms[0m
2018-11-15T14:24:48.957006779Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:48.957010198Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:48.957013715Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:48.957017325Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:48.957020761Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:48.957024176Z        return result !== '';
2018-11-15T14:24:48.957027269Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:48.957030515Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:48.957033998Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.957037298Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.957040493Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.957043841Z          if (condFunc()) {
2018-11-15T14:24:48.957047004Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.957050426Z            return resolve(value);
2018-11-15T14:24:48.957065622Z          }
2018-11-15T14:24:48.957068763Z          setTimeout(wait, interval);
2018-11-15T14:24:48.957080579Z        } [32m+0ms[0m
2018-11-15T14:24:48.957084203Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.958119216Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.958144770Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.958149909Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.958153494Z          if (condFunc()) {
2018-11-15T14:24:48.958156691Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.958160473Z            return resolve(value);
2018-11-15T14:24:48.958163689Z          }
2018-11-15T14:24:48.958166867Z          setTimeout(wait, interval);
2018-11-15T14:24:48.958170069Z        } [32m+1ms[0m
2018-11-15T14:24:48.958180173Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.959341223Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.959353763Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.959357594Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.959366894Z          if (condFunc()) {
2018-11-15T14:24:48.959370643Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.959374446Z            return resolve(value);
2018-11-15T14:24:48.959377591Z          }
2018-11-15T14:24:48.959395684Z          setTimeout(wait, interval);
2018-11-15T14:24:48.959399245Z        } [32m+2ms[0m
2018-11-15T14:24:48.959402628Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.960544946Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.960558346Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.960562471Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.960566188Z          if (condFunc()) {
2018-11-15T14:24:48.960569569Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.960573318Z            return resolve(value);
2018-11-15T14:24:48.960576742Z          }
2018-11-15T14:24:48.960579961Z          setTimeout(wait, interval);
2018-11-15T14:24:48.960583089Z        } [32m+1ms[0m
2018-11-15T14:24:48.960586548Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.961778598Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.961791926Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.961824763Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.961829840Z          if (condFunc()) {
2018-11-15T14:24:48.961833219Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.961836900Z            return resolve(value);
2018-11-15T14:24:48.961840260Z          }
2018-11-15T14:24:48.961843375Z          setTimeout(wait, interval);
2018-11-15T14:24:48.961846481Z        } [32m+1ms[0m
2018-11-15T14:24:48.961849847Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.962901948Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.962916244Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.962922332Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.962927567Z          if (condFunc()) {
2018-11-15T14:24:48.962932445Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.962937920Z            return resolve(value);
2018-11-15T14:24:48.962942736Z          }
2018-11-15T14:24:48.962947479Z          setTimeout(wait, interval);
2018-11-15T14:24:48.962961471Z        } [32m+1ms[0m
2018-11-15T14:24:48.962967255Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:48.964160348Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.964172530Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.964182314Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.964186276Z          if (condFunc()) {
2018-11-15T14:24:48.964189665Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.964221008Z            return resolve(value);
2018-11-15T14:24:48.964225311Z          }
2018-11-15T14:24:48.964228430Z          setTimeout(wait, interval);
2018-11-15T14:24:48.964231626Z        } [32m+1ms[0m
2018-11-15T14:24:48.964236132Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:48.965758755Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.965876833Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.965929792Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.966020498Z          if (condFunc()) {
2018-11-15T14:24:48.966227382Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.966246108Z            return resolve(value);
2018-11-15T14:24:48.966250065Z          }
2018-11-15T14:24:48.966253149Z          setTimeout(wait, interval);
2018-11-15T14:24:48.966256316Z        } [32m+1ms[0m
2018-11-15T14:24:48.966259748Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:48.967115259Z    [32;1mRepl [0m  [concatResult(data = 31
2018-11-15T14:24:48.967128059Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:48.967138696Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:48.967157226Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:48.967163410Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:48.967168841Z          if (condFunc()) {
2018-11-15T14:24:48.967173518Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:48.967178901Z            return resolve(value);
2018-11-15T14:24:48.967183213Z          }
2018-11-15T14:24:48.967186533Z          setTimeout(wait, interval);
2018-11-15T14:24:48.967189622Z        } [32m+0ms[0m
2018-11-15T14:24:48.967192877Z    [32;1mRepl [0m  [isDataReceived()] result: "31
2018-11-15T14:24:48.967196243Z  " [32m+0ms[0m
2018-11-15T14:24:48.967199637Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:48.967203219Z    [32;1mRepl [0m`let currResult = result` //==> "31
2018-11-15T14:24:48.967206633Z  " [32m+0ms[0m
2018-11-15T14:24:48.967209813Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:48.967418065Z    [32;1mRepl [0m  [concatResult(data = => 31
2018-11-15T14:24:48.967428636Z  )] result: "31
2018-11-15T14:24:48.967432191Z  " [32m+1ms[0m
2018-11-15T14:24:48.967676502Z    [32;1mRepl [0m  [concatResult(data = irb(main):037:0> )] result: "31
2018-11-15T14:24:48.967686070Z  => 31
2018-11-15T14:24:48.967689586Z  " [32m+0ms[0m
2018-11-15T14:24:48.971898444Z    [32;1mRepl [0m  [setInterval()] [32m+4ms[0m
2018-11-15T14:24:48.971913861Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "31
2018-11-15T14:24:48.971918470Z  ", result: "31
2018-11-15T14:24:48.971921847Z  => 31
2018-11-15T14:24:48.971925181Z  irb(main):037:0> " [32m+0ms[0m
2018-11-15T14:24:48.977736460Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:48.977798808Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:48.977804735Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:48.977808227Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:48.977817813Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:48.977821541Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:48.977824782Z        return result += data;
2018-11-15T14:24:48.977827866Z      })] [32m+0ms[0m
2018-11-15T14:24:48.977831224Z    [32;1mRepl [0m  resolve(result = "31
2018-11-15T14:24:48.977834654Z  => 31
2018-11-15T14:24:48.977837827Z  irb(main):037:0> ") [32m+0ms[0m
2018-11-15T14:24:48.977841306Z    [32;1mserver [0m  [emitOutput] output: 31
2018-11-15T14:24:48.977844712Z  => 31
2018-11-15T14:24:48.977847757Z  irb(main):037:0>  [32m+21ms[0m
2018-11-15T14:24:48.977851189Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}],"nsp":"/"} [32m+21ms[0m
2018-11-15T14:24:48.977869613Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}],"nsp":"/"} as 2["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}] [32m+0ms[0m
2018-11-15T14:24:48.977874870Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"31\\r\\n=> 31\\r\\nirb(main):037:0> \"}]"] [33m+185ms[0m
2018-11-15T14:24:48.977879405Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}]) [34m+21ms[0m
2018-11-15T14:24:48.977883547Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:48.977886965Z    [33;1mengine:ws [0mwriting "42["output",{"output":"31\r\n=> 31\r\nirb(main):037:0> "}]" [33m+21ms[0m
2018-11-15T14:24:49.019821337Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+42ms[0m
2018-11-15T14:24:49.019921312Z    [34;1mengine:socket [0mpacket [34m+42ms[0m
2018-11-15T14:24:49.019932737Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+42ms[0m
2018-11-15T14:24:49.019981621Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+63ms[0m
2018-11-15T14:24:49.019996124Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:49.020014956Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:49.020019087Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+42ms[0m
2018-11-15T14:24:49.020022751Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.020026924Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:49.108487828Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+88ms[0m
2018-11-15T14:24:49.108514572Z    [34;1mengine:socket [0mpacket [34m+88ms[0m
2018-11-15T14:24:49.108521880Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+89ms[0m
2018-11-15T14:24:49.108526990Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+89ms[0m
2018-11-15T14:24:49.108531238Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.108535316Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.108539492Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+89ms[0m
2018-11-15T14:24:49.108566291Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.108572080Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:49.114187870Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
2018-11-15T14:24:49.114216081Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:49.114220771Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+5ms[0m
2018-11-15T14:24:49.114225740Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
2018-11-15T14:24:49.114229921Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:49.114233600Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:49.114237297Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
2018-11-15T14:24:49.114240785Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+136ms[0m
2018-11-15T14:24:49.114260161Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:49.114263859Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:49.114267337Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:49.114270812Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:49.114274520Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:49.114278078Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:49.114281378Z        return result !== '';
2018-11-15T14:24:49.114284560Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:49.114287841Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:49.114291318Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.114294601Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.114297728Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.114301011Z          if (condFunc()) {
2018-11-15T14:24:49.114304027Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.114307454Z            return resolve(value);
2018-11-15T14:24:49.114310574Z          }
2018-11-15T14:24:49.114313648Z          setTimeout(wait, interval);
2018-11-15T14:24:49.114316734Z        } [32m+0ms[0m
2018-11-15T14:24:49.114319897Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:49.114935222Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:49.114946381Z  => 3
2018-11-15T14:24:49.114949930Z  irb(main):038:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:49.114953497Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.114956769Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.114960048Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.114963302Z          if (condFunc()) {
2018-11-15T14:24:49.114966387Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.114969745Z            return resolve(value);
2018-11-15T14:24:49.114972931Z          }
2018-11-15T14:24:49.114975900Z          setTimeout(wait, interval);
2018-11-15T14:24:49.114979061Z        } [32m+0ms[0m
2018-11-15T14:24:49.114982274Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:49.115008874Z  => 3
2018-11-15T14:24:49.115012540Z  irb(main):038:0> " [32m+0ms[0m
2018-11-15T14:24:49.115015901Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:49.115019638Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:49.115022963Z  => 3
2018-11-15T14:24:49.115026024Z  irb(main):038:0> " [32m+0ms[0m
2018-11-15T14:24:49.115029326Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:49.120788784Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:49.120813530Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:49.120841938Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:49.120848741Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:49.120855871Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:49.120861621Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:49.120866800Z        return result += data;
2018-11-15T14:24:49.120871877Z      })] [32m+0ms[0m
2018-11-15T14:24:49.120876994Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:49.120882330Z  => 3
2018-11-15T14:24:49.120887372Z  irb(main):038:0> ") [32m+0ms[0m
2018-11-15T14:24:49.120892762Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:49.120897920Z  => 3
2018-11-15T14:24:49.120918800Z  irb(main):038:0>  [32m+7ms[0m
2018-11-15T14:24:49.120925179Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:49.120932549Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}] [32m+0ms[0m
2018-11-15T14:24:49.120940303Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):038:0> \"}]"] [33m+143ms[0m
2018-11-15T14:24:49.120947390Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}]) [34m+7ms[0m
2018-11-15T14:24:49.120953761Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:49.120959309Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):038:0> "}]" [33m+7ms[0m
2018-11-15T14:24:49.177258661Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+56ms[0m
2018-11-15T14:24:49.177331888Z    [34;1mengine:socket [0mpacket [34m+56ms[0m
2018-11-15T14:24:49.177339371Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+56ms[0m
2018-11-15T14:24:49.177345484Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+63ms[0m
2018-11-15T14:24:49.177349735Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:49.177353724Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:49.177357431Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+57ms[0m
2018-11-15T14:24:49.177361408Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:49.177365572Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:49.183465588Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:24:49.183491873Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:49.183524040Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
2018-11-15T14:24:49.183529698Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+7ms[0m
2018-11-15T14:24:49.183533979Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.183538153Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.183541766Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:24:49.183545541Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.183549708Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:49.258256127Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+75ms[0m
2018-11-15T14:24:49.258327758Z    [34;1mengine:socket [0mpacket [34m+75ms[0m
2018-11-15T14:24:49.258346170Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+74ms[0m
2018-11-15T14:24:49.258351746Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+74ms[0m
2018-11-15T14:24:49.258355809Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.258359655Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.258363332Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+74ms[0m
2018-11-15T14:24:49.258381601Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:49.258386653Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:49.307038046Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+49ms[0m
2018-11-15T14:24:49.307085618Z    [34;1mengine:socket [0mpacket [34m+49ms[0m
2018-11-15T14:24:49.307095320Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+48ms[0m
2018-11-15T14:24:49.307102260Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+49ms[0m
2018-11-15T14:24:49.307108295Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.307115378Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.307120897Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+49ms[0m
2018-11-15T14:24:49.307135044Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.307143004Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:49.313221298Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
2018-11-15T14:24:49.313239274Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:49.313243824Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
2018-11-15T14:24:49.313366751Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
2018-11-15T14:24:49.313387471Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.313391983Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.313414531Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
2018-11-15T14:24:49.313418279Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+192ms[0m
2018-11-15T14:24:49.313445209Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:49.313450709Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:49.313454260Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:49.313457917Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:49.313461334Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:49.313465151Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:49.313468702Z        return result !== '';
2018-11-15T14:24:49.313471906Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:49.313475180Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:49.313478836Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.313482114Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.313485380Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.313488614Z          if (condFunc()) {
2018-11-15T14:24:49.313491658Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.313495169Z            return resolve(value);
2018-11-15T14:24:49.313498309Z          }
2018-11-15T14:24:49.313501311Z          setTimeout(wait, interval);
2018-11-15T14:24:49.313504530Z        } [32m+0ms[0m
2018-11-15T14:24:49.313507748Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:49.313523062Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:49.313527109Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:49.313530299Z    [32;1mRepl [0m  [concatResult(data = => 123
2018-11-15T14:24:49.313533689Z  )] result: "123
2018-11-15T14:24:49.313536958Z  " [32m+0ms[0m
2018-11-15T14:24:49.313540174Z    [32;1mRepl [0m  [concatResult(data = irb(main):039:0> )] result: "123
2018-11-15T14:24:49.313545880Z  => 123
2018-11-15T14:24:49.313553472Z  " [32m+1ms[0m
2018-11-15T14:24:49.314530391Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.314541234Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.314544864Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.314548114Z          if (condFunc()) {
2018-11-15T14:24:49.314551303Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.314554855Z            return resolve(value);
2018-11-15T14:24:49.314558106Z          }
2018-11-15T14:24:49.314561089Z          setTimeout(wait, interval);
2018-11-15T14:24:49.314564295Z        } [32m+1ms[0m
2018-11-15T14:24:49.314567956Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:49.314571348Z  => 123
2018-11-15T14:24:49.314574555Z  irb(main):039:0> " [32m+0ms[0m
2018-11-15T14:24:49.314578365Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:49.314583889Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:49.314589021Z  => 123
2018-11-15T14:24:49.314593853Z  irb(main):039:0> " [32m+0ms[0m
2018-11-15T14:24:49.314598845Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:49.320449235Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:49.320472119Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:49.320479556Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:49.320485321Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:49.320491427Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:49.320496967Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:49.320501864Z        return result += data;
2018-11-15T14:24:49.320507196Z      })] [32m+0ms[0m
2018-11-15T14:24:49.320512282Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:49.320518396Z  => 123
2018-11-15T14:24:49.320523300Z  irb(main):039:0> ") [32m+0ms[0m
2018-11-15T14:24:49.320529499Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:49.320534835Z  => 123
2018-11-15T14:24:49.320539911Z  irb(main):039:0>  [32m+7ms[0m
2018-11-15T14:24:49.320545260Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:49.320563193Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}] [32m+0ms[0m
2018-11-15T14:24:49.320569105Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):039:0> \"}]"] [33m+200ms[0m
2018-11-15T14:24:49.320573722Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}]) [34m+8ms[0m
2018-11-15T14:24:49.320577945Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:49.320581419Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):039:0> "}]" [33m+8ms[0m
2018-11-15T14:24:49.412745053Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+92ms[0m
2018-11-15T14:24:49.412773413Z    [34;1mengine:socket [0mpacket [34m+92ms[0m
2018-11-15T14:24:49.412777937Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+92ms[0m
2018-11-15T14:24:49.412783086Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+100ms[0m
2018-11-15T14:24:49.412787504Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:49.412791293Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:49.412794974Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+93ms[0m
2018-11-15T14:24:49.412798819Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.412802822Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:49.420727845Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
2018-11-15T14:24:49.420830703Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:49.420838314Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
2018-11-15T14:24:49.420843300Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
2018-11-15T14:24:49.420847413Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.420863485Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.421009327Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+8ms[0m
2018-11-15T14:24:49.421213088Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+3ms[0m
2018-11-15T14:24:49.421386270Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:49.452399461Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+35ms[0m
2018-11-15T14:24:49.452600796Z    [34;1mengine:socket [0mpacket [34m+35ms[0m
2018-11-15T14:24:49.452826397Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
2018-11-15T14:24:49.453001507Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
2018-11-15T14:24:49.453122437Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.453276270Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:49.453403400Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+33ms[0m
2018-11-15T14:24:49.453617226Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:49.453781428Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:49.458753879Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
2018-11-15T14:24:49.458928292Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:49.459131343Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+6ms[0m
2018-11-15T14:24:49.459313119Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+6ms[0m
2018-11-15T14:24:49.459440894Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.459630783Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.459758590Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+6ms[0m
2018-11-15T14:24:49.459924377Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+140ms[0m
2018-11-15T14:24:49.460059402Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
2018-11-15T14:24:49.460689629Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:49.460701202Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:49.460705087Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:49.460708588Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:49.460711832Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:49.460715163Z        return result !== '';
2018-11-15T14:24:49.460720645Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:49.460875651Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:49.460883865Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.460887369Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.460890510Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.460893890Z          if (condFunc()) {
2018-11-15T14:24:49.460896977Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.460900524Z            return resolve(value);
2018-11-15T14:24:49.460903636Z          }
2018-11-15T14:24:49.460906655Z          setTimeout(wait, interval);
2018-11-15T14:24:49.460909804Z        } [32m+0ms[0m
2018-11-15T14:24:49.460913079Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:49.460994608Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:24:49.461009423Z  => 12
2018-11-15T14:24:49.461013680Z  irb(main):040:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:49.462273431Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.462285868Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.462384167Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.462476801Z          if (condFunc()) {
2018-11-15T14:24:49.462616272Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.462776159Z            return resolve(value);
2018-11-15T14:24:49.462784810Z          }
2018-11-15T14:24:49.462788068Z          setTimeout(wait, interval);
2018-11-15T14:24:49.462856538Z        } [32m+1ms[0m
2018-11-15T14:24:49.463007991Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:24:49.463117521Z  => 12
2018-11-15T14:24:49.463221024Z  irb(main):040:0> " [32m+1ms[0m
2018-11-15T14:24:49.463413952Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:49.463614000Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:24:49.463622310Z  => 12
2018-11-15T14:24:49.463736395Z  irb(main):040:0> " [32m+0ms[0m
2018-11-15T14:24:49.463903461Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:49.469245397Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:49.469663142Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:49.469870356Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:49.470115406Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:49.470123951Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:49.470127633Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:49.470131129Z        return result += data;
2018-11-15T14:24:49.470134312Z      })] [32m+0ms[0m
2018-11-15T14:24:49.470271688Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:24:49.470289129Z  => 12
2018-11-15T14:24:49.470292609Z  irb(main):040:0> ") [32m+0ms[0m
2018-11-15T14:24:49.470296006Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:24:49.470299251Z  => 12
2018-11-15T14:24:49.470302506Z  irb(main):040:0>  [32m+11ms[0m
2018-11-15T14:24:49.470461010Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:49.470470845Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}] [32m+0ms[0m
2018-11-15T14:24:49.470576877Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):040:0> \"}]"] [33m+150ms[0m
2018-11-15T14:24:49.472772967Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}]) [34m+12ms[0m
2018-11-15T14:24:49.472876896Z    [34;1mengine:socket [0mflushing buffer to transport [34m+2ms[0m
2018-11-15T14:24:49.473099114Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):040:0> "}]" [33m+14ms[0m
2018-11-15T14:24:49.567638154Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+95ms[0m
2018-11-15T14:24:49.567831516Z    [34;1mengine:socket [0mpacket [34m+95ms[0m
2018-11-15T14:24:49.568135979Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+97ms[0m
2018-11-15T14:24:49.568382207Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+109ms[0m
2018-11-15T14:24:49.568537487Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:49.568698761Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:49.568876694Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+98ms[0m
2018-11-15T14:24:49.569066256Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:49.569214440Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
2018-11-15T14:24:49.617087788Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+49ms[0m
2018-11-15T14:24:49.617221587Z    [34;1mengine:socket [0mpacket [34m+49ms[0m
2018-11-15T14:24:49.617469542Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+48ms[0m
2018-11-15T14:24:49.617650394Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+49ms[0m
2018-11-15T14:24:49.617755433Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.617862521Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.618065334Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+49ms[0m
2018-11-15T14:24:49.618246699Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:49.618368208Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:49.621492669Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
2018-11-15T14:24:49.621722537Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:49.621926027Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+3ms[0m
2018-11-15T14:24:49.622108840Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+4ms[0m
2018-11-15T14:24:49.622320928Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+1ms[0m
2018-11-15T14:24:49.622527924Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:49.622687209Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+5ms[0m
2018-11-15T14:24:49.622855341Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+153ms[0m
2018-11-15T14:24:49.623013073Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:49.623603040Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:49.623614720Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:49.623618867Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:49.623629609Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:49.623632984Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:49.623636504Z        return result !== '';
2018-11-15T14:24:49.623639705Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:49.623643011Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:49.623646480Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.623649860Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.623653039Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.623656359Z          if (condFunc()) {
2018-11-15T14:24:49.623659445Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.623662861Z            return resolve(value);
2018-11-15T14:24:49.623665951Z          }
2018-11-15T14:24:49.623669088Z          setTimeout(wait, interval);
2018-11-15T14:24:49.623672201Z        } [32m+0ms[0m
2018-11-15T14:24:49.623675338Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:49.623905787Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:49.623919128Z  => 3
2018-11-15T14:24:49.624088607Z  irb(main):041:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:49.624280874Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.624288194Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.624429568Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.624623893Z          if (condFunc()) {
2018-11-15T14:24:49.624769058Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.624937975Z            return resolve(value);
2018-11-15T14:24:49.625082780Z          }
2018-11-15T14:24:49.625122125Z          setTimeout(wait, interval);
2018-11-15T14:24:49.625253857Z        } [32m+1ms[0m
2018-11-15T14:24:49.625510090Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:49.625518831Z  => 3
2018-11-15T14:24:49.625636874Z  irb(main):041:0> " [32m+1ms[0m
2018-11-15T14:24:49.625809105Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:49.625994616Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:49.626002134Z  => 3
2018-11-15T14:24:49.626106008Z  irb(main):041:0> " [32m+0ms[0m
2018-11-15T14:24:49.626289501Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:49.631520568Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:49.631674948Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:49.631899296Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:49.632078069Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:49.632097615Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:49.632171329Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:49.632259738Z        return result += data;
2018-11-15T14:24:49.632405923Z      })] [32m+0ms[0m
2018-11-15T14:24:49.636058538Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:49.636074144Z  => 3
2018-11-15T14:24:49.636078024Z  irb(main):041:0> ") [32m+4ms[0m
2018-11-15T14:24:49.636081704Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:49.636085264Z  => 3
2018-11-15T14:24:49.636088486Z  irb(main):041:0>  [32m+13ms[0m
2018-11-15T14:24:49.636123108Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}],"nsp":"/"} [32m+14ms[0m
2018-11-15T14:24:49.636141282Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}] [32m+0ms[0m
2018-11-15T14:24:49.636146830Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):041:0> \"}]"] [33m+165ms[0m
2018-11-15T14:24:49.636151483Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}]) [34m+14ms[0m
2018-11-15T14:24:49.636155718Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:49.636159205Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):041:0> "}]" [33m+14ms[0m
2018-11-15T14:24:49.686017562Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+50ms[0m
2018-11-15T14:24:49.686187542Z    [34;1mengine:socket [0mpacket [34m+50ms[0m
2018-11-15T14:24:49.686198348Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+51ms[0m
2018-11-15T14:24:49.686288607Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+64ms[0m
2018-11-15T14:24:49.686304385Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:49.686309704Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:49.686313527Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+51ms[0m
2018-11-15T14:24:49.686403236Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.686412544Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:49.686936262Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+1ms[0m
2018-11-15T14:24:49.686946350Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:49.686950062Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+0ms[0m
2018-11-15T14:24:49.686954646Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+0ms[0m
2018-11-15T14:24:49.686958758Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.686975716Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:49.686986593Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+0ms[0m
2018-11-15T14:24:49.686990443Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.686994392Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:49.788534295Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+101ms[0m
2018-11-15T14:24:49.788584304Z    [34;1mengine:socket [0mpacket [34m+101ms[0m
2018-11-15T14:24:49.788589782Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+102ms[0m
2018-11-15T14:24:49.788594794Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+102ms[0m
2018-11-15T14:24:49.788599064Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.788603066Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.788613014Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+102ms[0m
2018-11-15T14:24:49.788617213Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.788647575Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:49.794669143Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+7ms[0m
2018-11-15T14:24:49.794691676Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:49.794696265Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+6ms[0m
2018-11-15T14:24:49.794701052Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
2018-11-15T14:24:49.794786533Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.794794527Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.794806862Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:24:49.794823027Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:49.794827654Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:49.797108602Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+0ms[0m
2018-11-15T14:24:49.797129399Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:24:49.797133846Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
2018-11-15T14:24:49.797138538Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
2018-11-15T14:24:49.797142570Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.797146426Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:49.797150178Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+1ms[0m
2018-11-15T14:24:49.797153701Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+160ms[0m
2018-11-15T14:24:49.797157325Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:49.797160708Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:49.797164218Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:49.797167730Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:49.797171097Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:49.797174426Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:49.797177855Z        return result !== '';
2018-11-15T14:24:49.797181065Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:49.797184308Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:49.797187803Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.797191140Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.797194296Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.797197510Z          if (condFunc()) {
2018-11-15T14:24:49.797200626Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.797204095Z            return resolve(value);
2018-11-15T14:24:49.797217430Z          }
2018-11-15T14:24:49.797220968Z          setTimeout(wait, interval);
2018-11-15T14:24:49.797224068Z        } [32m+0ms[0m
2018-11-15T14:24:49.797227278Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:49.797230724Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.797233934Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.797237120Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.797240317Z          if (condFunc()) {
2018-11-15T14:24:49.797244291Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.797247859Z            return resolve(value);
2018-11-15T14:24:49.797250964Z          }
2018-11-15T14:24:49.797254059Z          setTimeout(wait, interval);
2018-11-15T14:24:49.797257161Z        } [32m+1ms[0m
2018-11-15T14:24:49.797260328Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:49.797641661Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:49.797663007Z  => 123
2018-11-15T14:24:49.797670335Z  irb(main):042:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:49.797739556Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.797746889Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.797750141Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.797778539Z          if (condFunc()) {
2018-11-15T14:24:49.797783806Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.797787328Z            return resolve(value);
2018-11-15T14:24:49.797790595Z          }
2018-11-15T14:24:49.797793660Z          setTimeout(wait, interval);
2018-11-15T14:24:49.797796812Z        } [32m+0ms[0m
2018-11-15T14:24:49.797801148Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:49.797821780Z  => 123
2018-11-15T14:24:49.797827963Z  irb(main):042:0> " [32m+0ms[0m
2018-11-15T14:24:49.797834092Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:49.797955694Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:49.797970107Z  => 123
2018-11-15T14:24:49.797974179Z  irb(main):042:0> " [32m+0ms[0m
2018-11-15T14:24:49.797977979Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:49.803471303Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:49.803486980Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:49.803491615Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:49.803495270Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:49.803498788Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:49.803502396Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:49.803522454Z        return result += data;
2018-11-15T14:24:49.803525823Z      })] [32m+0ms[0m
2018-11-15T14:24:49.803529027Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:49.803532425Z  => 123
2018-11-15T14:24:49.803535667Z  irb(main):042:0> ") [32m+1ms[0m
2018-11-15T14:24:49.803538979Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:49.803542585Z  => 123
2018-11-15T14:24:49.803545790Z  irb(main):042:0>  [32m+8ms[0m
2018-11-15T14:24:49.803549171Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:49.803554002Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}] [32m+0ms[0m
2018-11-15T14:24:49.803558943Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):042:0> \"}]"] [33m+168ms[0m
2018-11-15T14:24:49.803563551Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]) [34m+9ms[0m
2018-11-15T14:24:49.803567677Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:49.803571037Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]" [33m+9ms[0m
2018-11-15T14:24:49.935697021Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+132ms[0m
2018-11-15T14:24:49.935853746Z    [34;1mengine:socket [0mpacket [34m+132ms[0m
2018-11-15T14:24:49.936159267Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+132ms[0m
2018-11-15T14:24:49.936352868Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+141ms[0m
2018-11-15T14:24:49.936541413Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.936712654Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:49.936935409Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+133ms[0m
2018-11-15T14:24:49.937128404Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:49.937269297Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
2018-11-15T14:24:49.959017478Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+23ms[0m
2018-11-15T14:24:49.959181071Z    [34;1mengine:socket [0mpacket [34m+23ms[0m
2018-11-15T14:24:49.959470713Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+22ms[0m
2018-11-15T14:24:49.959875762Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+23ms[0m
2018-11-15T14:24:49.960030401Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:49.960127659Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:49.960275547Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+24ms[0m
2018-11-15T14:24:49.960478447Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+157ms[0m
2018-11-15T14:24:49.960591376Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:49.961138169Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:49.961351996Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:49.961382865Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:49.961555937Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:49.961570110Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:49.961589691Z        return result !== '';
2018-11-15T14:24:49.961595707Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:49.961695421Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:49.961865119Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.961902955Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.961918703Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.961924373Z          if (condFunc()) {
2018-11-15T14:24:49.961929232Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.961934663Z            return resolve(value);
2018-11-15T14:24:49.961939555Z          }
2018-11-15T14:24:49.961944315Z          setTimeout(wait, interval);
2018-11-15T14:24:49.961949235Z        } [32m+0ms[0m
2018-11-15T14:24:49.962038920Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:49.962247984Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:49.962257643Z  irb(main):043:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:49.963490019Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:49.963523356Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:49.963528437Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:49.963531749Z          if (condFunc()) {
2018-11-15T14:24:49.963534957Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:49.963538826Z            return resolve(value);
2018-11-15T14:24:49.963553523Z          }
2018-11-15T14:24:49.963556734Z          setTimeout(wait, interval);
2018-11-15T14:24:49.963559948Z        } [32m+1ms[0m
2018-11-15T14:24:49.963702552Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:49.963717463Z  irb(main):043:0> " [32m+0ms[0m
2018-11-15T14:24:49.963838612Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:49.963979198Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:49.964018148Z  irb(main):043:0> " [32m+0ms[0m
2018-11-15T14:24:49.964232758Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:49.970077448Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:49.970096589Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:49.970100962Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:49.970120802Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:49.970125493Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:49.970129064Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:49.970144389Z        return result += data;
2018-11-15T14:24:49.970155044Z      })] [32m+0ms[0m
2018-11-15T14:24:49.970158631Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:49.970161839Z  irb(main):043:0> ") [32m+0ms[0m
2018-11-15T14:24:49.970165159Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:49.970168362Z  irb(main):043:0>  [32m+9ms[0m
2018-11-15T14:24:49.970171685Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):043:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:24:49.970176226Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):043:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):043:0> "}] [32m+0ms[0m
2018-11-15T14:24:49.970180866Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):043:0> \"}]"] [33m+166ms[0m
2018-11-15T14:24:49.970185088Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):043:0> "}]) [34m+11ms[0m
2018-11-15T14:24:49.970202815Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:49.970206325Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):043:0> "}]" [33m+11ms[0m
2018-11-15T14:24:49.990076968Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+20ms[0m
2018-11-15T14:24:49.990315459Z    [34;1mengine:socket [0mpacket [34m+20ms[0m
2018-11-15T14:24:49.990696800Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+21ms[0m
2018-11-15T14:24:49.991112571Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+31ms[0m
2018-11-15T14:24:49.991306454Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
2018-11-15T14:24:49.991495371Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:49.991763204Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+22ms[0m
2018-11-15T14:24:49.991973349Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:49.992240868Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:50.010479791Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+14ms[0m
2018-11-15T14:24:50.010525370Z    [34;1mengine:socket [0mpacket [34m+15ms[0m
2018-11-15T14:24:50.010530789Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+13ms[0m
2018-11-15T14:24:50.010535568Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+14ms[0m
2018-11-15T14:24:50.010539573Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.010548419Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.010552352Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+14ms[0m
2018-11-15T14:24:50.010556068Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:50.010560193Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:50.048574296Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+45ms[0m
2018-11-15T14:24:50.048640187Z    [34;1mengine:socket [0mpacket [34m+44ms[0m
2018-11-15T14:24:50.048893612Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+43ms[0m
2018-11-15T14:24:50.049120974Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+43ms[0m
2018-11-15T14:24:50.049353465Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+1ms[0m
2018-11-15T14:24:50.049573800Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:50.049766816Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+44ms[0m
2018-11-15T14:24:50.049981659Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:50.050137276Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:50.124129151Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+75ms[0m
2018-11-15T14:24:50.124157542Z    [34;1mengine:socket [0mpacket [34m+75ms[0m
2018-11-15T14:24:50.124162276Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+74ms[0m
2018-11-15T14:24:50.124167105Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+74ms[0m
2018-11-15T14:24:50.124206871Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.124212660Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.124216508Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+74ms[0m
2018-11-15T14:24:50.124220090Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.124224601Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:50.129102413Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+3ms[0m
2018-11-15T14:24:50.130154505Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:50.130357632Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+7ms[0m
2018-11-15T14:24:50.133001466Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+9ms[0m
2018-11-15T14:24:50.133219865Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:50.133404344Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+1ms[0m
2018-11-15T14:24:50.133581493Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+10ms[0m
2018-11-15T14:24:50.133782176Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+164ms[0m
2018-11-15T14:24:50.133791569Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:50.134492996Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:50.134698701Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:50.134709094Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:50.134873157Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:50.134993154Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:50.135001524Z        return result !== '';
2018-11-15T14:24:50.135106258Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:50.135314983Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:50.135335099Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.135492522Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.135500736Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.135504170Z          if (condFunc()) {
2018-11-15T14:24:50.135507488Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.135603241Z            return resolve(value);
2018-11-15T14:24:50.135722535Z          }
2018-11-15T14:24:50.135833926Z          setTimeout(wait, interval);
2018-11-15T14:24:50.135842017Z        } [32m+0ms[0m
2018-11-15T14:24:50.136062091Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:50.136316405Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:50.136326164Z  => 123
2018-11-15T14:24:50.136329589Z  irb(main):044:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:50.137647996Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.137660642Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.137664329Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.137667781Z          if (condFunc()) {
2018-11-15T14:24:50.137671026Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.137846043Z            return resolve(value);
2018-11-15T14:24:50.137854574Z          }
2018-11-15T14:24:50.137857927Z          setTimeout(wait, interval);
2018-11-15T14:24:50.137861084Z        } [32m+1ms[0m
2018-11-15T14:24:50.138068811Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:50.138078128Z  => 123
2018-11-15T14:24:50.138081558Z  irb(main):044:0> " [32m+0ms[0m
2018-11-15T14:24:50.138284724Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:50.138471980Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:50.138481310Z  => 123
2018-11-15T14:24:50.138484611Z  irb(main):044:0> " [32m+1ms[0m
2018-11-15T14:24:50.138693631Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:50.144382587Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:50.144397897Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:50.144402206Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:50.144452685Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:50.144459222Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:50.144462769Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:50.144466054Z        return result += data;
2018-11-15T14:24:50.144469208Z      })] [32m+0ms[0m
2018-11-15T14:24:50.144472370Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:50.144475909Z  => 123
2018-11-15T14:24:50.144479154Z  irb(main):044:0> ") [32m+0ms[0m
2018-11-15T14:24:50.144482498Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:50.144485789Z  => 123
2018-11-15T14:24:50.144488888Z  irb(main):044:0>  [32m+10ms[0m
2018-11-15T14:24:50.144492380Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}],"nsp":"/"} [32m+13ms[0m
2018-11-15T14:24:50.144497347Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}] [32m+0ms[0m
2018-11-15T14:24:50.144516594Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):044:0> \"}]"] [33m+175ms[0m
2018-11-15T14:24:50.144521635Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}]) [34m+15ms[0m
2018-11-15T14:24:50.144525925Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:50.144529290Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):044:0> "}]" [33m+18ms[0m
2018-11-15T14:24:50.214993922Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+70ms[0m
2018-11-15T14:24:50.215022968Z    [34;1mengine:socket [0mpacket [34m+70ms[0m
2018-11-15T14:24:50.215027935Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+71ms[0m
2018-11-15T14:24:50.215033062Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+81ms[0m
2018-11-15T14:24:50.215037233Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:50.215041036Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:50.215044805Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+71ms[0m
2018-11-15T14:24:50.215082285Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.215088357Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:50.219955524Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
2018-11-15T14:24:50.219970848Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:50.219975434Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
2018-11-15T14:24:50.219980059Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
2018-11-15T14:24:50.219984146Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.219987813Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.219991376Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+5ms[0m
2018-11-15T14:24:50.219994975Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.220019245Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:50.250433448Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
2018-11-15T14:24:50.250481085Z    [34;1mengine:socket [0mpacket [34m+30ms[0m
2018-11-15T14:24:50.250486056Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
2018-11-15T14:24:50.250490873Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+31ms[0m
2018-11-15T14:24:50.250495131Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.250499082Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.250502744Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+31ms[0m
2018-11-15T14:24:50.250506450Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.250510738Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:50.256467567Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
2018-11-15T14:24:50.256535443Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:50.256540948Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+5ms[0m
2018-11-15T14:24:50.256552080Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+5ms[0m
2018-11-15T14:24:50.256556263Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.256560085Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.256563626Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+5ms[0m
2018-11-15T14:24:50.256567104Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+112ms[0m
2018-11-15T14:24:50.256570822Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
2018-11-15T14:24:50.256574149Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:50.256577685Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:50.256594983Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:24:50.256598499Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:50.256601918Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:50.256605474Z        return result !== '';
2018-11-15T14:24:50.256608677Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:50.256612080Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:50.256615673Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.256619563Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.256622723Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.256625925Z          if (condFunc()) {
2018-11-15T14:24:50.256628986Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.256632409Z            return resolve(value);
2018-11-15T14:24:50.256635481Z          }
2018-11-15T14:24:50.256638483Z          setTimeout(wait, interval);
2018-11-15T14:24:50.256641583Z        } [32m+0ms[0m
2018-11-15T14:24:50.256644789Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:50.256697414Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:24:50.256712867Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:50.260344336Z    [32;1mRepl [0m  [concatResult(data = => 12
2018-11-15T14:24:50.260359449Z  irb(main):045:0> )] result: "12
2018-11-15T14:24:50.260363642Z  " [32m+0ms[0m
2018-11-15T14:24:50.260367057Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.260370741Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.260374049Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.260377453Z          if (condFunc()) {
2018-11-15T14:24:50.260397013Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.260401751Z            return resolve(value);
2018-11-15T14:24:50.260404873Z          }
2018-11-15T14:24:50.260407908Z          setTimeout(wait, interval);
2018-11-15T14:24:50.260411173Z        } [32m+0ms[0m
2018-11-15T14:24:50.260414473Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:24:50.260418168Z  => 12
2018-11-15T14:24:50.260421332Z  irb(main):045:0> " [32m+0ms[0m
2018-11-15T14:24:50.260424683Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:50.260428405Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:24:50.260431857Z  => 12
2018-11-15T14:24:50.260434953Z  irb(main):045:0> " [32m+0ms[0m
2018-11-15T14:24:50.260438213Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:50.262714608Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:50.262728833Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:50.262739114Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:50.262743223Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:50.262746714Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:50.262750352Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:50.262762171Z        return result += data;
2018-11-15T14:24:50.262765800Z      })] [32m+0ms[0m
2018-11-15T14:24:50.262770970Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:24:50.262774530Z  => 12
2018-11-15T14:24:50.262787251Z  irb(main):045:0> ") [32m+0ms[0m
2018-11-15T14:24:50.262790943Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:24:50.262794375Z  => 12
2018-11-15T14:24:50.262797485Z  irb(main):045:0>  [32m+7ms[0m
2018-11-15T14:24:50.262800957Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:50.262805815Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}] [32m+0ms[0m
2018-11-15T14:24:50.262810963Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):045:0> \"}]"] [33m+118ms[0m
2018-11-15T14:24:50.262815571Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}]) [34m+7ms[0m
2018-11-15T14:24:50.262819888Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:50.262823375Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):045:0> "}]" [33m+7ms[0m
2018-11-15T14:24:50.282038534Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+19ms[0m
2018-11-15T14:24:50.282064763Z    [34;1mengine:socket [0mpacket [34m+19ms[0m
2018-11-15T14:24:50.282222744Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+19ms[0m
2018-11-15T14:24:50.282233125Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+27ms[0m
2018-11-15T14:24:50.282237685Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.282252860Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.282257078Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+20ms[0m
2018-11-15T14:24:50.282316823Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:50.282324925Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:50.424547670Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+143ms[0m
2018-11-15T14:24:50.424689790Z    [34;1mengine:socket [0mpacket [34m+143ms[0m
2018-11-15T14:24:50.424734129Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+142ms[0m
2018-11-15T14:24:50.424743897Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+142ms[0m
2018-11-15T14:24:50.424863805Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.424883708Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.424888253Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+142ms[0m
2018-11-15T14:24:50.424891858Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.424895931Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:50.430003828Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+5ms[0m
2018-11-15T14:24:50.430068368Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:50.430130136Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
2018-11-15T14:24:50.430182249Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
2018-11-15T14:24:50.430195995Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.430200370Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.430687269Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
2018-11-15T14:24:50.430697866Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+168ms[0m
2018-11-15T14:24:50.430701870Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:50.430705419Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:50.430708871Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:50.430712461Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:50.430715776Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:50.430719063Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:50.430722386Z        return result !== '';
2018-11-15T14:24:50.430725578Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:50.430738782Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:50.430742543Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.430745750Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.430749015Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.430752219Z          if (condFunc()) {
2018-11-15T14:24:50.430755298Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.430758710Z            return resolve(value);
2018-11-15T14:24:50.430761915Z          }
2018-11-15T14:24:50.430764887Z          setTimeout(wait, interval);
2018-11-15T14:24:50.430767990Z        } [32m+0ms[0m
2018-11-15T14:24:50.430771138Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:50.430781957Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:50.430785714Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:50.430788925Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.430792115Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.430795343Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.430798495Z          if (condFunc()) {
2018-11-15T14:24:50.430801531Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.430804875Z            return resolve(value);
2018-11-15T14:24:50.430808187Z          }
2018-11-15T14:24:50.430811218Z          setTimeout(wait, interval);
2018-11-15T14:24:50.430814347Z        } [32m+0ms[0m
2018-11-15T14:24:50.430817644Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:50.430820935Z  " [32m+0ms[0m
2018-11-15T14:24:50.430824058Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:50.430827627Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:50.430831021Z  " [32m+0ms[0m
2018-11-15T14:24:50.430869578Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:50.430875923Z    [32;1mRepl [0m  [concatResult(data = => 3
2018-11-15T14:24:50.430879261Z  irb(main):046:0> )] result: "3
2018-11-15T14:24:50.430882588Z  " [32m+0ms[0m
2018-11-15T14:24:50.436013636Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:50.436043804Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "3
2018-11-15T14:24:50.436051047Z  ", result: "3
2018-11-15T14:24:50.436055900Z  => 3
2018-11-15T14:24:50.436060764Z  irb(main):046:0> " [32m+0ms[0m
2018-11-15T14:24:50.441537702Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:50.441551001Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:50.441555273Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:50.441558750Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:50.441562419Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:50.441566027Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:50.441569302Z        return result += data;
2018-11-15T14:24:50.441579732Z      })] [32m+0ms[0m
2018-11-15T14:24:50.441583151Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:50.441593225Z  => 3
2018-11-15T14:24:50.441596443Z  irb(main):046:0> ") [32m+0ms[0m
2018-11-15T14:24:50.441599812Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:50.441603151Z  => 3
2018-11-15T14:24:50.441606361Z  irb(main):046:0>  [32m+11ms[0m
2018-11-15T14:24:50.441609743Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:50.441618291Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}] [32m+0ms[0m
2018-11-15T14:24:50.441623543Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):046:0> \"}]"] [33m+179ms[0m
2018-11-15T14:24:50.441630086Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}]) [34m+12ms[0m
2018-11-15T14:24:50.441636369Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:50.441641664Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):046:0> "}]" [33m+12ms[0m
2018-11-15T14:24:50.474940537Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+32ms[0m
2018-11-15T14:24:50.474990611Z    [34;1mengine:socket [0mpacket [34m+32ms[0m
2018-11-15T14:24:50.474995941Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+32ms[0m
2018-11-15T14:24:50.475014798Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+43ms[0m
2018-11-15T14:24:50.475019392Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:50.475023140Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:50.475027048Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+32ms[0m
2018-11-15T14:24:50.475030801Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.475056355Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:50.475060652Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+0ms[0m
2018-11-15T14:24:50.475064402Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:24:50.475067896Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+0ms[0m
2018-11-15T14:24:50.475072102Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+0ms[0m
2018-11-15T14:24:50.475075845Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.475079462Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:50.475083085Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+0ms[0m
2018-11-15T14:24:50.475086563Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:50.475090457Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:50.475094472Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+1ms[0m
2018-11-15T14:24:50.475098176Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:50.475103192Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+0ms[0m
2018-11-15T14:24:50.475107437Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+1ms[0m
2018-11-15T14:24:50.475111123Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:50.475145915Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:50.475150838Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+1ms[0m
2018-11-15T14:24:50.475154278Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.475158240Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:50.586810417Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+112ms[0m
2018-11-15T14:24:50.586858420Z    [34;1mengine:socket [0mpacket [34m+112ms[0m
2018-11-15T14:24:50.586865454Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+112ms[0m
2018-11-15T14:24:50.586872734Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+112ms[0m
2018-11-15T14:24:50.586879300Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.586893097Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.586899331Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+112ms[0m
2018-11-15T14:24:50.586905285Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.586912057Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:50.592943990Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
2018-11-15T14:24:50.592987602Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:50.592993624Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
2018-11-15T14:24:50.592998779Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
2018-11-15T14:24:50.593003050Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:50.593007099Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:50.593010891Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
2018-11-15T14:24:50.593027842Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+151ms[0m
2018-11-15T14:24:50.593032101Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:50.593035565Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:50.593060386Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:50.593065546Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:50.593068905Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:50.593072378Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:50.593075731Z        return result !== '';
2018-11-15T14:24:50.593078922Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:50.593082179Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:50.593085713Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.593088934Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.593092213Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.593095432Z          if (condFunc()) {
2018-11-15T14:24:50.593098659Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.593102063Z            return resolve(value);
2018-11-15T14:24:50.593105244Z          }
2018-11-15T14:24:50.593108244Z          setTimeout(wait, interval);
2018-11-15T14:24:50.593111460Z        } [32m+0ms[0m
2018-11-15T14:24:50.593114647Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:50.593501485Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:50.593847613Z  => 123
2018-11-15T14:24:50.593858359Z  irb(main):047:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:50.593862271Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.593865535Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.593868746Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.593897294Z          if (condFunc()) {
2018-11-15T14:24:50.593900640Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.593904240Z            return resolve(value);
2018-11-15T14:24:50.593907460Z          }
2018-11-15T14:24:50.593910487Z          setTimeout(wait, interval);
2018-11-15T14:24:50.593921529Z        } [32m+0ms[0m
2018-11-15T14:24:50.593924988Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:50.593928400Z  => 123
2018-11-15T14:24:50.593931561Z  irb(main):047:0> " [32m+0ms[0m
2018-11-15T14:24:50.594212901Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:50.594223419Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:50.594227108Z  => 123
2018-11-15T14:24:50.594230326Z  irb(main):047:0> " [32m+1ms[0m
2018-11-15T14:24:50.594233801Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:50.600076109Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:50.600157347Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:50.600197160Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:50.600203150Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:50.600209845Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:50.600216552Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:50.600223324Z        return result += data;
2018-11-15T14:24:50.600228279Z      })] [32m+0ms[0m
2018-11-15T14:24:50.600232837Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:50.600237734Z  => 123
2018-11-15T14:24:50.600242174Z  irb(main):047:0> ") [32m+0ms[0m
2018-11-15T14:24:50.600246826Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:50.600251823Z  => 123
2018-11-15T14:24:50.600277892Z  irb(main):047:0>  [32m+7ms[0m
2018-11-15T14:24:50.600282892Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:50.600289372Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}] [32m+0ms[0m
2018-11-15T14:24:50.600320759Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):047:0> \"}]"] [33m+158ms[0m
2018-11-15T14:24:50.600327796Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}]) [34m+7ms[0m
2018-11-15T14:24:50.600334559Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:50.600374901Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):047:0> "}]" [33m+7ms[0m
2018-11-15T14:24:50.744561341Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+144ms[0m
2018-11-15T14:24:50.744614333Z    [34;1mengine:socket [0mpacket [34m+145ms[0m
2018-11-15T14:24:50.744619390Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+145ms[0m
2018-11-15T14:24:50.744624381Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+152ms[0m
2018-11-15T14:24:50.744628666Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.744632491Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.744759722Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+145ms[0m
2018-11-15T14:24:50.745076391Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.745087578Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:50.773635282Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+29ms[0m
2018-11-15T14:24:50.773686277Z    [34;1mengine:socket [0mpacket [34m+29ms[0m
2018-11-15T14:24:50.773691705Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+29ms[0m
2018-11-15T14:24:50.773696440Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+29ms[0m
2018-11-15T14:24:50.773700760Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.773704758Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.773708523Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+29ms[0m
2018-11-15T14:24:50.773712648Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:50.773716809Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:50.779902412Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
2018-11-15T14:24:50.779988375Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:50.779994800Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
2018-11-15T14:24:50.779999840Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
2018-11-15T14:24:50.780003979Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.780007654Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:24:50.780011387Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
2018-11-15T14:24:50.780015677Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+180ms[0m
2018-11-15T14:24:50.780021524Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:24:50.780046939Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:50.780050644Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:50.780054226Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:50.780486501Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:50.780498938Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:50.780502727Z        return result !== '';
2018-11-15T14:24:50.780505890Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:50.780509370Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:50.780512840Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.780516130Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.780519255Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.780522525Z          if (condFunc()) {
2018-11-15T14:24:50.780525663Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.780548291Z            return resolve(value);
2018-11-15T14:24:50.780553200Z          }
2018-11-15T14:24:50.780556386Z          setTimeout(wait, interval);
2018-11-15T14:24:50.780559531Z        } [32m+0ms[0m
2018-11-15T14:24:50.780562763Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:50.780566138Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:24:50.780576476Z  => 3
2018-11-15T14:24:50.780579930Z  irb(main):048:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:50.781808380Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.781821473Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.781825286Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.781828996Z          if (condFunc()) {
2018-11-15T14:24:50.781832116Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.781835551Z            return resolve(value);
2018-11-15T14:24:50.781838713Z          }
2018-11-15T14:24:50.781841656Z          setTimeout(wait, interval);
2018-11-15T14:24:50.781844736Z        } [32m+1ms[0m
2018-11-15T14:24:50.781847980Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:24:50.781884538Z  => 3
2018-11-15T14:24:50.781888127Z  irb(main):048:0> " [32m+0ms[0m
2018-11-15T14:24:50.781891547Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:50.781895178Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:24:50.781898674Z  => 3
2018-11-15T14:24:50.781901750Z  irb(main):048:0> " [32m+0ms[0m
2018-11-15T14:24:50.781905081Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:50.787281625Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:50.787298245Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:50.787304953Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:50.787310364Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:50.787315835Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:50.787341571Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:50.787346484Z        return result += data;
2018-11-15T14:24:50.787349656Z      })] [32m+1ms[0m
2018-11-15T14:24:50.787352815Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:24:50.787356288Z  => 3
2018-11-15T14:24:50.787359357Z  irb(main):048:0> ") [32m+0ms[0m
2018-11-15T14:24:50.787362749Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:24:50.787365987Z  => 3
2018-11-15T14:24:50.787369157Z  irb(main):048:0>  [32m+8ms[0m
2018-11-15T14:24:50.787379491Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:50.787819911Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}] [32m+0ms[0m
2018-11-15T14:24:50.787832782Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):048:0> \"}]"] [33m+188ms[0m
2018-11-15T14:24:50.787837935Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]) [34m+8ms[0m
2018-11-15T14:24:50.787842073Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:50.787845535Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]" [33m+9ms[0m
2018-11-15T14:24:50.936448887Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+149ms[0m
2018-11-15T14:24:50.936879222Z    [34;1mengine:socket [0mpacket [34m+149ms[0m
2018-11-15T14:24:50.936891772Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+149ms[0m
2018-11-15T14:24:50.937251124Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+157ms[0m
2018-11-15T14:24:50.937398994Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:50.938000562Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:50.938013221Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+150ms[0m
2018-11-15T14:24:50.938017802Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:50.938022474Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:50.938112074Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
2018-11-15T14:24:50.938559685Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:50.938570792Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
2018-11-15T14:24:50.938575929Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
2018-11-15T14:24:50.938894585Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:50.938918228Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:50.938922601Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
2018-11-15T14:24:50.938926129Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+151ms[0m
2018-11-15T14:24:50.938929704Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:50.939043123Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:50.939626702Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:50.939638438Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:50.939666805Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:50.939671306Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:50.939674772Z        return result !== '';
2018-11-15T14:24:50.939677967Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:50.939681468Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:50.939684951Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.939688191Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.939691327Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.939694685Z          if (condFunc()) {
2018-11-15T14:24:50.939697849Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.939701289Z            return resolve(value);
2018-11-15T14:24:50.939704490Z          }
2018-11-15T14:24:50.939707643Z          setTimeout(wait, interval);
2018-11-15T14:24:50.939710744Z        } [32m+0ms[0m
2018-11-15T14:24:50.939713883Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:50.939834062Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:50.940063426Z  irb(main):049:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:50.941319442Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:50.941373074Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:50.941379591Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:50.941382991Z          if (condFunc()) {
2018-11-15T14:24:50.941391985Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:50.941403323Z            return resolve(value);
2018-11-15T14:24:50.941406909Z          }
2018-11-15T14:24:50.941409944Z          setTimeout(wait, interval);
2018-11-15T14:24:50.941413164Z        } [32m+2ms[0m
2018-11-15T14:24:50.941416477Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:50.941456137Z  irb(main):049:0> " [32m+0ms[0m
2018-11-15T14:24:50.941459832Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:50.941463597Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:50.941467095Z  irb(main):049:0> " [32m+0ms[0m
2018-11-15T14:24:50.941470460Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:50.946559869Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:50.946579767Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:50.946585873Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:50.946591591Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:50.946596972Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:50.946601458Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:50.946604926Z        return result += data;
2018-11-15T14:24:50.946608018Z      })] [32m+0ms[0m
2018-11-15T14:24:50.946611346Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:50.946615188Z  irb(main):049:0> ") [32m+0ms[0m
2018-11-15T14:24:50.946684418Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:50.946692089Z  irb(main):049:0>  [32m+8ms[0m
2018-11-15T14:24:50.946695604Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:50.946700310Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):049:0> "}] [32m+0ms[0m
2018-11-15T14:24:50.946705301Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):049:0> \"}]"] [33m+159ms[0m
2018-11-15T14:24:50.946759091Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):049:0> "}]) [34m+8ms[0m
2018-11-15T14:24:50.946766537Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:50.946780753Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):049:0> "}]" [33m+9ms[0m
2018-11-15T14:24:51.006631961Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+60ms[0m
2018-11-15T14:24:51.006780193Z    [34;1mengine:socket [0mpacket [34m+60ms[0m
2018-11-15T14:24:51.006953938Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+60ms[0m
2018-11-15T14:24:51.007086837Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+68ms[0m
2018-11-15T14:24:51.007258859Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
2018-11-15T14:24:51.007468290Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:51.007546234Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+61ms[0m
2018-11-15T14:24:51.007682399Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.007857422Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:51.046601911Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+40ms[0m
2018-11-15T14:24:51.046648187Z    [34;1mengine:socket [0mpacket [34m+40ms[0m
2018-11-15T14:24:51.046778620Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+39ms[0m
2018-11-15T14:24:51.046789600Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+39ms[0m
2018-11-15T14:24:51.046794425Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:51.046798582Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:51.046885503Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+39ms[0m
2018-11-15T14:24:51.046942822Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.046970419Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:51.101883870Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+55ms[0m
2018-11-15T14:24:51.101958552Z    [34;1mengine:socket [0mpacket [34m+55ms[0m
2018-11-15T14:24:51.101978398Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+55ms[0m
2018-11-15T14:24:51.101983904Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+55ms[0m
2018-11-15T14:24:51.101988160Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:51.102029034Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:51.102034687Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+55ms[0m
2018-11-15T14:24:51.102078909Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.102086071Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:51.245548381Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+144ms[0m
2018-11-15T14:24:51.245620690Z    [34;1mengine:socket [0mpacket [34m+144ms[0m
2018-11-15T14:24:51.245779941Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+144ms[0m
2018-11-15T14:24:51.245811480Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+144ms[0m
2018-11-15T14:24:51.245817182Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:51.245821131Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:51.245854102Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+144ms[0m
2018-11-15T14:24:51.245904142Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.245911147Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
2018-11-15T14:24:51.253022497Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+7ms[0m
2018-11-15T14:24:51.253203216Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:51.253213538Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+8ms[0m
2018-11-15T14:24:51.253363518Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+8ms[0m
2018-11-15T14:24:51.253491694Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:51.253498638Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:51.253504516Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+8ms[0m
2018-11-15T14:24:51.253510337Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.253578699Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:24:51.297847514Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+45ms[0m
2018-11-15T14:24:51.297941877Z    [34;1mengine:socket [0mpacket [34m+45ms[0m
2018-11-15T14:24:51.298058635Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+44ms[0m
2018-11-15T14:24:51.298091216Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+44ms[0m
2018-11-15T14:24:51.298095980Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:24:51.298173017Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
2018-11-15T14:24:51.298180460Z    [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+45ms[0m
2018-11-15T14:24:51.298184487Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.298220314Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
2018-11-15T14:24:51.302762145Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+5ms[0m
2018-11-15T14:24:51.302782535Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:51.302994413Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+4ms[0m
2018-11-15T14:24:51.303024307Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+4ms[0m
2018-11-15T14:24:51.303049317Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.303057280Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.303079397Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+4ms[0m
2018-11-15T14:24:51.303191242Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.303200175Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:51.303204535Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+1ms[0m
2018-11-15T14:24:51.303208339Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:51.303343770Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+1ms[0m
2018-11-15T14:24:51.304170745Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+1ms[0m
2018-11-15T14:24:51.304193358Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:24:51.304222197Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:24:51.304226871Z    [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+1ms[0m
2018-11-15T14:24:51.304230807Z    [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+357ms[0m
2018-11-15T14:24:51.304234685Z    [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
2018-11-15T14:24:51.304238273Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:51.304241899Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:51.304245543Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:51.304248993Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:51.304252839Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:51.304256267Z        return result !== '';
2018-11-15T14:24:51.304259476Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:51.304262756Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:51.304266279Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.304269518Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.304272684Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.304275864Z          if (condFunc()) {
2018-11-15T14:24:51.304324419Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.304330276Z            return resolve(value);
2018-11-15T14:24:51.304333507Z          }
2018-11-15T14:24:51.304336547Z          setTimeout(wait, interval);
2018-11-15T14:24:51.304339741Z        } [32m+0ms[0m
2018-11-15T14:24:51.304343277Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:51.304346825Z    [32;1mRepl [0m  [concatResult(data = 123123
2018-11-15T14:24:51.304350041Z  => 123123
2018-11-15T14:24:51.304353507Z  irb(main):050:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:51.305392145Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.305408676Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.305414763Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.305418398Z          if (condFunc()) {
2018-11-15T14:24:51.305444042Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.305450089Z            return resolve(value);
2018-11-15T14:24:51.305465911Z          }
2018-11-15T14:24:51.305469264Z          setTimeout(wait, interval);
2018-11-15T14:24:51.305472594Z        } [32m+1ms[0m
2018-11-15T14:24:51.305475987Z    [32;1mRepl [0m  [isDataReceived()] result: "123123
2018-11-15T14:24:51.305479483Z  => 123123
2018-11-15T14:24:51.305482710Z  irb(main):050:0> " [32m+0ms[0m
2018-11-15T14:24:51.305486352Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:51.305500713Z    [32;1mRepl [0m`let currResult = result` //==> "123123
2018-11-15T14:24:51.305504656Z  => 123123
2018-11-15T14:24:51.305508332Z  irb(main):050:0> " [32m+0ms[0m
2018-11-15T14:24:51.305511758Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:51.310865872Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:51.310880127Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:51.310884663Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:51.310888140Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:51.310891768Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:51.310895361Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:51.310906434Z        return result += data;
2018-11-15T14:24:51.310927350Z      })] [32m+0ms[0m
2018-11-15T14:24:51.310931727Z    [32;1mRepl [0m  resolve(result = "123123
2018-11-15T14:24:51.310935026Z  => 123123
2018-11-15T14:24:51.310938165Z  irb(main):050:0> ") [32m+0ms[0m
2018-11-15T14:24:51.310941779Z    [32;1mserver [0m  [emitOutput] output: 123123
2018-11-15T14:24:51.310945146Z  => 123123
2018-11-15T14:24:51.310948270Z  irb(main):050:0>  [32m+7ms[0m
2018-11-15T14:24:51.310953469Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:51.310958410Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}] [32m+0ms[0m
2018-11-15T14:24:51.310963601Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):050:0> \"}]"] [33m+364ms[0m
2018-11-15T14:24:51.310968067Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}]) [34m+7ms[0m
2018-11-15T14:24:51.310972229Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:51.310975688Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):050:0> "}]" [33m+7ms[0m
2018-11-15T14:24:51.446739113Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+136ms[0m
2018-11-15T14:24:51.446772173Z    [34;1mengine:socket [0mpacket [34m+136ms[0m
2018-11-15T14:24:51.446782902Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+136ms[0m
2018-11-15T14:24:51.446788089Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+143ms[0m
2018-11-15T14:24:51.446792147Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:51.446825822Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:51.446831105Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+136ms[0m
2018-11-15T14:24:51.446834993Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.446839391Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:51.451635448Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
2018-11-15T14:24:51.451659019Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:51.451663800Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
2018-11-15T14:24:51.451668912Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
2018-11-15T14:24:51.451673264Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:51.451677145Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:51.451680810Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+5ms[0m
2018-11-15T14:24:51.451684584Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.451688790Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:51.500248725Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+48ms[0m
2018-11-15T14:24:51.500276226Z    [34;1mengine:socket [0mpacket [34m+48ms[0m
2018-11-15T14:24:51.500280939Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+48ms[0m
2018-11-15T14:24:51.500286163Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+48ms[0m
2018-11-15T14:24:51.500340236Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.500344538Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.500348499Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+48ms[0m
2018-11-15T14:24:51.500352392Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.500356899Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:51.506765369Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
2018-11-15T14:24:51.506782869Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:51.506800788Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+5ms[0m
2018-11-15T14:24:51.506806186Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+6ms[0m
2018-11-15T14:24:51.506810602Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+1ms[0m
2018-11-15T14:24:51.506814464Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:24:51.506818071Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+7ms[0m
2018-11-15T14:24:51.506821610Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+196ms[0m
2018-11-15T14:24:51.506825328Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
2018-11-15T14:24:51.506828808Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:51.506832264Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:51.506835888Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:51.506839298Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:51.506842589Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:51.506846028Z        return result !== '';
2018-11-15T14:24:51.506849369Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:51.506852624Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:51.506856188Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.506859359Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.506862455Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.506865618Z          if (condFunc()) {
2018-11-15T14:24:51.506868698Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.506872045Z            return resolve(value);
2018-11-15T14:24:51.506875121Z          }
2018-11-15T14:24:51.506880071Z          setTimeout(wait, interval);
2018-11-15T14:24:51.506883219Z        } [32m+0ms[0m
2018-11-15T14:24:51.506886453Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:51.506889852Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:24:51.506893052Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:51.506908410Z    [32;1mRepl [0m  [concatResult(data = => 12
2018-11-15T14:24:51.506929952Z  )] result: "12
2018-11-15T14:24:51.506934310Z  " [32m+0ms[0m
2018-11-15T14:24:51.506937928Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.506941398Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.506944728Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.506947929Z          if (condFunc()) {
2018-11-15T14:24:51.506969804Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.506974538Z            return resolve(value);
2018-11-15T14:24:51.506977749Z          }
2018-11-15T14:24:51.506980802Z          setTimeout(wait, interval);
2018-11-15T14:24:51.506983895Z        } [32m+0ms[0m
2018-11-15T14:24:51.506987188Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:24:51.506990576Z  => 12
2018-11-15T14:24:51.506993649Z  " [32m+0ms[0m
2018-11-15T14:24:51.506996887Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:51.507000590Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:24:51.507003997Z  => 12
2018-11-15T14:24:51.507007139Z  " [32m+0ms[0m
2018-11-15T14:24:51.507016100Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:51.507020415Z    [32;1mRepl [0m  [concatResult(data = irb(main):051:0> )] result: "12
2018-11-15T14:24:51.507023900Z  => 12
2018-11-15T14:24:51.507026975Z  " [32m+0ms[0m
2018-11-15T14:24:51.512076088Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:51.512097385Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "12
2018-11-15T14:24:51.512102408Z  => 12
2018-11-15T14:24:51.512105698Z  ", result: "12
2018-11-15T14:24:51.512108914Z  => 12
2018-11-15T14:24:51.512112106Z  irb(main):051:0> " [32m+0ms[0m
2018-11-15T14:24:51.517303210Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:51.517317463Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:51.517322050Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:51.517325668Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:51.517329120Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:51.517341400Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:51.517345458Z        return result += data;
2018-11-15T14:24:51.517348652Z      })] [32m+0ms[0m
2018-11-15T14:24:51.517436467Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:24:51.517445554Z  => 12
2018-11-15T14:24:51.517448840Z  irb(main):051:0> ") [32m+0ms[0m
2018-11-15T14:24:51.517452339Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:24:51.517455682Z  => 12
2018-11-15T14:24:51.517459459Z  irb(main):051:0>  [32m+11ms[0m
2018-11-15T14:24:51.517542675Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:51.517553091Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}] [32m+0ms[0m
2018-11-15T14:24:51.517617780Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):051:0> \"}]"] [33m+207ms[0m
2018-11-15T14:24:51.517625971Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]) [34m+12ms[0m
2018-11-15T14:24:51.517630253Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:51.517633793Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]" [33m+12ms[0m
2018-11-15T14:24:51.539153645Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+21ms[0m
2018-11-15T14:24:51.539262913Z    [34;1mengine:socket [0mpacket [34m+22ms[0m
2018-11-15T14:24:51.539271961Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+22ms[0m
2018-11-15T14:24:51.539331282Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+33ms[0m
2018-11-15T14:24:51.539346174Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:51.539350364Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:51.539354199Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+22ms[0m
2018-11-15T14:24:51.539408438Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.539427781Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:51.648667218Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+110ms[0m
2018-11-15T14:24:51.648786486Z    [34;1mengine:socket [0mpacket [34m+109ms[0m
2018-11-15T14:24:51.648839624Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+109ms[0m
2018-11-15T14:24:51.649036339Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+109ms[0m
2018-11-15T14:24:51.649140633Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:51.649199686Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+1ms[0m
2018-11-15T14:24:51.649306862Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+110ms[0m
2018-11-15T14:24:51.649483392Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.649584494Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:51.661293070Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+13ms[0m
2018-11-15T14:24:51.661411953Z    [34;1mengine:socket [0mpacket [34m+13ms[0m
2018-11-15T14:24:51.661448873Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+12ms[0m
2018-11-15T14:24:51.661455302Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+12ms[0m
2018-11-15T14:24:51.661523709Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.661531034Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.661595928Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+12ms[0m
2018-11-15T14:24:51.661681794Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.661739197Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
2018-11-15T14:24:51.689098767Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+27ms[0m
2018-11-15T14:24:51.689211903Z    [34;1mengine:socket [0mpacket [34m+28ms[0m
2018-11-15T14:24:51.689323585Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
2018-11-15T14:24:51.689500152Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+28ms[0m
2018-11-15T14:24:51.689561747Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.689686833Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.689695285Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+28ms[0m
2018-11-15T14:24:51.689869700Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:51.689966750Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:51.695342345Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+7ms[0m
2018-11-15T14:24:51.695435506Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:51.695521485Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+6ms[0m
2018-11-15T14:24:51.695591545Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+6ms[0m
2018-11-15T14:24:51.695607505Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.695714315Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.695731612Z    [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+6ms[0m
2018-11-15T14:24:51.695793532Z    [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+178ms[0m
2018-11-15T14:24:51.695808049Z    [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
2018-11-15T14:24:51.695853224Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:51.695913104Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:51.696057282Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:51.696070194Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:51.696073858Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:51.696096371Z        return result !== '';
2018-11-15T14:24:51.696122304Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:51.696126314Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:51.696247515Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.696255633Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.696259113Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.696262373Z          if (condFunc()) {
2018-11-15T14:24:51.696265529Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.696269055Z            return resolve(value);
2018-11-15T14:24:51.696272255Z          }
2018-11-15T14:24:51.696275297Z          setTimeout(wait, interval);
2018-11-15T14:24:51.696278385Z        } [32m+1ms[0m
2018-11-15T14:24:51.696281638Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:51.697012861Z    [32;1mRepl [0m  [concatResult(data = 312
2018-11-15T14:24:51.697026639Z  => 312
2018-11-15T14:24:51.697032408Z  irb(main):052:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:51.697111587Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.697120150Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.697125574Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.697128969Z          if (condFunc()) {
2018-11-15T14:24:51.697132105Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.697135936Z            return resolve(value);
2018-11-15T14:24:51.697139362Z          }
2018-11-15T14:24:51.697144043Z          setTimeout(wait, interval);
2018-11-15T14:24:51.697147342Z        } [32m+0ms[0m
2018-11-15T14:24:51.697150502Z    [32;1mRepl [0m  [isDataReceived()] result: "312
2018-11-15T14:24:51.697155541Z  => 312
2018-11-15T14:24:51.697158814Z  irb(main):052:0> " [32m+0ms[0m
2018-11-15T14:24:51.697225327Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:51.697232696Z    [32;1mRepl [0m`let currResult = result` //==> "312
2018-11-15T14:24:51.697243591Z  => 312
2018-11-15T14:24:51.697246940Z  irb(main):052:0> " [32m+0ms[0m
2018-11-15T14:24:51.697302321Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:51.702474632Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:51.702562657Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:51.702571379Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:51.702637756Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:51.702644965Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:51.702648801Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:51.702652046Z        return result += data;
2018-11-15T14:24:51.702655179Z      })] [32m+0ms[0m
2018-11-15T14:24:51.702660401Z    [32;1mRepl [0m  resolve(result = "312
2018-11-15T14:24:51.702663871Z  => 312
2018-11-15T14:24:51.702667078Z  irb(main):052:0> ") [32m+0ms[0m
2018-11-15T14:24:51.702735459Z    [32;1mserver [0m  [emitOutput] output: 312
2018-11-15T14:24:51.702743198Z  => 312
2018-11-15T14:24:51.702746480Z  irb(main):052:0>  [32m+7ms[0m
2018-11-15T14:24:51.702810124Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:51.702903287Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}] [32m+0ms[0m
2018-11-15T14:24:51.702998835Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):052:0> \"}]"] [33m+185ms[0m
2018-11-15T14:24:51.703012587Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}]) [34m+7ms[0m
2018-11-15T14:24:51.703019285Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:51.703113259Z    [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):052:0> "}]" [33m+7ms[0m
2018-11-15T14:24:51.709610608Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+7ms[0m
2018-11-15T14:24:51.709697361Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:51.709806908Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+7ms[0m
2018-11-15T14:24:51.709995630Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+14ms[0m
2018-11-15T14:24:51.710074597Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:51.710219499Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+1ms[0m
2018-11-15T14:24:51.710231226Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+8ms[0m
2018-11-15T14:24:51.710382714Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.710392003Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:51.841120367Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+131ms[0m
2018-11-15T14:24:51.841211375Z    [34;1mengine:socket [0mpacket [34m+132ms[0m
2018-11-15T14:24:51.841571928Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+131ms[0m
2018-11-15T14:24:51.841792063Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+131ms[0m
2018-11-15T14:24:51.841972043Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:51.842102683Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:51.842272275Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+132ms[0m
2018-11-15T14:24:51.842519698Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.842686371Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:51.846787106Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
2018-11-15T14:24:51.846877209Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:51.847074742Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+4ms[0m
2018-11-15T14:24:51.847311893Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+6ms[0m
2018-11-15T14:24:51.847397705Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.847550454Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.847642622Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+5ms[0m
2018-11-15T14:24:51.847826725Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.847953530Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
2018-11-15T14:24:51.848666164Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+2ms[0m
2018-11-15T14:24:51.848738893Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:51.848949123Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+1ms[0m
2018-11-15T14:24:51.849171490Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+2ms[0m
2018-11-15T14:24:51.849257973Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.849444182Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:51.849504341Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+2ms[0m
2018-11-15T14:24:51.849666198Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.849754359Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:51.850076864Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+1ms[0m
2018-11-15T14:24:51.850164637Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:24:51.850347419Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+1ms[0m
2018-11-15T14:24:51.850508762Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+1ms[0m
2018-11-15T14:24:51.850591162Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.850737726Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:51.850826499Z    [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+1ms[0m
2018-11-15T14:24:51.850939197Z    [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+148ms[0m
2018-11-15T14:24:51.851031875Z    [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
2018-11-15T14:24:51.851575609Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:51.851595896Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:51.851600114Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:51.851603528Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:51.851606782Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:51.851610194Z        return result !== '';
2018-11-15T14:24:51.851613270Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:51.851616629Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:51.851620059Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.851623323Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.851626451Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.851629630Z          if (condFunc()) {
2018-11-15T14:24:51.851730316Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.851737516Z            return resolve(value);
2018-11-15T14:24:51.851740672Z          }
2018-11-15T14:24:51.851743738Z          setTimeout(wait, interval);
2018-11-15T14:24:51.851747042Z        } [32m+0ms[0m
2018-11-15T14:24:51.851750336Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:51.851754413Z    [32;1mRepl [0m  [concatResult(data = 312
2018-11-15T14:24:51.851757853Z  => 312
2018-11-15T14:24:51.851761044Z  irb(main):053:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:51.852993715Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:51.853005616Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:51.853009384Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:51.853012600Z          if (condFunc()) {
2018-11-15T14:24:51.853015991Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:51.853019518Z            return resolve(value);
2018-11-15T14:24:51.853065804Z          }
2018-11-15T14:24:51.853069608Z          setTimeout(wait, interval);
2018-11-15T14:24:51.853072812Z        } [32m+1ms[0m
2018-11-15T14:24:51.853098490Z    [32;1mRepl [0m  [isDataReceived()] result: "312
2018-11-15T14:24:51.853103692Z  => 312
2018-11-15T14:24:51.853107157Z  irb(main):053:0> " [32m+0ms[0m
2018-11-15T14:24:51.853168393Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:51.853311198Z    [32;1mRepl [0m`let currResult = result` //==> "312
2018-11-15T14:24:51.853324276Z  => 312
2018-11-15T14:24:51.853330032Z  irb(main):053:0> " [32m+0ms[0m
2018-11-15T14:24:51.853471525Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:51.858705973Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:51.858720702Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:51.858805141Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:51.858956385Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:51.858965726Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:51.858969524Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:51.858972808Z        return result += data;
2018-11-15T14:24:51.858976062Z      })] [32m+0ms[0m
2018-11-15T14:24:51.859058670Z    [32;1mRepl [0m  resolve(result = "312
2018-11-15T14:24:51.859065932Z  => 312
2018-11-15T14:24:51.859069415Z  irb(main):053:0> ") [32m+0ms[0m
2018-11-15T14:24:51.859218811Z    [32;1mserver [0m  [emitOutput] output: 312
2018-11-15T14:24:51.859246862Z  => 312
2018-11-15T14:24:51.859250243Z  irb(main):053:0>  [32m+9ms[0m
2018-11-15T14:24:51.859307788Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:24:51.859411877Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}] [32m+0ms[0m
2018-11-15T14:24:51.859531825Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):053:0> \"}]"] [33m+157ms[0m
2018-11-15T14:24:51.859605508Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}]) [34m+9ms[0m
2018-11-15T14:24:51.859674164Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:51.859758957Z    [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):053:0> "}]" [33m+10ms[0m
2018-11-15T14:24:51.874643653Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+15ms[0m
2018-11-15T14:24:51.874683507Z    [34;1mengine:socket [0mpacket [34m+15ms[0m
2018-11-15T14:24:51.874950241Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+15ms[0m
2018-11-15T14:24:51.875040337Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+24ms[0m
2018-11-15T14:24:51.875165505Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+1ms[0m
2018-11-15T14:24:51.875247854Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:51.875329399Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+16ms[0m
2018-11-15T14:24:51.875456680Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:51.875575983Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:52.022552696Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+148ms[0m
2018-11-15T14:24:52.022582387Z    [34;1mengine:socket [0mpacket [34m+148ms[0m
2018-11-15T14:24:52.022790053Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+147ms[0m
2018-11-15T14:24:52.022899706Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+147ms[0m
2018-11-15T14:24:52.023001587Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:52.023145937Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:52.023199664Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+148ms[0m
2018-11-15T14:24:52.023335421Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:52.023418009Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:52.028509765Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
2018-11-15T14:24:52.028638295Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:52.028729400Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+5ms[0m
2018-11-15T14:24:52.028871101Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+6ms[0m
2018-11-15T14:24:52.028976701Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:52.028990136Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:52.029082639Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+5ms[0m
2018-11-15T14:24:52.029094831Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.029232281Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+1ms[0m
2018-11-15T14:24:52.032737542Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+4ms[0m
2018-11-15T14:24:52.032753501Z    [34;1mengine:socket [0mpacket [34m+4ms[0m
2018-11-15T14:24:52.033186254Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+3ms[0m
2018-11-15T14:24:52.033776580Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
2018-11-15T14:24:52.033788522Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:52.033854482Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:52.034022982Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
2018-11-15T14:24:52.034190002Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:24:52.036515929Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+2ms[0m
2018-11-15T14:24:52.036752197Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"312"}]" [33m+4ms[0m
2018-11-15T14:24:52.036763109Z    [34;1mengine:socket [0mpacket [34m+4ms[0m
2018-11-15T14:24:52.036923030Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [32m+0ms[0m
2018-11-15T14:24:52.037133516Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"312"}]} [36m+3ms[0m
2018-11-15T14:24:52.037142843Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"312"}] [36m+0ms[0m
2018-11-15T14:24:52.037199750Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"312"}] [36m+1ms[0m
2018-11-15T14:24:52.037286138Z    [32;1mserver [0m  ["evaluate"] { code: 312 } [32m+4ms[0m
2018-11-15T14:24:52.037292938Z    [32;1mRepl [0m[bufferWrite(string = "312", bufferInterval = 5, write = true)] [32m+179ms[0m
2018-11-15T14:24:52.037370846Z    [32;1mRepl [0m  this.process.write('312' + '\n') [32m+0ms[0m
2018-11-15T14:24:52.037377543Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:52.037970606Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:52.037982749Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:52.037986581Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:52.037989886Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:52.037993267Z        return result !== '';
2018-11-15T14:24:52.037996383Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:52.037999826Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:52.038003381Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:52.038006664Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:52.038009864Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:52.038013043Z          if (condFunc()) {
2018-11-15T14:24:52.038016150Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:52.038019701Z            return resolve(value);
2018-11-15T14:24:52.038022864Z          }
2018-11-15T14:24:52.038025914Z          setTimeout(wait, interval);
2018-11-15T14:24:52.038029083Z        } [32m+0ms[0m
2018-11-15T14:24:52.038032246Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:52.038035587Z    [32;1mRepl [0m  [concatResult(data = 312
2018-11-15T14:24:52.038038904Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:52.038042069Z    [32;1mRepl [0m  [concatResult(data = => 312
2018-11-15T14:24:52.038045393Z  )] result: "312
2018-11-15T14:24:52.038048538Z  " [32m+0ms[0m
2018-11-15T14:24:52.038051707Z    [32;1mRepl [0m  [concatResult(data = irb(main):054:0> )] result: "312
2018-11-15T14:24:52.038055215Z  => 312
2018-11-15T14:24:52.038058433Z  " [32m+0ms[0m
2018-11-15T14:24:52.042306430Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:52.042332348Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:52.042338819Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:52.042343865Z          if (condFunc()) {
2018-11-15T14:24:52.042347966Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:52.042354054Z            return resolve(value);
2018-11-15T14:24:52.042358963Z          }
2018-11-15T14:24:52.042363157Z          setTimeout(wait, interval);
2018-11-15T14:24:52.042368163Z        } [32m+5ms[0m
2018-11-15T14:24:52.042372782Z    [32;1mRepl [0m  [isDataReceived()] result: "312
2018-11-15T14:24:52.042377889Z  => 312
2018-11-15T14:24:52.042382936Z  irb(main):054:0> " [32m+0ms[0m
2018-11-15T14:24:52.042387568Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:52.042392573Z    [32;1mRepl [0m`let currResult = result` //==> "312
2018-11-15T14:24:52.042397701Z  => 312
2018-11-15T14:24:52.042402276Z  irb(main):054:0> " [32m+0ms[0m
2018-11-15T14:24:52.042407827Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:52.047599568Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:52.047782900Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:52.047791229Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:52.047794783Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:52.047798240Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:52.047801922Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:52.047805159Z        return result += data;
2018-11-15T14:24:52.047808276Z      })] [32m+0ms[0m
2018-11-15T14:24:52.047811469Z    [32;1mRepl [0m  resolve(result = "312
2018-11-15T14:24:52.047814775Z  => 312
2018-11-15T14:24:52.047817854Z  irb(main):054:0> ") [32m+0ms[0m
2018-11-15T14:24:52.047821327Z    [32;1mserver [0m  [emitOutput] output: 312
2018-11-15T14:24:52.047824626Z  => 312
2018-11-15T14:24:52.047827662Z  irb(main):054:0>  [32m+10ms[0m
2018-11-15T14:24:52.047861578Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:24:52.047868698Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}],"nsp":"/"} as 2["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}] [32m+0ms[0m
2018-11-15T14:24:52.047882546Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"312\\r\\n=> 312\\r\\nirb(main):054:0> \"}]"] [33m+188ms[0m
2018-11-15T14:24:52.047896404Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}]) [34m+11ms[0m
2018-11-15T14:24:52.047901825Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:52.047905565Z    [33;1mengine:ws [0mwriting "42["output",{"output":"312\r\n=> 312\r\nirb(main):054:0> "}]" [33m+11ms[0m
2018-11-15T14:24:52.066944738Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+19ms[0m
2018-11-15T14:24:52.067071535Z    [34;1mengine:socket [0mpacket [34m+19ms[0m
2018-11-15T14:24:52.067174150Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+19ms[0m
2018-11-15T14:24:52.067190217Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+29ms[0m
2018-11-15T14:24:52.067196285Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:52.067201871Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:52.067207356Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+20ms[0m
2018-11-15T14:24:52.067212779Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:52.067230018Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:52.259502041Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+193ms[0m
2018-11-15T14:24:52.259601441Z    [34;1mengine:socket [0mpacket [34m+193ms[0m
2018-11-15T14:24:52.259719272Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+192ms[0m
2018-11-15T14:24:52.259748005Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+193ms[0m
2018-11-15T14:24:52.259843961Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:52.259858525Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:52.259937164Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+192ms[0m
2018-11-15T14:24:52.259948348Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.260120596Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:52.298147848Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+38ms[0m
2018-11-15T14:24:52.298299687Z    [34;1mengine:socket [0mpacket [34m+38ms[0m
2018-11-15T14:24:52.298310201Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+39ms[0m
2018-11-15T14:24:52.298323609Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+39ms[0m
2018-11-15T14:24:52.298377356Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:52.298385068Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:52.298419908Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+39ms[0m
2018-11-15T14:24:52.298467761Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.298513627Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
2018-11-15T14:24:52.385040592Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123"}]" [33m+87ms[0m
2018-11-15T14:24:52.385083290Z    [34;1mengine:socket [0mpacket [34m+87ms[0m
2018-11-15T14:24:52.385180199Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [32m+87ms[0m
2018-11-15T14:24:52.385190012Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [36m+87ms[0m
2018-11-15T14:24:52.385239081Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
2018-11-15T14:24:52.385256626Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
2018-11-15T14:24:52.385260554Z    [32;1mserver [0m  ["lineChanged"] { line: 3123 } [32m+87ms[0m
2018-11-15T14:24:52.385301928Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.385323441Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} as 2["syncLine",{"line":"3123"}] [32m+0ms[0m
2018-11-15T14:24:52.390799488Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:24:52.390817559Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:52.390883847Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
2018-11-15T14:24:52.391075899Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
2018-11-15T14:24:52.391093501Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:52.391098072Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:52.391185040Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
2018-11-15T14:24:52.391193320Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:52.391239816Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:52.391370103Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3123"}]" [33m+1ms[0m
2018-11-15T14:24:52.391387111Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:52.392082467Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [32m+0ms[0m
2018-11-15T14:24:52.392105513Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [36m+1ms[0m
2018-11-15T14:24:52.392110450Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3123"}] [36m+0ms[0m
2018-11-15T14:24:52.392114410Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3123"}] [36m+0ms[0m
2018-11-15T14:24:52.392118119Z    [32;1mserver [0m  ["evaluate"] { code: 3123 } [32m+1ms[0m
2018-11-15T14:24:52.392121794Z    [32;1mRepl [0m[bufferWrite(string = "3123", bufferInterval = 5, write = true)] [32m+344ms[0m
2018-11-15T14:24:52.392125455Z    [32;1mRepl [0m  this.process.write('3123' + '\n') [32m+0ms[0m
2018-11-15T14:24:52.392129060Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:52.392132516Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:52.392146113Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:52.392149927Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:52.392153370Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:52.392156772Z        return result !== '';
2018-11-15T14:24:52.392159955Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:52.392163300Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:52.392167090Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:52.392170366Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:52.392173495Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:52.392176735Z          if (condFunc()) {
2018-11-15T14:24:52.392179929Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:52.392183350Z            return resolve(value);
2018-11-15T14:24:52.392186481Z          }
2018-11-15T14:24:52.392189530Z          setTimeout(wait, interval);
2018-11-15T14:24:52.392192798Z        } [32m+0ms[0m
2018-11-15T14:24:52.392195933Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:52.392199453Z    [32;1mRepl [0m  [concatResult(data = 3123
2018-11-15T14:24:52.392202767Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:52.392206122Z    [32;1mRepl [0m  [concatResult(data = => 3123
2018-11-15T14:24:52.392209427Z  )] result: "3123
2018-11-15T14:24:52.392212547Z  " [32m+0ms[0m
2018-11-15T14:24:52.392215709Z    [32;1mRepl [0m  [concatResult(data = irb(main):055:0> )] result: "3123
2018-11-15T14:24:52.392219284Z  => 3123
2018-11-15T14:24:52.392222408Z  " [32m+1ms[0m
2018-11-15T14:24:52.393313341Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:52.393326769Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:52.393330806Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:52.393334365Z          if (condFunc()) {
2018-11-15T14:24:52.393337590Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:52.393341411Z            return resolve(value);
2018-11-15T14:24:52.393344635Z          }
2018-11-15T14:24:52.393347856Z          setTimeout(wait, interval);
2018-11-15T14:24:52.393352551Z        } [32m+1ms[0m
2018-11-15T14:24:52.393357511Z    [32;1mRepl [0m  [isDataReceived()] result: "3123
2018-11-15T14:24:52.393372351Z  => 3123
2018-11-15T14:24:52.393390829Z  irb(main):055:0> " [32m+0ms[0m
2018-11-15T14:24:52.393396135Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:52.393401407Z    [32;1mRepl [0m`let currResult = result` //==> "3123
2018-11-15T14:24:52.393406322Z  => 3123
2018-11-15T14:24:52.393410721Z  irb(main):055:0> " [32m+0ms[0m
2018-11-15T14:24:52.393585931Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:52.398575448Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:52.398593821Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:52.398803108Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:52.398816329Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:52.398822365Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:52.398828052Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:52.398833518Z        return result += data;
2018-11-15T14:24:52.398838727Z      })] [32m+0ms[0m
2018-11-15T14:24:52.398843968Z    [32;1mRepl [0m  resolve(result = "3123
2018-11-15T14:24:52.398849367Z  => 3123
2018-11-15T14:24:52.398854630Z  irb(main):055:0> ") [32m+0ms[0m
2018-11-15T14:24:52.398860247Z    [32;1mserver [0m  [emitOutput] output: 3123
2018-11-15T14:24:52.398865663Z  => 3123
2018-11-15T14:24:52.398871001Z  irb(main):055:0>  [32m+7ms[0m
2018-11-15T14:24:52.398876250Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:52.398886585Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}],"nsp":"/"} as 2["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}] [32m+0ms[0m
2018-11-15T14:24:52.398894922Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3123\\r\\n=> 3123\\r\\nirb(main):055:0> \"}]"] [33m+351ms[0m
2018-11-15T14:24:52.398902325Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}]) [34m+7ms[0m
2018-11-15T14:24:52.398909100Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:52.399053849Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3123\r\n=> 3123\r\nirb(main):055:0> "}]" [33m+7ms[0m
2018-11-15T14:24:52.521250606Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+122ms[0m
2018-11-15T14:24:52.521355040Z    [34;1mengine:socket [0mpacket [34m+122ms[0m
2018-11-15T14:24:52.521361041Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+122ms[0m
2018-11-15T14:24:52.521366104Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+129ms[0m
2018-11-15T14:24:52.521370592Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:52.521374512Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:52.521378357Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+122ms[0m
2018-11-15T14:24:52.521382016Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.521386189Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:52.527063326Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:24:52.527083313Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:52.527088053Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
2018-11-15T14:24:52.527093048Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
2018-11-15T14:24:52.527127736Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:52.527131999Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:52.527135858Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:24:52.527139693Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.527144032Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:52.601101297Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+74ms[0m
2018-11-15T14:24:52.601145449Z    [34;1mengine:socket [0mpacket [34m+74ms[0m
2018-11-15T14:24:52.601176612Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+74ms[0m
2018-11-15T14:24:52.601182863Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+74ms[0m
2018-11-15T14:24:52.601187611Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:52.601191353Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:52.601195084Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+74ms[0m
2018-11-15T14:24:52.601203390Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.601208054Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:52.731207080Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+130ms[0m
2018-11-15T14:24:52.731293490Z    [34;1mengine:socket [0mpacket [34m+130ms[0m
2018-11-15T14:24:52.731481134Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+131ms[0m
2018-11-15T14:24:52.731502044Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+131ms[0m
2018-11-15T14:24:52.731506764Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:52.731510782Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:52.731514701Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+131ms[0m
2018-11-15T14:24:52.731518440Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.731522907Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
2018-11-15T14:24:52.736096879Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+5ms[0m
2018-11-15T14:24:52.736206076Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:52.736215865Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
2018-11-15T14:24:52.736360905Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+5ms[0m
2018-11-15T14:24:52.736381623Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:52.736386144Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:52.736389893Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+5ms[0m
2018-11-15T14:24:52.736460792Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.736468758Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:24:52.768379946Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+32ms[0m
2018-11-15T14:24:52.768438940Z    [34;1mengine:socket [0mpacket [34m+31ms[0m
2018-11-15T14:24:52.768448128Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
2018-11-15T14:24:52.768455571Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+31ms[0m
2018-11-15T14:24:52.768461895Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:52.768468059Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:52.768473907Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+32ms[0m
2018-11-15T14:24:52.768479699Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:52.768504763Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:52.782463634Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12312"}]" [33m+14ms[0m
2018-11-15T14:24:52.782518139Z    [34;1mengine:socket [0mpacket [34m+14ms[0m
2018-11-15T14:24:52.782526705Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12312"}]} [32m+13ms[0m
2018-11-15T14:24:52.782534209Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12312"}]} [36m+14ms[0m
2018-11-15T14:24:52.782541005Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12312"}] [36m+0ms[0m
2018-11-15T14:24:52.782556958Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12312"}] [36m+0ms[0m
2018-11-15T14:24:52.782600155Z    [32;1mserver [0m  ["evaluate"] { code: 12312 } [32m+13ms[0m
2018-11-15T14:24:52.782610472Z    [32;1mRepl [0m[bufferWrite(string = "12312", bufferInterval = 5, write = true)] [32m+383ms[0m
2018-11-15T14:24:52.782616746Z    [32;1mRepl [0m  this.process.write('12312' + '\n') [32m+0ms[0m
2018-11-15T14:24:52.782623643Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:52.782629101Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:52.782634672Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:52.782639993Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:52.782645192Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:52.782650448Z        return result !== '';
2018-11-15T14:24:52.782655309Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:52.782660484Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:52.782687101Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:52.782692771Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:52.782697984Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:52.782703126Z          if (condFunc()) {
2018-11-15T14:24:52.782707997Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:52.782713418Z            return resolve(value);
2018-11-15T14:24:52.782718240Z          }
2018-11-15T14:24:52.782723141Z          setTimeout(wait, interval);
2018-11-15T14:24:52.782728086Z        } [32m+0ms[0m
2018-11-15T14:24:52.782733168Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:52.782738593Z    [32;1mRepl [0m  [concatResult(data = 12312
2018-11-15T14:24:52.782743764Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:52.782769224Z    [32;1mRepl [0m  [concatResult(data = => 12312
2018-11-15T14:24:52.782776540Z  )] result: "12312
2018-11-15T14:24:52.782781503Z  " [32m+1ms[0m
2018-11-15T14:24:52.782932200Z    [32;1mRepl [0m  [concatResult(data = irb(main):056:0> )] result: "12312
2018-11-15T14:24:52.782943648Z  => 12312
2018-11-15T14:24:52.782948998Z  " [32m+0ms[0m
2018-11-15T14:24:52.784766815Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:52.784783188Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:52.784800548Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:52.784890298Z          if (condFunc()) {
2018-11-15T14:24:52.784940626Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:52.784948572Z            return resolve(value);
2018-11-15T14:24:52.784953746Z          }
2018-11-15T14:24:52.784958503Z          setTimeout(wait, interval);
2018-11-15T14:24:52.784963417Z        } [32m+1ms[0m
2018-11-15T14:24:52.784968454Z    [32;1mRepl [0m  [isDataReceived()] result: "12312
2018-11-15T14:24:52.784973667Z  => 12312
2018-11-15T14:24:52.784978513Z  irb(main):056:0> " [32m+0ms[0m
2018-11-15T14:24:52.784983826Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:52.784989518Z    [32;1mRepl [0m`let currResult = result` //==> "12312
2018-11-15T14:24:52.784995034Z  => 12312
2018-11-15T14:24:52.785021917Z  irb(main):056:0> " [32m+0ms[0m
2018-11-15T14:24:52.785028699Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:52.789163642Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:52.789380842Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:52.789458848Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:52.789468500Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:52.789474041Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:52.789479258Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:52.789484242Z        return result += data;
2018-11-15T14:24:52.789508539Z      })] [32m+0ms[0m
2018-11-15T14:24:52.789515045Z    [32;1mRepl [0m  resolve(result = "12312
2018-11-15T14:24:52.789520271Z  => 12312
2018-11-15T14:24:52.789528333Z  irb(main):056:0> ") [32m+0ms[0m
2018-11-15T14:24:52.789533554Z    [32;1mserver [0m  [emitOutput] output: 12312
2018-11-15T14:24:52.789538813Z  => 12312
2018-11-15T14:24:52.789543557Z  irb(main):056:0>  [32m+8ms[0m
2018-11-15T14:24:52.789662001Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:52.789674335Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}],"nsp":"/"} as 2["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}] [32m+0ms[0m
2018-11-15T14:24:52.789692497Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12312\\r\\n=> 12312\\r\\nirb(main):056:0> \"}]"] [33m+391ms[0m
2018-11-15T14:24:52.789700578Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}]) [34m+8ms[0m
2018-11-15T14:24:52.789707182Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:52.789755802Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12312\r\n=> 12312\r\nirb(main):056:0> "}]" [33m+8ms[0m
2018-11-15T14:24:52.816273303Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+26ms[0m
2018-11-15T14:24:52.816339917Z    [34;1mengine:socket [0mpacket [34m+27ms[0m
2018-11-15T14:24:52.816427349Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+27ms[0m
2018-11-15T14:24:52.816437590Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+35ms[0m
2018-11-15T14:24:52.816442008Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:52.816459552Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:52.816464312Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+27ms[0m
2018-11-15T14:24:52.816468089Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:52.816539240Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:53.171607619Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+356ms[0m
2018-11-15T14:24:53.171720655Z    [34;1mengine:socket [0mpacket [34m+355ms[0m
2018-11-15T14:24:53.171870157Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+355ms[0m
2018-11-15T14:24:53.172626282Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+355ms[0m
2018-11-15T14:24:53.172990091Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+1ms[0m
2018-11-15T14:24:53.173303484Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+1ms[0m
2018-11-15T14:24:53.173729837Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+357ms[0m
2018-11-15T14:24:53.174078936Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:24:53.174316957Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+1ms[0m
2018-11-15T14:24:53.179868262Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+8ms[0m
2018-11-15T14:24:53.180078115Z    [34;1mengine:socket [0mpacket [34m+8ms[0m
2018-11-15T14:24:53.180353863Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+6ms[0m
2018-11-15T14:24:53.180564606Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+7ms[0m
2018-11-15T14:24:53.180768982Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:53.180924562Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:24:53.181109124Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+8ms[0m
2018-11-15T14:24:53.181305385Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:53.181494118Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
2018-11-15T14:24:53.253323206Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123"}]" [33m+74ms[0m
2018-11-15T14:24:53.253682845Z    [34;1mengine:socket [0mpacket [34m+74ms[0m
2018-11-15T14:24:53.254174850Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [32m+72ms[0m
2018-11-15T14:24:53.254412708Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [36m+74ms[0m
2018-11-15T14:24:53.254603494Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
2018-11-15T14:24:53.254787106Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
2018-11-15T14:24:53.254973078Z    [32;1mserver [0m  ["lineChanged"] { line: 3123 } [32m+73ms[0m
2018-11-15T14:24:53.255209180Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:24:53.255398240Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} as 2["syncLine",{"line":"3123"}] [32m+0ms[0m
2018-11-15T14:24:53.656622473Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31231"}]" [33m+402ms[0m
2018-11-15T14:24:53.656668479Z    [34;1mengine:socket [0mpacket [34m+403ms[0m
2018-11-15T14:24:53.656674367Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31231"}]} [32m+401ms[0m
2018-11-15T14:24:53.656679420Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31231"}]} [36m+402ms[0m
2018-11-15T14:24:53.656683653Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31231"}] [36m+0ms[0m
2018-11-15T14:24:53.656687651Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31231"}] [36m+0ms[0m
2018-11-15T14:24:53.656691529Z    [32;1mserver [0m  ["lineChanged"] { line: 31231 } [32m+402ms[0m
2018-11-15T14:24:53.656695069Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:53.656699177Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31231"}],"nsp":"/"} as 2["syncLine",{"line":"31231"}] [32m+0ms[0m
2018-11-15T14:24:53.678729343Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312312"}]" [33m+23ms[0m
2018-11-15T14:24:53.678773109Z    [34;1mengine:socket [0mpacket [34m+22ms[0m
2018-11-15T14:24:53.678779353Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312312"}]} [32m+22ms[0m
2018-11-15T14:24:53.678784324Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312312"}]} [36m+22ms[0m
2018-11-15T14:24:53.678788481Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312312"}] [36m+0ms[0m
2018-11-15T14:24:53.678792515Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312312"}] [36m+0ms[0m
2018-11-15T14:24:53.678796283Z    [32;1mserver [0m  ["lineChanged"] { line: 312312 } [32m+22ms[0m
2018-11-15T14:24:53.678799876Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:53.678803944Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312312"}],"nsp":"/"} as 2["syncLine",{"line":"312312"}] [32m+0ms[0m
2018-11-15T14:24:53.757863295Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123123"}]" [33m+78ms[0m
2018-11-15T14:24:53.757938865Z    [34;1mengine:socket [0mpacket [34m+78ms[0m
2018-11-15T14:24:53.757946905Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123123"}]} [32m+79ms[0m
2018-11-15T14:24:53.757954410Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123123"}]} [36m+79ms[0m
2018-11-15T14:24:53.757961098Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123123"}] [36m+0ms[0m
2018-11-15T14:24:53.757985420Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123123"}] [36m+0ms[0m
2018-11-15T14:24:53.757991669Z    [32;1mserver [0m  ["lineChanged"] { line: 3123123 } [32m+79ms[0m
2018-11-15T14:24:53.757997450Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:53.758004145Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123123"}],"nsp":"/"} as 2["syncLine",{"line":"3123123"}] [32m+0ms[0m
2018-11-15T14:24:54.349617606Z    [31;1mexpress:router [0mdispatching GET / [31m+12m[0m
2018-11-15T14:24:54.349753540Z    [31;1mexpress:router [0mquery  : / [31m+0ms[0m
2018-11-15T14:24:54.351502770Z    [31;1mexpress:router [0mexpressInit  : / [31m+1ms[0m
2018-11-15T14:24:54.351516456Z    [31;1mexpress:router [0mtextParser  : / [31m+0ms[0m
2018-11-15T14:24:54.351520796Z    [32;1mbody-parser:text [0mskip empty body [32m+12m[0m
2018-11-15T14:24:54.351524421Z    [31;1mexpress:router [0mserveStatic  : / [31m+0ms[0m
2018-11-15T14:24:54.351528012Z    [36;1msend [0mstat "/app/public/index.html" [36m+12m[0m
2018-11-15T14:24:54.351531968Z    [36;1msend [0mpipe "/app/public/index.html" [36m+1ms[0m
2018-11-15T14:24:54.351535591Z    [36;1msend [0maccept ranges [36m+0ms[0m
2018-11-15T14:24:54.351774203Z    [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
2018-11-15T14:24:54.351986816Z    [36;1msend [0mmodified Thu, 15 Nov 2018 07:15:53 GMT [36m+0ms[0m
2018-11-15T14:24:54.352237093Z    [36;1msend [0metag W/"28c-1671639e828" [36m+1ms[0m
2018-11-15T14:24:54.352594004Z    [36;1msend [0mcontent-type text/html [36m+0ms[0m
2018-11-15T14:24:54.390526764Z    [33;1msocket.io:client [0mclient close with reason transport close [33m+2s[0m
2018-11-15T14:24:54.390815125Z    [36;1msocket.io:socket [0mclosing socket - reason transport close [36m+633ms[0m
2018-11-15T14:24:54.391129550Z    [32;1mserver [0m  ["disconnect"] [32m+633ms[0m
2018-11-15T14:24:54.391549552Z    [32;1mserver [0m    [io of / .clients] error: null, clients:  [32m+1ms[0m
2018-11-15T14:24:54.393224725Z    [32;1mRepl [0m[kill()] this.process: UnixTerminal { _internalee: EventEmitter { _events: [Object: null prototype] {}, _eventsCount: [33m0[39m, _maxListeners: [90mundefined[39m }, _socket: PipeSocket { connecting: [33mfalse[39m, _hadError: [33mfalse[39m, _handle: Pipe { onread: [36m[Function: onStreamRead][39m, reading: [33mtrue[39m, [[32mSymbol(owner)[39m]: [36m[Circular][39m }, _parent: [1mnull[22m, _host: [1mnull[22m, _readableState: ReadableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m }, length: [33m0[39m, pipes: [1mnull[22m, pipesCount: [33m0[39m, flowing: [33mtrue[39m, ended: [33mfalse[39m, endEmitted: [33mfalse[39m, reading: [33mtrue[39m, sync: [33mfalse[39m, needReadable: [33mtrue[39m, emittedReadable: [33mfalse[39m, readableListening: [33mfalse[39m, resumeScheduled: [33mfalse[39m, emitClose: [33mfalse[39m, destroyed: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, awaitDrain: [33m0[39m, readingMore: [33mfalse[39m, decoder: StringDecoder { encoding: [32m'utf8'[39m, [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> }, encoding: [32m'utf8'[39m }, readable: [33mfalse[39m, _events: [Object: null prototype] { end: [36m[Function: onReadableStreamEnd][39m, error: [36m[Function][39m, close: [36m[Function][39m }, _eventsCount: [33m3[39m, _maxListeners: [90mundefined[39m, _writableState: WritableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, finalCalled: [33mfalse[39m, needDrain: [33mfalse[39m, ending: [33mfalse[39m, ended: [33mfalse[39m, finished: [33mfalse[39m, destroyed: [33mfalse[39m, decodeStrings: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, length: [33m0[39m, writing: [33mfalse[39m, corked: [33m0[39m, sync: [33mfalse[39m, bufferProcessing: [33mfalse[39m, onwrite: [36m[Function: bound onwrite][39m, writecb: [1mnull[22m, writelen: [33m0[39m, bufferedRequest: [1mnull[22m, lastBufferedRequest: [1mnull[22m, pendingcb: [33m0[39m, prefinished: [33mfalse[39m, errorEmitted: [33mfalse[39m, emitClose: [33mfalse[39m, bufferedRequestCount: [33m0[39m, corkedRequestsFree: { next: [1mnull[22m, entry: [1mnull[22m, finish: [36m[Function: bound onCorkedFinish][39m } }, writable: [33mfalse[39m, allowHalfOpen: [33mfalse[39m, _sockname: [1mnull[22m, _pendingData: [1mnull[22m, _pendingEncoding: [32m''[39m, server: [1mnull[22m, _server: [1mnull[22m, [[32mSymbol(asyncId)[39m]: [33m85[39m, [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m, [[32mSymbol(timeout)[39m]: [1mnull[22m, [[32mSymbol(kBytesRead)[39m]: [33m0[39m, [[32mSymbol(kBytesWritten)[39m]: [33m0[39m }, _pid: [33m28[39m, _fd: [33m22[39m, _pty: [32m'/dev/pts/1'[39m, _file: [32m'irb'[39m, _name: [32m'xterm'[39m, _readable: [33mtrue[39m, _writable: [33mtrue[39m } [32m+2s[0m
2018-11-15T14:24:54.395267332Z    [32;1mRepl [0mRepl process killed. [32m+2ms[0m
2018-11-15T14:24:54.397500016Z    [31;1mexpress:router [0mdispatching GET /main.js [31m+47ms[0m
2018-11-15T14:24:54.397781433Z    [31;1mexpress:router [0mquery  : /main.js [31m+0ms[0m
2018-11-15T14:24:54.398013083Z    [31;1mexpress:router [0mexpressInit  : /main.js [31m+0ms[0m
2018-11-15T14:24:54.398257250Z    [31;1mexpress:router [0mtextParser  : /main.js [31m+1ms[0m
2018-11-15T14:24:54.398465786Z    [32;1mbody-parser:text [0mskip empty body [32m+48ms[0m
2018-11-15T14:24:54.398664849Z    [31;1mexpress:router [0mserveStatic  : /main.js [31m+0ms[0m
2018-11-15T14:24:54.398942386Z    [36;1msend [0mstat "/app/public/main.js" [36m+46ms[0m
2018-11-15T14:24:54.399273768Z    [36;1msend [0mpipe "/app/public/main.js" [36m+1ms[0m
2018-11-15T14:24:54.399464880Z    [36;1msend [0maccept ranges [36m+0ms[0m
2018-11-15T14:24:54.399658450Z    [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
2018-11-15T14:24:54.399847004Z    [36;1msend [0mmodified Thu, 15 Nov 2018 14:12:09 GMT [36m+0ms[0m
2018-11-15T14:24:54.400041977Z    [36;1msend [0metag W/"1250ee-16717b702a8" [36m+0ms[0m
2018-11-15T14:24:54.400274194Z    [36;1msend [0mcontent-type application/javascript [36m+1ms[0m
2018-11-15T14:24:55.181451369Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+12m[0m
2018-11-15T14:24:55.181705930Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhDy" [35m+0ms[0m
2018-11-15T14:24:55.182220576Z    [35;1mengine [0mhandshaking client "HlDmTPAfzYNr-CmBAAAF" [35m+1ms[0m
2018-11-15T14:24:55.182702926Z    [34;1mengine:socket [0msending packet "open" ({"sid":"HlDmTPAfzYNr-CmBAAAF","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+1s[0m
2018-11-15T14:24:55.183144598Z    [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
2018-11-15T14:24:55.183417072Z    [31;1mengine:polling [0msetting request [31m+12m[0m
2018-11-15T14:24:55.183658810Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:24:55.184010005Z    [31;1mengine:polling [0mwriting "96:0{"sid":"HlDmTPAfzYNr-CmBAAAF","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
2018-11-15T14:24:55.184596544Z    [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
2018-11-15T14:24:55.184894318Z    [33;1msocket.io:server [0mincoming connection with id HlDmTPAfzYNr-CmBAAAF [33m+12m[0m
2018-11-15T14:24:55.185239651Z    [33;1msocket.io:client [0mconnecting to namespace / [33m+795ms[0m
2018-11-15T14:24:55.185639665Z    [36;1msocket.io:namespace [0madding socket to nsp / [36m+12m[0m
2018-11-15T14:24:55.186145883Z    [36;1msocket.io:socket [0msocket connected - writing packet [36m+795ms[0m
2018-11-15T14:24:55.186459048Z    [36;1msocket.io:socket [0mjoining room HlDmTPAfzYNr-CmBAAAF [36m+1ms[0m
2018-11-15T14:24:55.186725056Z    [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
2018-11-15T14:24:55.186960617Z    [32;1mserver [0mio.on("connection", (socket) => { [32m+795ms[0m
2018-11-15T14:24:55.187272398Z    [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
2018-11-15T14:24:55.187291467Z   [32m+1ms[0m
2018-11-15T14:24:55.187558960Z    [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+2ms[0m
2018-11-15T14:24:55.187874241Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+1s[0m
2018-11-15T14:24:55.188107957Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
2018-11-15T14:24:55.188403808Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+4ms[0m
2018-11-15T14:24:55.188728097Z    [36;1msocket.io:socket [0mjoined room HlDmTPAfzYNr-CmBAAAF [36m+2ms[0m
2018-11-15T14:24:55.188965518Z    [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: HlDmTPAfzYNr-CmBAAAF [32m+1ms[0m
2018-11-15T14:24:55.189181779Z    [32;1mserver [0m  [initRepl] lang: ruby, welcome_msg: WELCOME TO SPACECRAFT!
2018-11-15T14:24:55.189195848Z   [32m+0ms[0m
2018-11-15T14:24:55.189501945Z    [32;1mRepl [0m[kill()] this.process: [1mnull[22m [32m+796ms[0m
2018-11-15T14:24:55.189717711Z    [32;1mRepl [0mRepl process killed. [32m+0ms[0m
2018-11-15T14:24:55.189954430Z    [32;1mRepl [0m[Repl.init(language = "ruby")] [32m+0ms[0m
2018-11-15T14:24:55.197629394Z    [32;1mRepl [0m  INITIALIZED command: irb [32m+5ms[0m
2018-11-15T14:24:55.197668851Z    [32;1mRepl [0m  this.process: UnixTerminal {
2018-11-15T14:24:55.197685303Z    [32;1mRepl [0m  _internalee:
2018-11-15T14:24:55.197691024Z    [32;1mRepl [0m   EventEmitter {
2018-11-15T14:24:55.197710678Z    [32;1mRepl [0m     _events: [Object: null prototype] {},
2018-11-15T14:24:55.197717583Z    [32;1mRepl [0m     _eventsCount: [33m0[39m,
2018-11-15T14:24:55.197723815Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
2018-11-15T14:24:55.197730314Z    [32;1mRepl [0m  _socket:
2018-11-15T14:24:55.197735510Z    [32;1mRepl [0m   PipeSocket {
2018-11-15T14:24:55.197741562Z    [32;1mRepl [0m     connecting: [33mfalse[39m,
2018-11-15T14:24:55.197746671Z    [32;1mRepl [0m     _hadError: [33mfalse[39m,
2018-11-15T14:24:55.197752041Z    [32;1mRepl [0m     _handle:
2018-11-15T14:24:55.197757271Z    [32;1mRepl [0m      Pipe {
2018-11-15T14:24:55.197762629Z    [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
2018-11-15T14:24:55.197768656Z    [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
2018-11-15T14:24:55.197774629Z    [32;1mRepl [0m     _parent: [1mnull[22m,
2018-11-15T14:24:55.197780210Z    [32;1mRepl [0m     _host: [1mnull[22m,
2018-11-15T14:24:55.197785622Z    [32;1mRepl [0m     _readableState:
2018-11-15T14:24:55.197790981Z    [32;1mRepl [0m      ReadableState {
2018-11-15T14:24:55.197796478Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:24:55.197802170Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:24:55.197807667Z    [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
2018-11-15T14:24:55.197815629Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:24:55.197822313Z    [32;1mRepl [0m        pipes: [1mnull[22m,
2018-11-15T14:24:55.197828532Z    [32;1mRepl [0m        pipesCount: [33m0[39m,
2018-11-15T14:24:55.197834138Z    [32;1mRepl [0m        flowing: [1mnull[22m,
2018-11-15T14:24:55.197839679Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:24:55.197844778Z    [32;1mRepl [0m        endEmitted: [33mfalse[39m,
2018-11-15T14:24:55.197849954Z    [32;1mRepl [0m        reading: [33mfalse[39m,
2018-11-15T14:24:55.197855193Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:24:55.197860705Z    [32;1mRepl [0m        needReadable: [33mfalse[39m,
2018-11-15T14:24:55.197865932Z    [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
2018-11-15T14:24:55.197871058Z    [32;1mRepl [0m        readableListening: [33mfalse[39m,
2018-11-15T14:24:55.197882977Z    [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
2018-11-15T14:24:55.197889313Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:24:55.197894383Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:24:55.197900697Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:24:55.197907137Z    [32;1mRepl [0m        awaitDrain: [33m0[39m,
2018-11-15T14:24:55.197915625Z    [32;1mRepl [0m        readingMore: [33mfalse[39m,
2018-11-15T14:24:55.197921141Z    [32;1mRepl [0m        decoder:
2018-11-15T14:24:55.197927229Z    [32;1mRepl [0m         StringDecoder {
2018-11-15T14:24:55.197932501Z    [32;1mRepl [0m           encoding: [32m'utf8'[39m,
2018-11-15T14:24:55.197937665Z    [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
2018-11-15T14:24:55.197943151Z    [32;1mRepl [0m        encoding: [32m'utf8'[39m },
2018-11-15T14:24:55.197948554Z    [32;1mRepl [0m     readable: [33mfalse[39m,
2018-11-15T14:24:55.197954012Z    [32;1mRepl [0m     _events:
2018-11-15T14:24:55.197959031Z    [32;1mRepl [0m      [Object: null prototype] {
2018-11-15T14:24:55.197964274Z    [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
2018-11-15T14:24:55.197969754Z    [32;1mRepl [0m        error: [36m[Function][39m,
2018-11-15T14:24:55.197975380Z    [32;1mRepl [0m        close: [36m[Function][39m },
2018-11-15T14:24:55.197980802Z    [32;1mRepl [0m     _eventsCount: [33m3[39m,
2018-11-15T14:24:55.197986359Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
2018-11-15T14:24:55.197991423Z    [32;1mRepl [0m     _writableState:
2018-11-15T14:24:55.197997289Z    [32;1mRepl [0m      WritableState {
2018-11-15T14:24:55.198003474Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:24:55.198008697Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:24:55.198015023Z    [32;1mRepl [0m        finalCalled: [33mfalse[39m,
2018-11-15T14:24:55.198020060Z    [32;1mRepl [0m        needDrain: [33mfalse[39m,
2018-11-15T14:24:55.198024888Z    [32;1mRepl [0m        ending: [33mfalse[39m,
2018-11-15T14:24:55.198030056Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:24:55.198035062Z    [32;1mRepl [0m        finished: [33mfalse[39m,
2018-11-15T14:24:55.198047022Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:24:55.198052839Z    [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
2018-11-15T14:24:55.198057919Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:24:55.198063296Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:24:55.198068321Z    [32;1mRepl [0m        writing: [33mfalse[39m,
2018-11-15T14:24:55.198073561Z    [32;1mRepl [0m        corked: [33m0[39m,
2018-11-15T14:24:55.198079303Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:24:55.198085588Z    [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
2018-11-15T14:24:55.198091787Z    [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
2018-11-15T14:24:55.198098254Z    [32;1mRepl [0m        writecb: [1mnull[22m,
2018-11-15T14:24:55.198104737Z    [32;1mRepl [0m        writelen: [33m0[39m,
2018-11-15T14:24:55.198109953Z    [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
2018-11-15T14:24:55.198114833Z    [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
2018-11-15T14:24:55.198119928Z    [32;1mRepl [0m        pendingcb: [33m0[39m,
2018-11-15T14:24:55.198125796Z    [32;1mRepl [0m        prefinished: [33mfalse[39m,
2018-11-15T14:24:55.198131150Z    [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
2018-11-15T14:24:55.198136494Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:24:55.198141833Z    [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
2018-11-15T14:24:55.198147013Z    [32;1mRepl [0m        corkedRequestsFree:
2018-11-15T14:24:55.198152333Z    [32;1mRepl [0m         { next: [1mnull[22m,
2018-11-15T14:24:55.198157795Z    [32;1mRepl [0m           entry: [1mnull[22m,
2018-11-15T14:24:55.198163359Z    [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
2018-11-15T14:24:55.198168868Z    [32;1mRepl [0m     writable: [33mfalse[39m,
2018-11-15T14:24:55.198174852Z    [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
2018-11-15T14:24:55.198181011Z    [32;1mRepl [0m     _sockname: [1mnull[22m,
2018-11-15T14:24:55.198188012Z    [32;1mRepl [0m     _pendingData: [1mnull[22m,
2018-11-15T14:24:55.198193134Z    [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
2018-11-15T14:24:55.198198668Z    [32;1mRepl [0m     server: [1mnull[22m,
2018-11-15T14:24:55.198211074Z    [32;1mRepl [0m     _server: [1mnull[22m,
2018-11-15T14:24:55.198217583Z    [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m6614[39m,
2018-11-15T14:24:55.198224053Z    [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
2018-11-15T14:24:55.198229448Z    [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
2018-11-15T14:24:55.198234487Z    [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
2018-11-15T14:24:55.198240273Z    [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
2018-11-15T14:24:55.198246851Z    [32;1mRepl [0m  _pid: [33m31[39m,
2018-11-15T14:24:55.198253393Z    [32;1mRepl [0m  _fd: [33m22[39m,
2018-11-15T14:24:55.198258818Z    [32;1mRepl [0m  _pty: [32m'/dev/pts/1'[39m,
2018-11-15T14:24:55.198265373Z    [32;1mRepl [0m  _file: [32m'irb'[39m,
2018-11-15T14:24:55.198271432Z    [32;1mRepl [0m  _name: [32m'xterm'[39m,
2018-11-15T14:24:55.198277824Z    [32;1mRepl [0m  _readable: [33mtrue[39m,
2018-11-15T14:24:55.198283616Z    [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "ruby" [32m+0ms[0m
2018-11-15T14:24:55.198289864Z    [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+2ms[0m
2018-11-15T14:24:55.198295264Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
2018-11-15T14:24:55.198301157Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:55.198306853Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:55.198312507Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:55.198317872Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:55.198323709Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:55.198330288Z        return result !== '';
2018-11-15T14:24:55.198335648Z      }, interval = 1, value = undefined)] [32m+1ms[0m
2018-11-15T14:24:55.198341496Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:55.198346976Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.198351909Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.198356557Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.198361909Z          if (condFunc()) {
2018-11-15T14:24:55.198371480Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.198376552Z            return resolve(value);
2018-11-15T14:24:55.198380986Z          }
2018-11-15T14:24:55.198385160Z          setTimeout(wait, interval);
2018-11-15T14:24:55.198389611Z        } [32m+0ms[0m
2018-11-15T14:24:55.198393967Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.198398835Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.198403339Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.198407978Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.198412416Z          if (condFunc()) {
2018-11-15T14:24:55.198416977Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.198421799Z            return resolve(value);
2018-11-15T14:24:55.198426381Z          }
2018-11-15T14:24:55.198430733Z          setTimeout(wait, interval);
2018-11-15T14:24:55.198435519Z        } [32m+0ms[0m
2018-11-15T14:24:55.198440249Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.204823253Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.205068478Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.205364081Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.205386310Z          if (condFunc()) {
2018-11-15T14:24:55.205392747Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.205398339Z            return resolve(value);
2018-11-15T14:24:55.205402952Z          }
2018-11-15T14:24:55.205407700Z          setTimeout(wait, interval);
2018-11-15T14:24:55.205412501Z        } [32m+7ms[0m
2018-11-15T14:24:55.205744266Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.212509566Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.212557353Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.212565140Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.212570857Z          if (condFunc()) {
2018-11-15T14:24:55.212575611Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.212581153Z            return resolve(value);
2018-11-15T14:24:55.212585718Z          }
2018-11-15T14:24:55.212591211Z          setTimeout(wait, interval);
2018-11-15T14:24:55.212613179Z        } [32m+7ms[0m
2018-11-15T14:24:55.212864617Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.214394685Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.214413230Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.214420312Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.214425709Z          if (condFunc()) {
2018-11-15T14:24:55.214430473Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.214458001Z            return resolve(value);
2018-11-15T14:24:55.214464281Z          }
2018-11-15T14:24:55.214469241Z          setTimeout(wait, interval);
2018-11-15T14:24:55.214475244Z        } [32m+2ms[0m
2018-11-15T14:24:55.214480342Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.215606647Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.215628516Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.215635425Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.215641382Z          if (condFunc()) {
2018-11-15T14:24:55.215646385Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.215651987Z            return resolve(value);
2018-11-15T14:24:55.215657439Z          }
2018-11-15T14:24:55.215662580Z          setTimeout(wait, interval);
2018-11-15T14:24:55.215667353Z        } [32m+1ms[0m
2018-11-15T14:24:55.215674822Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.216848522Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.216863962Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.216870358Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.216875507Z          if (condFunc()) {
2018-11-15T14:24:55.216880262Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.216906062Z            return resolve(value);
2018-11-15T14:24:55.216915159Z          }
2018-11-15T14:24:55.216920182Z          setTimeout(wait, interval);
2018-11-15T14:24:55.216924937Z        } [32m+1ms[0m
2018-11-15T14:24:55.216933937Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.218236206Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.218260539Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.218284758Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.218291824Z          if (condFunc()) {
2018-11-15T14:24:55.218296768Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.218303558Z            return resolve(value);
2018-11-15T14:24:55.218309463Z          }
2018-11-15T14:24:55.218314494Z          setTimeout(wait, interval);
2018-11-15T14:24:55.218320384Z        } [32m+1ms[0m
2018-11-15T14:24:55.218325326Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.219513991Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.219529923Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.219536412Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.219541532Z          if (condFunc()) {
2018-11-15T14:24:55.219546388Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.219575214Z            return resolve(value);
2018-11-15T14:24:55.219582497Z          }
2018-11-15T14:24:55.219587419Z          setTimeout(wait, interval);
2018-11-15T14:24:55.219592104Z        } [32m+2ms[0m
2018-11-15T14:24:55.219597240Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.220751746Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.220768805Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.220783558Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.220789937Z          if (condFunc()) {
2018-11-15T14:24:55.220795305Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.220801006Z            return resolve(value);
2018-11-15T14:24:55.220805920Z          }
2018-11-15T14:24:55.220811105Z          setTimeout(wait, interval);
2018-11-15T14:24:55.220817372Z        } [32m+1ms[0m
2018-11-15T14:24:55.220823041Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.222008431Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.222025574Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.222032294Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.222037646Z          if (condFunc()) {
2018-11-15T14:24:55.222042700Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.222084198Z            return resolve(value);
2018-11-15T14:24:55.222109276Z          }
2018-11-15T14:24:55.222115636Z          setTimeout(wait, interval);
2018-11-15T14:24:55.222121049Z        } [32m+1ms[0m
2018-11-15T14:24:55.222127174Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.223250797Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.223267450Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.223282650Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.223289096Z          if (condFunc()) {
2018-11-15T14:24:55.223294071Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.223299805Z            return resolve(value);
2018-11-15T14:24:55.223304732Z          }
2018-11-15T14:24:55.223309769Z          setTimeout(wait, interval);
2018-11-15T14:24:55.223314538Z        } [32m+2ms[0m
2018-11-15T14:24:55.223319681Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.224510306Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.224525997Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.224532554Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.224537786Z          if (condFunc()) {
2018-11-15T14:24:55.224542603Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.224568912Z            return resolve(value);
2018-11-15T14:24:55.224577320Z          }
2018-11-15T14:24:55.224582667Z          setTimeout(wait, interval);
2018-11-15T14:24:55.224587225Z        } [32m+1ms[0m
2018-11-15T14:24:55.224592436Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.225720470Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.225737601Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.225743461Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.225748896Z          if (condFunc()) {
2018-11-15T14:24:55.225755030Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.225761877Z            return resolve(value);
2018-11-15T14:24:55.225766957Z          }
2018-11-15T14:24:55.225772912Z          setTimeout(wait, interval);
2018-11-15T14:24:55.225777790Z        } [32m+1ms[0m
2018-11-15T14:24:55.225783978Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.226955669Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.226970950Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.226977709Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.226982861Z          if (condFunc()) {
2018-11-15T14:24:55.226987674Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.226993474Z            return resolve(value);
2018-11-15T14:24:55.227022317Z          }
2018-11-15T14:24:55.227027637Z          setTimeout(wait, interval);
2018-11-15T14:24:55.227032418Z        } [32m+1ms[0m
2018-11-15T14:24:55.227037616Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.228206210Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.228228750Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.228236113Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.228242661Z          if (condFunc()) {
2018-11-15T14:24:55.228247938Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.228253653Z            return resolve(value);
2018-11-15T14:24:55.228258667Z          }
2018-11-15T14:24:55.228263727Z          setTimeout(wait, interval);
2018-11-15T14:24:55.228268993Z        } [32m+1ms[0m
2018-11-15T14:24:55.228274021Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.229499790Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.229515903Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.229520090Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.229523674Z          if (condFunc()) {
2018-11-15T14:24:55.229527036Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.229530700Z            return resolve(value);
2018-11-15T14:24:55.229534084Z          }
2018-11-15T14:24:55.229556660Z          setTimeout(wait, interval);
2018-11-15T14:24:55.229563351Z        } [32m+1ms[0m
2018-11-15T14:24:55.229567720Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.230639091Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.230651723Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.230655566Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.230674766Z          if (condFunc()) {
2018-11-15T14:24:55.230678638Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.230682340Z            return resolve(value);
2018-11-15T14:24:55.230685601Z          }
2018-11-15T14:24:55.230688684Z          setTimeout(wait, interval);
2018-11-15T14:24:55.230691977Z        } [32m+1ms[0m
2018-11-15T14:24:55.230695398Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.231827136Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.231839986Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.231843898Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.231847320Z          if (condFunc()) {
2018-11-15T14:24:55.231850707Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.231854400Z            return resolve(value);
2018-11-15T14:24:55.231857722Z          }
2018-11-15T14:24:55.231860855Z          setTimeout(wait, interval);
2018-11-15T14:24:55.231863990Z        } [32m+1ms[0m
2018-11-15T14:24:55.231867262Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.233015015Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.233027497Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.233031237Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.233040759Z          if (condFunc()) {
2018-11-15T14:24:55.233044129Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.233048002Z            return resolve(value);
2018-11-15T14:24:55.233051416Z          }
2018-11-15T14:24:55.233054565Z          setTimeout(wait, interval);
2018-11-15T14:24:55.233057877Z        } [32m+1ms[0m
2018-11-15T14:24:55.233061198Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.234194963Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.234207443Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.234211521Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.234214951Z          if (condFunc()) {
2018-11-15T14:24:55.234218102Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.234221760Z            return resolve(value);
2018-11-15T14:24:55.234225033Z          }
2018-11-15T14:24:55.234238053Z          setTimeout(wait, interval);
2018-11-15T14:24:55.234259609Z        } [32m+2ms[0m
2018-11-15T14:24:55.234264057Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.235365558Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.235377855Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.235381506Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.235384999Z          if (condFunc()) {
2018-11-15T14:24:55.235393880Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.235398006Z            return resolve(value);
2018-11-15T14:24:55.235401336Z          }
2018-11-15T14:24:55.235404387Z          setTimeout(wait, interval);
2018-11-15T14:24:55.235407518Z        } [32m+1ms[0m
2018-11-15T14:24:55.235410808Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.236552725Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.236578281Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.236582289Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.236585729Z          if (condFunc()) {
2018-11-15T14:24:55.236588996Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.236592679Z            return resolve(value);
2018-11-15T14:24:55.236595965Z          }
2018-11-15T14:24:55.236614221Z          setTimeout(wait, interval);
2018-11-15T14:24:55.236618278Z        } [32m+1ms[0m
2018-11-15T14:24:55.236621540Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.237740271Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.237753713Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.237763232Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.237767070Z          if (condFunc()) {
2018-11-15T14:24:55.237770371Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.237773969Z            return resolve(value);
2018-11-15T14:24:55.237777299Z          }
2018-11-15T14:24:55.237780336Z          setTimeout(wait, interval);
2018-11-15T14:24:55.237783513Z        } [32m+1ms[0m
2018-11-15T14:24:55.237786831Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.238923636Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.238944947Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.238949230Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.238952689Z          if (condFunc()) {
2018-11-15T14:24:55.238955830Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.238959414Z            return resolve(value);
2018-11-15T14:24:55.238962635Z          }
2018-11-15T14:24:55.238965621Z          setTimeout(wait, interval);
2018-11-15T14:24:55.238968797Z        } [32m+1ms[0m
2018-11-15T14:24:55.238988413Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.240149999Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.240162097Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.240171183Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.240175132Z          if (condFunc()) {
2018-11-15T14:24:55.240178381Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.240182058Z            return resolve(value);
2018-11-15T14:24:55.240185322Z          }
2018-11-15T14:24:55.240188356Z          setTimeout(wait, interval);
2018-11-15T14:24:55.240191535Z        } [32m+1ms[0m
2018-11-15T14:24:55.240195178Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.241334757Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.241347319Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.241351177Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.241354588Z          if (condFunc()) {
2018-11-15T14:24:55.241357667Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.241361141Z            return resolve(value);
2018-11-15T14:24:55.241364333Z          }
2018-11-15T14:24:55.241367321Z          setTimeout(wait, interval);
2018-11-15T14:24:55.241370494Z        } [32m+1ms[0m
2018-11-15T14:24:55.241373774Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.242518027Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.242531334Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.242534997Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.242544971Z          if (condFunc()) {
2018-11-15T14:24:55.242548326Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.242561074Z            return resolve(value);
2018-11-15T14:24:55.242564626Z          }
2018-11-15T14:24:55.242567733Z          setTimeout(wait, interval);
2018-11-15T14:24:55.242570995Z        } [32m+1ms[0m
2018-11-15T14:24:55.242574293Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.243760494Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.243774782Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.243778801Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.243782183Z          if (condFunc()) {
2018-11-15T14:24:55.243785361Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.243788964Z            return resolve(value);
2018-11-15T14:24:55.243792182Z          }
2018-11-15T14:24:55.243795172Z          setTimeout(wait, interval);
2018-11-15T14:24:55.243815228Z        } [32m+1ms[0m
2018-11-15T14:24:55.243819383Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.244908908Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.244921398Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.244925231Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.244934676Z          if (condFunc()) {
2018-11-15T14:24:55.244937927Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.244941548Z            return resolve(value);
2018-11-15T14:24:55.244944820Z          }
2018-11-15T14:24:55.244947977Z          setTimeout(wait, interval);
2018-11-15T14:24:55.244951162Z        } [32m+1ms[0m
2018-11-15T14:24:55.244954427Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.246090323Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.246102664Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.246106459Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.246109845Z          if (condFunc()) {
2018-11-15T14:24:55.246113049Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.246116803Z            return resolve(value);
2018-11-15T14:24:55.246120100Z          }
2018-11-15T14:24:55.246123323Z          setTimeout(wait, interval);
2018-11-15T14:24:55.246126459Z        } [32m+1ms[0m
2018-11-15T14:24:55.246155247Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.247267576Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.247279975Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.247283778Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.247287293Z          if (condFunc()) {
2018-11-15T14:24:55.247290496Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.247294101Z            return resolve(value);
2018-11-15T14:24:55.247297369Z          }
2018-11-15T14:24:55.247300383Z          setTimeout(wait, interval);
2018-11-15T14:24:55.247303527Z        } [32m+2ms[0m
2018-11-15T14:24:55.247306812Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.248482672Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.248495501Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.248504847Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.248508847Z          if (condFunc()) {
2018-11-15T14:24:55.248512047Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.248515584Z            return resolve(value);
2018-11-15T14:24:55.248518725Z          }
2018-11-15T14:24:55.248521843Z          setTimeout(wait, interval);
2018-11-15T14:24:55.248525275Z        } [32m+1ms[0m
2018-11-15T14:24:55.248528666Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.249629084Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.249642202Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.249646050Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.249649753Z          if (condFunc()) {
2018-11-15T14:24:55.249652860Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.249656426Z            return resolve(value);
2018-11-15T14:24:55.249659550Z          }
2018-11-15T14:24:55.249662710Z          setTimeout(wait, interval);
2018-11-15T14:24:55.249665898Z        } [32m+1ms[0m
2018-11-15T14:24:55.249669281Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.250802846Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.250821736Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.250826316Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.250839284Z          if (condFunc()) {
2018-11-15T14:24:55.250842886Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.250846557Z            return resolve(value);
2018-11-15T14:24:55.250849649Z          }
2018-11-15T14:24:55.250852801Z          setTimeout(wait, interval);
2018-11-15T14:24:55.250856035Z        } [32m+1ms[0m
2018-11-15T14:24:55.250859356Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.251981026Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.251993354Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.251997278Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.252000813Z          if (condFunc()) {
2018-11-15T14:24:55.252003930Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.252007610Z            return resolve(value);
2018-11-15T14:24:55.252010784Z          }
2018-11-15T14:24:55.252013997Z          setTimeout(wait, interval);
2018-11-15T14:24:55.252017194Z        } [32m+1ms[0m
2018-11-15T14:24:55.252020501Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.253175922Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.253188813Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.253198623Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.253202402Z          if (condFunc()) {
2018-11-15T14:24:55.253205644Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.253209468Z            return resolve(value);
2018-11-15T14:24:55.253212685Z          }
2018-11-15T14:24:55.253215793Z          setTimeout(wait, interval);
2018-11-15T14:24:55.253218895Z        } [32m+1ms[0m
2018-11-15T14:24:55.253222319Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.254351957Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.254364904Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.254368764Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.254372177Z          if (condFunc()) {
2018-11-15T14:24:55.254375411Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.254379222Z            return resolve(value);
2018-11-15T14:24:55.254392001Z          }
2018-11-15T14:24:55.254395502Z          setTimeout(wait, interval);
2018-11-15T14:24:55.254415283Z        } [32m+1ms[0m
2018-11-15T14:24:55.254418966Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.255518341Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.255531381Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.255541220Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.255545172Z          if (condFunc()) {
2018-11-15T14:24:55.255548389Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.255552125Z            return resolve(value);
2018-11-15T14:24:55.255556063Z          }
2018-11-15T14:24:55.255559299Z          setTimeout(wait, interval);
2018-11-15T14:24:55.255562423Z        } [32m+1ms[0m
2018-11-15T14:24:55.255565787Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.256698568Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.256709908Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.256713631Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.256717047Z          if (condFunc()) {
2018-11-15T14:24:55.256720208Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.256723770Z            return resolve(value);
2018-11-15T14:24:55.256727008Z          }
2018-11-15T14:24:55.256730080Z          setTimeout(wait, interval);
2018-11-15T14:24:55.256733199Z        } [32m+1ms[0m
2018-11-15T14:24:55.256736415Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.257891737Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.257905567Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.257914982Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.257918991Z          if (condFunc()) {
2018-11-15T14:24:55.257922204Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.257925932Z            return resolve(value);
2018-11-15T14:24:55.257929100Z          }
2018-11-15T14:24:55.257932326Z          setTimeout(wait, interval);
2018-11-15T14:24:55.257935591Z        } [32m+1ms[0m
2018-11-15T14:24:55.257938821Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.259149746Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.259179360Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.259208148Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.259214671Z          if (condFunc()) {
2018-11-15T14:24:55.259217992Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.259221555Z            return resolve(value);
2018-11-15T14:24:55.259224728Z          }
2018-11-15T14:24:55.259227754Z          setTimeout(wait, interval);
2018-11-15T14:24:55.259230917Z        } [32m+1ms[0m
2018-11-15T14:24:55.259234226Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.260262453Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.260274735Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.260294762Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.260299722Z          if (condFunc()) {
2018-11-15T14:24:55.260302968Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.260307176Z            return resolve(value);
2018-11-15T14:24:55.260310371Z          }
2018-11-15T14:24:55.260313416Z          setTimeout(wait, interval);
2018-11-15T14:24:55.260316736Z        } [32m+2ms[0m
2018-11-15T14:24:55.260320077Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.261468990Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.261482081Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.261485903Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.261489294Z          if (condFunc()) {
2018-11-15T14:24:55.261492480Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.261496102Z            return resolve(value);
2018-11-15T14:24:55.261499396Z          }
2018-11-15T14:24:55.261502494Z          setTimeout(wait, interval);
2018-11-15T14:24:55.261505665Z        } [32m+1ms[0m
2018-11-15T14:24:55.261508935Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.262641158Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.262653766Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.262657571Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.262661000Z          if (condFunc()) {
2018-11-15T14:24:55.262680237Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.262684934Z            return resolve(value);
2018-11-15T14:24:55.262688197Z          }
2018-11-15T14:24:55.262691515Z          setTimeout(wait, interval);
2018-11-15T14:24:55.262694838Z        } [32m+1ms[0m
2018-11-15T14:24:55.262698145Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.263839019Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.263851296Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.263855159Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.263858573Z          if (condFunc()) {
2018-11-15T14:24:55.263861901Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.263865501Z            return resolve(value);
2018-11-15T14:24:55.263868680Z          }
2018-11-15T14:24:55.263871939Z          setTimeout(wait, interval);
2018-11-15T14:24:55.263875162Z        } [32m+1ms[0m
2018-11-15T14:24:55.263878422Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.264999716Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.265012157Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.265021550Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.265025540Z          if (condFunc()) {
2018-11-15T14:24:55.265028785Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.265032423Z            return resolve(value);
2018-11-15T14:24:55.265035697Z          }
2018-11-15T14:24:55.265038685Z          setTimeout(wait, interval);
2018-11-15T14:24:55.265041834Z        } [32m+1ms[0m
2018-11-15T14:24:55.265045082Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.266196576Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.266209558Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.266213331Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.266216680Z          if (condFunc()) {
2018-11-15T14:24:55.266219940Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.266223595Z            return resolve(value);
2018-11-15T14:24:55.266226875Z          }
2018-11-15T14:24:55.266229961Z          setTimeout(wait, interval);
2018-11-15T14:24:55.266233128Z        } [32m+2ms[0m
2018-11-15T14:24:55.266262165Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.267367111Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.267382471Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.267388432Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.267401911Z          if (condFunc()) {
2018-11-15T14:24:55.267407994Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.267413420Z            return resolve(value);
2018-11-15T14:24:55.267418554Z          }
2018-11-15T14:24:55.267421896Z          setTimeout(wait, interval);
2018-11-15T14:24:55.267425109Z        } [32m+1ms[0m
2018-11-15T14:24:55.267428378Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.268556241Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.268568610Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.268572394Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.268575788Z          if (condFunc()) {
2018-11-15T14:24:55.268578905Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.268582380Z            return resolve(value);
2018-11-15T14:24:55.268585590Z          }
2018-11-15T14:24:55.268588671Z          setTimeout(wait, interval);
2018-11-15T14:24:55.268591865Z        } [32m+1ms[0m
2018-11-15T14:24:55.268595142Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.269749120Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.269773240Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.269778114Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.269781656Z          if (condFunc()) {
2018-11-15T14:24:55.269784994Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.269788645Z            return resolve(value);
2018-11-15T14:24:55.269792136Z          }
2018-11-15T14:24:55.269795261Z          setTimeout(wait, interval);
2018-11-15T14:24:55.269798609Z        } [32m+1ms[0m
2018-11-15T14:24:55.269801889Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.271700426Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.271715647Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.271733914Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.271737830Z          if (condFunc()) {
2018-11-15T14:24:55.271757551Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.271762270Z            return resolve(value);
2018-11-15T14:24:55.271765509Z          }
2018-11-15T14:24:55.271768634Z          setTimeout(wait, interval);
2018-11-15T14:24:55.271771926Z        } [32m+1ms[0m
2018-11-15T14:24:55.271775271Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.273661829Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.273677427Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.273687518Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.273690920Z          if (condFunc()) {
2018-11-15T14:24:55.273694220Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.273697824Z            return resolve(value);
2018-11-15T14:24:55.273701075Z          }
2018-11-15T14:24:55.273704143Z          setTimeout(wait, interval);
2018-11-15T14:24:55.273707392Z        } [32m+2ms[0m
2018-11-15T14:24:55.273710707Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.274840927Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.274852806Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.274856604Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.274860053Z          if (condFunc()) {
2018-11-15T14:24:55.274863258Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.274866777Z            return resolve(value);
2018-11-15T14:24:55.274870013Z          }
2018-11-15T14:24:55.274873005Z          setTimeout(wait, interval);
2018-11-15T14:24:55.274876242Z        } [32m+1ms[0m
2018-11-15T14:24:55.274879466Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.276016359Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.276029119Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.276032961Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.276042785Z          if (condFunc()) {
2018-11-15T14:24:55.276046131Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.276049836Z            return resolve(value);
2018-11-15T14:24:55.276064633Z          }
2018-11-15T14:24:55.276068191Z          setTimeout(wait, interval);
2018-11-15T14:24:55.276071387Z        } [32m+1ms[0m
2018-11-15T14:24:55.276074652Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.277208207Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.277221447Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.277225405Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.277228765Z          if (condFunc()) {
2018-11-15T14:24:55.277231906Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.277235522Z            return resolve(value);
2018-11-15T14:24:55.277238827Z          }
2018-11-15T14:24:55.277241885Z          setTimeout(wait, interval);
2018-11-15T14:24:55.277245023Z        } [32m+2ms[0m
2018-11-15T14:24:55.277248423Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.278396623Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.278411468Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.278415449Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.278418846Z          if (condFunc()) {
2018-11-15T14:24:55.278428069Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.278432286Z            return resolve(value);
2018-11-15T14:24:55.278435623Z          }
2018-11-15T14:24:55.278438759Z          setTimeout(wait, interval);
2018-11-15T14:24:55.278441961Z        } [32m+1ms[0m
2018-11-15T14:24:55.278445505Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.279576616Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.279589213Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.279592977Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.279596470Z          if (condFunc()) {
2018-11-15T14:24:55.279599792Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.279603952Z            return resolve(value);
2018-11-15T14:24:55.279607219Z          }
2018-11-15T14:24:55.279610684Z          setTimeout(wait, interval);
2018-11-15T14:24:55.279613862Z        } [32m+1ms[0m
2018-11-15T14:24:55.279617099Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.280770651Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.280784111Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.280788114Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.280798016Z          if (condFunc()) {
2018-11-15T14:24:55.280801437Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.280805148Z            return resolve(value);
2018-11-15T14:24:55.280808469Z          }
2018-11-15T14:24:55.280811618Z          setTimeout(wait, interval);
2018-11-15T14:24:55.280814835Z        } [32m+1ms[0m
2018-11-15T14:24:55.280818134Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.281957103Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.281970049Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.281974066Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.281977421Z          if (condFunc()) {
2018-11-15T14:24:55.281980554Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.281984083Z            return resolve(value);
2018-11-15T14:24:55.281987314Z          }
2018-11-15T14:24:55.281990341Z          setTimeout(wait, interval);
2018-11-15T14:24:55.281993471Z        } [32m+1ms[0m
2018-11-15T14:24:55.281996729Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.283220236Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.283232704Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.283236385Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.283246396Z          if (condFunc()) {
2018-11-15T14:24:55.283251317Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.283256763Z            return resolve(value);
2018-11-15T14:24:55.283261678Z          }
2018-11-15T14:24:55.283265789Z          setTimeout(wait, interval);
2018-11-15T14:24:55.283271059Z        } [32m+1ms[0m
2018-11-15T14:24:55.283276158Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.284361331Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.284374013Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.284377962Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.284381413Z          if (condFunc()) {
2018-11-15T14:24:55.284399962Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.284404163Z            return resolve(value);
2018-11-15T14:24:55.284423517Z          }
2018-11-15T14:24:55.284427004Z          setTimeout(wait, interval);
2018-11-15T14:24:55.284430170Z        } [32m+1ms[0m
2018-11-15T14:24:55.284433571Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.285584129Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.285597851Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.285601708Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.285605116Z          if (condFunc()) {
2018-11-15T14:24:55.285608374Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.285612037Z            return resolve(value);
2018-11-15T14:24:55.285615331Z          }
2018-11-15T14:24:55.285618498Z          setTimeout(wait, interval);
2018-11-15T14:24:55.285621611Z        } [32m+1ms[0m
2018-11-15T14:24:55.285624863Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.286770948Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.286783446Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.286793032Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.286796897Z          if (condFunc()) {
2018-11-15T14:24:55.286802549Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.286806192Z            return resolve(value);
2018-11-15T14:24:55.286809544Z          }
2018-11-15T14:24:55.286812732Z          setTimeout(wait, interval);
2018-11-15T14:24:55.286815898Z        } [32m+1ms[0m
2018-11-15T14:24:55.286819181Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.287951913Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.287964944Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.287968833Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.287972190Z          if (condFunc()) {
2018-11-15T14:24:55.287975410Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.287978915Z            return resolve(value);
2018-11-15T14:24:55.287982238Z          }
2018-11-15T14:24:55.287985381Z          setTimeout(wait, interval);
2018-11-15T14:24:55.288016001Z        } [32m+1ms[0m
2018-11-15T14:24:55.288020741Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.289113650Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.289126422Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.289136106Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.289140138Z          if (condFunc()) {
2018-11-15T14:24:55.289143357Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.289147051Z            return resolve(value);
2018-11-15T14:24:55.289150421Z          }
2018-11-15T14:24:55.289153516Z          setTimeout(wait, interval);
2018-11-15T14:24:55.289156705Z        } [32m+1ms[0m
2018-11-15T14:24:55.289159976Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.290316789Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.290330471Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.290334330Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.290337788Z          if (condFunc()) {
2018-11-15T14:24:55.290340890Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.290344473Z            return resolve(value);
2018-11-15T14:24:55.290347711Z          }
2018-11-15T14:24:55.290350689Z          setTimeout(wait, interval);
2018-11-15T14:24:55.290353757Z        } [32m+1ms[0m
2018-11-15T14:24:55.290356938Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.291502544Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.291515944Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.291525332Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.291529228Z          if (condFunc()) {
2018-11-15T14:24:55.291532400Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.291536366Z            return resolve(value);
2018-11-15T14:24:55.291539709Z          }
2018-11-15T14:24:55.291542803Z          setTimeout(wait, interval);
2018-11-15T14:24:55.291546080Z        } [32m+1ms[0m
2018-11-15T14:24:55.291549561Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.292704110Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.292717061Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.292731725Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.292735378Z          if (condFunc()) {
2018-11-15T14:24:55.292738530Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.292742099Z            return resolve(value);
2018-11-15T14:24:55.292745599Z          }
2018-11-15T14:24:55.292764267Z          setTimeout(wait, interval);
2018-11-15T14:24:55.292768467Z        } [32m+1ms[0m
2018-11-15T14:24:55.292771747Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.293889385Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.293904340Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.293915986Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.293919734Z          if (condFunc()) {
2018-11-15T14:24:55.293922985Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.293926620Z            return resolve(value);
2018-11-15T14:24:55.293930042Z          }
2018-11-15T14:24:55.293933548Z          setTimeout(wait, interval);
2018-11-15T14:24:55.293936815Z        } [32m+1ms[0m
2018-11-15T14:24:55.293940106Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.295083992Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.295096195Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.295099952Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.295103406Z          if (condFunc()) {
2018-11-15T14:24:55.295106542Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.295110152Z            return resolve(value);
2018-11-15T14:24:55.295113363Z          }
2018-11-15T14:24:55.295116454Z          setTimeout(wait, interval);
2018-11-15T14:24:55.295119566Z        } [32m+1ms[0m
2018-11-15T14:24:55.295122768Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.296312247Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.296325015Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.296328909Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.296332285Z          if (condFunc()) {
2018-11-15T14:24:55.296335463Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.296360952Z            return resolve(value);
2018-11-15T14:24:55.296368579Z          }
2018-11-15T14:24:55.296373183Z          setTimeout(wait, interval);
2018-11-15T14:24:55.296377884Z        } [32m+2ms[0m
2018-11-15T14:24:55.296382687Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.297538088Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.297551580Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.297555633Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.297559182Z          if (condFunc()) {
2018-11-15T14:24:55.297562428Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.297566089Z            return resolve(value);
2018-11-15T14:24:55.297569379Z          }
2018-11-15T14:24:55.297572540Z          setTimeout(wait, interval);
2018-11-15T14:24:55.297575765Z        } [32m+1ms[0m
2018-11-15T14:24:55.297579157Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.298727577Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.298740554Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.298744307Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.298753609Z          if (condFunc()) {
2018-11-15T14:24:55.298757314Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.298760985Z            return resolve(value);
2018-11-15T14:24:55.298764278Z          }
2018-11-15T14:24:55.298767446Z          setTimeout(wait, interval);
2018-11-15T14:24:55.298770667Z        } [32m+1ms[0m
2018-11-15T14:24:55.298774022Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.299957940Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.299970482Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.299974452Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.299977835Z          if (condFunc()) {
2018-11-15T14:24:55.299981150Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.299984878Z            return resolve(value);
2018-11-15T14:24:55.299988080Z          }
2018-11-15T14:24:55.299991169Z          setTimeout(wait, interval);
2018-11-15T14:24:55.299994346Z        } [32m+1ms[0m
2018-11-15T14:24:55.299997749Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.301115874Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.301128737Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.301132565Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.301142233Z          if (condFunc()) {
2018-11-15T14:24:55.301145576Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.301149359Z            return resolve(value);
2018-11-15T14:24:55.301152604Z          }
2018-11-15T14:24:55.301155668Z          setTimeout(wait, interval);
2018-11-15T14:24:55.301158844Z        } [32m+1ms[0m
2018-11-15T14:24:55.301162227Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.302335400Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.302348872Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.302353005Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.302356542Z          if (condFunc()) {
2018-11-15T14:24:55.302359769Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.302363387Z            return resolve(value);
2018-11-15T14:24:55.302366614Z          }
2018-11-15T14:24:55.302369739Z          setTimeout(wait, interval);
2018-11-15T14:24:55.302373024Z        } [32m+1ms[0m
2018-11-15T14:24:55.302378147Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.303512667Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.303525678Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.303535512Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.303539616Z          if (condFunc()) {
2018-11-15T14:24:55.303542872Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.303546448Z            return resolve(value);
2018-11-15T14:24:55.303549837Z          }
2018-11-15T14:24:55.303552919Z          setTimeout(wait, interval);
2018-11-15T14:24:55.303556111Z        } [32m+1ms[0m
2018-11-15T14:24:55.303559309Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.304726878Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.304739103Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.304743075Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.304756260Z          if (condFunc()) {
2018-11-15T14:24:55.304759933Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.304763524Z            return resolve(value);
2018-11-15T14:24:55.304766753Z          }
2018-11-15T14:24:55.304769858Z          setTimeout(wait, interval);
2018-11-15T14:24:55.304789816Z        } [32m+1ms[0m
2018-11-15T14:24:55.304793353Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.305878936Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.305892739Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.305902547Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.305906344Z          if (condFunc()) {
2018-11-15T14:24:55.305909574Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.305913344Z            return resolve(value);
2018-11-15T14:24:55.305922769Z          }
2018-11-15T14:24:55.305926024Z          setTimeout(wait, interval);
2018-11-15T14:24:55.305929305Z        } [32m+1ms[0m
2018-11-15T14:24:55.305932660Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.307077245Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.307089242Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.307092914Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.307096277Z          if (condFunc()) {
2018-11-15T14:24:55.307099402Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.307102893Z            return resolve(value);
2018-11-15T14:24:55.307105983Z          }
2018-11-15T14:24:55.307109082Z          setTimeout(wait, interval);
2018-11-15T14:24:55.307112304Z        } [32m+1ms[0m
2018-11-15T14:24:55.307115571Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.308274724Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.308320384Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.308324834Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.308328360Z          if (condFunc()) {
2018-11-15T14:24:55.308331731Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.308335362Z            return resolve(value);
2018-11-15T14:24:55.308338608Z          }
2018-11-15T14:24:55.308352078Z          setTimeout(wait, interval);
2018-11-15T14:24:55.308355634Z        } [32m+2ms[0m
2018-11-15T14:24:55.308358875Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.309480778Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.309493866Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.309497708Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.309501386Z          if (condFunc()) {
2018-11-15T14:24:55.309504583Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.309508802Z            return resolve(value);
2018-11-15T14:24:55.309513701Z          }
2018-11-15T14:24:55.309517842Z          setTimeout(wait, interval);
2018-11-15T14:24:55.309521200Z        } [32m+1ms[0m
2018-11-15T14:24:55.309524547Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.310655108Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.310667724Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.310671603Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.310674976Z          if (condFunc()) {
2018-11-15T14:24:55.310685086Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.310688830Z            return resolve(value);
2018-11-15T14:24:55.310692241Z          }
2018-11-15T14:24:55.310695433Z          setTimeout(wait, interval);
2018-11-15T14:24:55.310698613Z        } [32m+1ms[0m
2018-11-15T14:24:55.310701951Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.311865508Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.311877761Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.311881531Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.311885003Z          if (condFunc()) {
2018-11-15T14:24:55.311888102Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.311891899Z            return resolve(value);
2018-11-15T14:24:55.311895152Z          }
2018-11-15T14:24:55.311898269Z          setTimeout(wait, interval);
2018-11-15T14:24:55.311901457Z        } [32m+1ms[0m
2018-11-15T14:24:55.311904774Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.313120714Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.313152345Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.313157085Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.313160562Z          if (condFunc()) {
2018-11-15T14:24:55.313163740Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.313167458Z            return resolve(value);
2018-11-15T14:24:55.313170645Z          }
2018-11-15T14:24:55.313173740Z          setTimeout(wait, interval);
2018-11-15T14:24:55.313176879Z        } [32m+1ms[0m
2018-11-15T14:24:55.313180191Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.314343975Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.314358191Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.314362078Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.314365513Z          if (condFunc()) {
2018-11-15T14:24:55.314368712Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.314372332Z            return resolve(value);
2018-11-15T14:24:55.314375596Z          }
2018-11-15T14:24:55.314378657Z          setTimeout(wait, interval);
2018-11-15T14:24:55.314381764Z        } [32m+2ms[0m
2018-11-15T14:24:55.314385010Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.315544984Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.315558096Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.315561873Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.315565334Z          if (condFunc()) {
2018-11-15T14:24:55.315574898Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.315578610Z            return resolve(value);
2018-11-15T14:24:55.315581985Z          }
2018-11-15T14:24:55.315585085Z          setTimeout(wait, interval);
2018-11-15T14:24:55.315588208Z        } [32m+1ms[0m
2018-11-15T14:24:55.315591516Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.316740471Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.316754029Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.316758025Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.316761450Z          if (condFunc()) {
2018-11-15T14:24:55.316764909Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.316780236Z            return resolve(value);
2018-11-15T14:24:55.316799420Z          }
2018-11-15T14:24:55.316803704Z          setTimeout(wait, interval);
2018-11-15T14:24:55.316819557Z        } [32m+1ms[0m
2018-11-15T14:24:55.316823040Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.317930343Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.317950142Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.317954579Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.317958003Z          if (condFunc()) {
2018-11-15T14:24:55.317961388Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.317965131Z            return resolve(value);
2018-11-15T14:24:55.317968803Z          }
2018-11-15T14:24:55.317971980Z          setTimeout(wait, interval);
2018-11-15T14:24:55.317975263Z        } [32m+1ms[0m
2018-11-15T14:24:55.317978575Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.319165019Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.319180896Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.319191981Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.319195796Z          if (condFunc()) {
2018-11-15T14:24:55.319199033Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.319221264Z            return resolve(value);
2018-11-15T14:24:55.319224877Z          }
2018-11-15T14:24:55.319228078Z          setTimeout(wait, interval);
2018-11-15T14:24:55.319231384Z        } [32m+1ms[0m
2018-11-15T14:24:55.319234734Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.320361754Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.320386549Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.320393571Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.320398785Z          if (condFunc()) {
2018-11-15T14:24:55.320403946Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.320408956Z            return resolve(value);
2018-11-15T14:24:55.320412305Z          }
2018-11-15T14:24:55.320415445Z          setTimeout(wait, interval);
2018-11-15T14:24:55.320418848Z        } [32m+1ms[0m
2018-11-15T14:24:55.320434927Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.321556073Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.321570401Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.321574228Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.321577731Z          if (condFunc()) {
2018-11-15T14:24:55.321580929Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.321584567Z            return resolve(value);
2018-11-15T14:24:55.321587649Z          }
2018-11-15T14:24:55.321590847Z          setTimeout(wait, interval);
2018-11-15T14:24:55.321593963Z        } [32m+1ms[0m
2018-11-15T14:24:55.321597190Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.322784935Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.322798397Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.322807990Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.322812232Z          if (condFunc()) {
2018-11-15T14:24:55.322815472Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.322819135Z            return resolve(value);
2018-11-15T14:24:55.322822275Z          }
2018-11-15T14:24:55.322825424Z          setTimeout(wait, interval);
2018-11-15T14:24:55.322828659Z        } [32m+1ms[0m
2018-11-15T14:24:55.322832119Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.323973733Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.323985970Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.323989960Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.323993527Z          if (condFunc()) {
2018-11-15T14:24:55.323996781Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.324000493Z            return resolve(value);
2018-11-15T14:24:55.324003692Z          }
2018-11-15T14:24:55.324006975Z          setTimeout(wait, interval);
2018-11-15T14:24:55.324010244Z        } [32m+1ms[0m
2018-11-15T14:24:55.324013529Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.325140968Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.325153994Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.325157878Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.325179605Z          if (condFunc()) {
2018-11-15T14:24:55.325183781Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.325187447Z            return resolve(value);
2018-11-15T14:24:55.325190742Z          }
2018-11-15T14:24:55.325194032Z          setTimeout(wait, interval);
2018-11-15T14:24:55.325197549Z        } [32m+1ms[0m
2018-11-15T14:24:55.325200867Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.326343442Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.326356482Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.326360333Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.326363773Z          if (condFunc()) {
2018-11-15T14:24:55.326367841Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.326373090Z            return resolve(value);
2018-11-15T14:24:55.326377568Z          }
2018-11-15T14:24:55.326382208Z          setTimeout(wait, interval);
2018-11-15T14:24:55.326386991Z        } [32m+1ms[0m
2018-11-15T14:24:55.326414782Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.327540907Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.327553770Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.327557707Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.327561255Z          if (condFunc()) {
2018-11-15T14:24:55.327570603Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.327574276Z            return resolve(value);
2018-11-15T14:24:55.327577368Z          }
2018-11-15T14:24:55.327580521Z          setTimeout(wait, interval);
2018-11-15T14:24:55.327583665Z        } [32m+1ms[0m
2018-11-15T14:24:55.327586895Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.328781424Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.328794251Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.328798099Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.328801506Z          if (condFunc()) {
2018-11-15T14:24:55.328804683Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.328808303Z            return resolve(value);
2018-11-15T14:24:55.328851379Z          }
2018-11-15T14:24:55.328859816Z          setTimeout(wait, interval);
2018-11-15T14:24:55.328865050Z        } [32m+1ms[0m
2018-11-15T14:24:55.328870514Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.329970888Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.329986775Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.329990847Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.329994373Z          if (condFunc()) {
2018-11-15T14:24:55.330004479Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.330008253Z            return resolve(value);
2018-11-15T14:24:55.330011599Z          }
2018-11-15T14:24:55.330014844Z          setTimeout(wait, interval);
2018-11-15T14:24:55.330018028Z        } [32m+1ms[0m
2018-11-15T14:24:55.330021292Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.331169056Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.331181310Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.331185336Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.331188931Z          if (condFunc()) {
2018-11-15T14:24:55.331192204Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.331195811Z            return resolve(value);
2018-11-15T14:24:55.331198926Z          }
2018-11-15T14:24:55.331202052Z          setTimeout(wait, interval);
2018-11-15T14:24:55.331205307Z        } [32m+1ms[0m
2018-11-15T14:24:55.331208614Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.332390216Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.332403080Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.332407026Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.332410586Z          if (condFunc()) {
2018-11-15T14:24:55.332413783Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.332417944Z            return resolve(value);
2018-11-15T14:24:55.332421184Z          }
2018-11-15T14:24:55.332424363Z          setTimeout(wait, interval);
2018-11-15T14:24:55.332427608Z        } [32m+1ms[0m
2018-11-15T14:24:55.332436925Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.334133016Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+151ms[0m
2018-11-15T14:24:55.334147393Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhGD&sid=HlDmTPAfzYNr-CmBAAAF" [35m+0ms[0m
2018-11-15T14:24:55.334152597Z    [35;1mengine [0msetting new request for existing client [35m+0ms[0m
2018-11-15T14:24:55.334170135Z    [31;1mengine:polling [0msetting request [31m+150ms[0m
2018-11-15T14:24:55.334173990Z    [34;1mengine:socket [0mflushing buffer to transport [34m+145ms[0m
2018-11-15T14:24:55.334195176Z    [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
2018-11-15T14:24:55.334199610Z    [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
2018-11-15T14:24:55.334203136Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.334206487Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.334209693Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.334213001Z          if (condFunc()) {
2018-11-15T14:24:55.334216176Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.334219668Z            return resolve(value);
2018-11-15T14:24:55.334222892Z          }
2018-11-15T14:24:55.334225930Z          setTimeout(wait, interval);
2018-11-15T14:24:55.334229191Z        } [32m+1ms[0m
2018-11-15T14:24:55.334232473Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.340254197Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.340304050Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.340309132Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.340312735Z          if (condFunc()) {
2018-11-15T14:24:55.340315932Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.340319840Z            return resolve(value);
2018-11-15T14:24:55.340323431Z          }
2018-11-15T14:24:55.340326690Z          setTimeout(wait, interval);
2018-11-15T14:24:55.340329975Z        } [32m+6ms[0m
2018-11-15T14:24:55.340333370Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:55.341452665Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.341468761Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.341472774Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.341504206Z          if (condFunc()) {
2018-11-15T14:24:55.341508779Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.341512446Z            return resolve(value);
2018-11-15T14:24:55.341515678Z          }
2018-11-15T14:24:55.341518761Z          setTimeout(wait, interval);
2018-11-15T14:24:55.341521957Z        } [32m+1ms[0m
2018-11-15T14:24:55.341525179Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.342620180Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.342639881Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.342644502Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.342648021Z          if (condFunc()) {
2018-11-15T14:24:55.342651230Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.342654917Z            return resolve(value);
2018-11-15T14:24:55.342658160Z          }
2018-11-15T14:24:55.342661253Z          setTimeout(wait, interval);
2018-11-15T14:24:55.342664401Z        } [32m+1ms[0m
2018-11-15T14:24:55.342667712Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.343823639Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.343836573Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.343840485Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.343844082Z          if (condFunc()) {
2018-11-15T14:24:55.343847376Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.343850927Z            return resolve(value);
2018-11-15T14:24:55.343854130Z          }
2018-11-15T14:24:55.343857317Z          setTimeout(wait, interval);
2018-11-15T14:24:55.343860441Z        } [32m+1ms[0m
2018-11-15T14:24:55.343863757Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.345009364Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.345022156Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.345032500Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.345036327Z          if (condFunc()) {
2018-11-15T14:24:55.345039745Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.345043464Z            return resolve(value);
2018-11-15T14:24:55.345046768Z          }
2018-11-15T14:24:55.345049883Z          setTimeout(wait, interval);
2018-11-15T14:24:55.345064591Z        } [32m+1ms[0m
2018-11-15T14:24:55.345068544Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.346206850Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.346220636Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.346224565Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.346227999Z          if (condFunc()) {
2018-11-15T14:24:55.346231205Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.346234809Z            return resolve(value);
2018-11-15T14:24:55.346238000Z          }
2018-11-15T14:24:55.346241168Z          setTimeout(wait, interval);
2018-11-15T14:24:55.346244286Z        } [32m+2ms[0m
2018-11-15T14:24:55.346247635Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:55.347045016Z    [32;1mRepl [0m  [concatResult(data = irb(main):001:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:55.347057971Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:55.347061814Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:55.347065092Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:55.347068411Z          if (condFunc()) {
2018-11-15T14:24:55.347071584Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:55.347075086Z            return resolve(value);
2018-11-15T14:24:55.347078157Z          }
2018-11-15T14:24:55.347081217Z          setTimeout(wait, interval);
2018-11-15T14:24:55.347084372Z        } [32m+0ms[0m
2018-11-15T14:24:55.347226216Z    [32;1mRepl [0m  [isDataReceived()] result: "irb(main):001:0> " [32m+0ms[0m
2018-11-15T14:24:55.347236175Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:55.347240054Z    [32;1mRepl [0m`let currResult = result` //==> "irb(main):001:0> " [32m+0ms[0m
2018-11-15T14:24:55.347243848Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:55.353162752Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:55.353202042Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:55.353207618Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:55.353211210Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:55.353229472Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:55.353233384Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:55.353236615Z        return result += data;
2018-11-15T14:24:55.353239670Z      })] [32m+0ms[0m
2018-11-15T14:24:55.353248267Z    [32;1mRepl [0m  resolve(result = "irb(main):001:0> ") [32m+0ms[0m
2018-11-15T14:24:55.353252255Z    [32;1mserver [0m    data: "irb(main):001:0> " [32m+164ms[0m
2018-11-15T14:24:55.353256022Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} [32m+165ms[0m
2018-11-15T14:24:55.353261864Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}] [32m+0ms[0m
2018-11-15T14:24:55.353282454Z    [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+165ms[0m
2018-11-15T14:24:55.353287382Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+19ms[0m
2018-11-15T14:24:55.365759072Z    [35;1mengine [0mupgrading existing transport [35m+32ms[0m
2018-11-15T14:24:55.365829153Z    [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+13ms[0m
2018-11-15T14:24:55.377331932Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+12ms[0m
2018-11-15T14:24:55.377357763Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhGx&sid=HlDmTPAfzYNr-CmBAAAF" [35m+0ms[0m
2018-11-15T14:24:55.377675833Z    [35;1mengine [0msetting new request for existing client [35m+0ms[0m
2018-11-15T14:24:55.377900663Z    [31;1mengine:polling [0msetting request [31m+44ms[0m
2018-11-15T14:24:55.378125883Z    [34;1mengine:socket [0mflushing buffer to transport [34m+12ms[0m
2018-11-15T14:24:55.378330538Z    [31;1mengine:polling [0mwriting "89:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]" [31m+1ms[0m
2018-11-15T14:24:55.378734792Z    [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
2018-11-15T14:24:55.401615570Z    [33;1mengine:ws [0mreceived "2probe" [33m+2s[0m
2018-11-15T14:24:55.401986846Z    [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
2018-11-15T14:24:55.416196934Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+38ms[0m
2018-11-15T14:24:55.416442261Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmhHb&sid=HlDmTPAfzYNr-CmBAAAF" [35m+1ms[0m
2018-11-15T14:24:55.416716693Z    [35;1mengine [0msetting new request for existing client [35m+0ms[0m
2018-11-15T14:24:55.416953974Z    [31;1mengine:polling [0msetting request [31m+38ms[0m
2018-11-15T14:24:55.502407505Z    [34;1mengine:socket [0mwriting a noop packet to polling for fast upgrade [34m+124ms[0m
2018-11-15T14:24:55.502788210Z    [31;1mengine:polling [0mwriting "1:6" [31m+86ms[0m
2018-11-15T14:24:55.535857741Z    [33;1mengine:ws [0mreceived "5" [33m+134ms[0m
2018-11-15T14:24:55.536150276Z    [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+33ms[0m
2018-11-15T14:24:55.536480931Z    [31;1mengine:polling [0mclosing [31m+34ms[0m
2018-11-15T14:24:55.536727543Z    [31;1mengine:polling [0mtransport discarded - closing right away [31m+0ms[0m
2018-11-15T14:24:56.114360444Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+579ms[0m
2018-11-15T14:24:56.114395163Z    [34;1mengine:socket [0mpacket [34m+579ms[0m
2018-11-15T14:24:56.114685742Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+762ms[0m
2018-11-15T14:24:56.114901544Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+926ms[0m
2018-11-15T14:24:56.115096714Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:56.115321660Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+1ms[0m
2018-11-15T14:24:56.115522939Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+763ms[0m
2018-11-15T14:24:56.115737529Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:56.115967686Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:56.120204776Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:24:56.120398453Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:56.120642366Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
2018-11-15T14:24:56.120849780Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
2018-11-15T14:24:56.121028141Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:56.121201366Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
2018-11-15T14:24:56.121351611Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:24:56.121533863Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:56.121678679Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:56.178374105Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+58ms[0m
2018-11-15T14:24:56.178410562Z    [34;1mengine:socket [0mpacket [34m+58ms[0m
2018-11-15T14:24:56.178510528Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+57ms[0m
2018-11-15T14:24:56.178603046Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+57ms[0m
2018-11-15T14:24:56.178611507Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:56.178689552Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:56.178697592Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+57ms[0m
2018-11-15T14:24:56.178863434Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:56.178872105Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:56.449739184Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+271ms[0m
2018-11-15T14:24:56.449868921Z    [34;1mengine:socket [0mpacket [34m+271ms[0m
2018-11-15T14:24:56.449878385Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+271ms[0m
2018-11-15T14:24:56.450002046Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+271ms[0m
2018-11-15T14:24:56.450070467Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:56.450078390Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:56.450173463Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+272ms[0m
2018-11-15T14:24:56.450254811Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:56.450352901Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:56.450569777Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
2018-11-15T14:24:56.450579525Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:56.450727740Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+0ms[0m
2018-11-15T14:24:56.450868035Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+0ms[0m
2018-11-15T14:24:56.450876067Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:56.450905837Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:56.450995319Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+0ms[0m
2018-11-15T14:24:56.451002645Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+1s[0m
2018-11-15T14:24:56.451596175Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:56.451607365Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:24:56.451611172Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:56.451614621Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:56.451633378Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:56.451637797Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:56.451641167Z        return result !== '';
2018-11-15T14:24:56.451644279Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:56.451647641Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:56.451651256Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:56.451654480Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:56.451657651Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:56.451661095Z          if (condFunc()) {
2018-11-15T14:24:56.451672181Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:56.451676052Z            return resolve(value);
2018-11-15T14:24:56.451679274Z          }
2018-11-15T14:24:56.451682240Z          setTimeout(wait, interval);
2018-11-15T14:24:56.451685495Z        } [32m+0ms[0m
2018-11-15T14:24:56.451688656Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:56.451692031Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:56.451695316Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:56.451768071Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:56.451774702Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:56.451777978Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:56.451801675Z          if (condFunc()) {
2018-11-15T14:24:56.451805726Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:56.451809126Z            return resolve(value);
2018-11-15T14:24:56.451812295Z          }
2018-11-15T14:24:56.451815221Z          setTimeout(wait, interval);
2018-11-15T14:24:56.451818300Z        } [32m+0ms[0m
2018-11-15T14:24:56.451821657Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:56.451825033Z  " [32m+0ms[0m
2018-11-15T14:24:56.451828235Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:56.451901138Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:56.451913458Z  " [32m+0ms[0m
2018-11-15T14:24:56.451987277Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:56.452077139Z    [32;1mRepl [0m  [concatResult(data = => 123
2018-11-15T14:24:56.452083674Z  irb(main):002:0> )] result: "123
2018-11-15T14:24:56.452087131Z  " [32m+0ms[0m
2018-11-15T14:24:56.457319550Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:56.457417544Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "123
2018-11-15T14:24:56.457470080Z  ", result: "123
2018-11-15T14:24:56.457474551Z  => 123
2018-11-15T14:24:56.457477939Z  irb(main):002:0> " [32m+0ms[0m
2018-11-15T14:24:56.462642160Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:56.462837794Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:56.462863106Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:56.462867666Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:56.462871170Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:56.462874599Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:56.462877849Z        return result += data;
2018-11-15T14:24:56.462881118Z      })] [32m+0ms[0m
2018-11-15T14:24:56.462957027Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:56.462963952Z  => 123
2018-11-15T14:24:56.463003796Z  irb(main):002:0> ") [32m+0ms[0m
2018-11-15T14:24:56.463007424Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:56.463010787Z  => 123
2018-11-15T14:24:56.463013905Z  irb(main):002:0>  [32m+12ms[0m
2018-11-15T14:24:56.463081504Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:56.463090246Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}] [32m+0ms[0m
2018-11-15T14:24:56.463240951Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):002:0> \"}]"] [33m+1s[0m
2018-11-15T14:24:56.463251274Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}]) [34m+13ms[0m
2018-11-15T14:24:56.463255808Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:56.463338687Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):002:0> "}]" [33m+13ms[0m
2018-11-15T14:24:56.684995111Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+221ms[0m
2018-11-15T14:24:56.685061819Z    [34;1mengine:socket [0mpacket [34m+221ms[0m
2018-11-15T14:24:56.685278326Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+222ms[0m
2018-11-15T14:24:56.685294907Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+234ms[0m
2018-11-15T14:24:56.685303480Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:56.685339256Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:56.685369346Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+222ms[0m
2018-11-15T14:24:56.685377231Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:56.685384320Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:56.691084450Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:24:56.691109108Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:56.691338789Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:24:56.691360649Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+7ms[0m
2018-11-15T14:24:56.691422483Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:56.691556008Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:56.691569128Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
2018-11-15T14:24:56.691712930Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+229ms[0m
2018-11-15T14:24:56.691724341Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:56.691818364Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:56.691947465Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:56.691957613Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:56.692650607Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:56.692666364Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:56.692673569Z        return result !== '';
2018-11-15T14:24:56.692678998Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:56.692728505Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:56.692737342Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:56.692742971Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:56.692748265Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:56.692753699Z          if (condFunc()) {
2018-11-15T14:24:56.692797171Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:56.692805156Z            return resolve(value);
2018-11-15T14:24:56.692810203Z          }
2018-11-15T14:24:56.692815246Z          setTimeout(wait, interval);
2018-11-15T14:24:56.692819963Z        } [32m+0ms[0m
2018-11-15T14:24:56.692825135Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:56.692830521Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:56.692835768Z  )] result: "" [32m+0ms[0m
2018-11-15T14:24:56.692975222Z    [32;1mRepl [0m  [concatResult(data = irb(main):003:0> )] result: "
2018-11-15T14:24:56.692985773Z  " [32m+0ms[0m
2018-11-15T14:24:56.692991385Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:56.692996886Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:56.693002061Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:56.693007371Z          if (condFunc()) {
2018-11-15T14:24:56.693012411Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:56.693018035Z            return resolve(value);
2018-11-15T14:24:56.693043128Z          }
2018-11-15T14:24:56.693049411Z          setTimeout(wait, interval);
2018-11-15T14:24:56.693054439Z        } [32m+0ms[0m
2018-11-15T14:24:56.693059490Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:56.693064878Z  irb(main):003:0> " [32m+0ms[0m
2018-11-15T14:24:56.693185026Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:56.693195746Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:56.693201076Z  irb(main):003:0> " [32m+0ms[0m
2018-11-15T14:24:56.693205849Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:24:56.699078572Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:56.699097092Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:56.699101531Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:56.699105095Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:56.699108477Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:56.699111917Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:56.699163465Z        return result += data;
2018-11-15T14:24:56.699168310Z      })] [32m+0ms[0m
2018-11-15T14:24:56.699171629Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:56.699174889Z  irb(main):003:0> ") [32m+0ms[0m
2018-11-15T14:24:56.699178266Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:56.699181503Z  irb(main):003:0>  [32m+7ms[0m
2018-11-15T14:24:56.699184759Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:56.699189289Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):003:0> "}] [32m+0ms[0m
2018-11-15T14:24:56.699193899Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):003:0> \"}]"] [33m+235ms[0m
2018-11-15T14:24:56.699220633Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):003:0> "}]) [34m+8ms[0m
2018-11-15T14:24:56.699225099Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:56.699228437Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):003:0> "}]" [33m+8ms[0m
2018-11-15T14:24:56.759091263Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+60ms[0m
2018-11-15T14:24:56.759119384Z    [34;1mengine:socket [0mpacket [34m+60ms[0m
2018-11-15T14:24:56.759124021Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+60ms[0m
2018-11-15T14:24:56.759128849Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+67ms[0m
2018-11-15T14:24:56.759133138Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:56.759137058Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:56.759140617Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+60ms[0m
2018-11-15T14:24:56.759144166Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:56.759148307Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:56.766409904Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:24:56.766482871Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:56.766501131Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
2018-11-15T14:24:56.766506374Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
2018-11-15T14:24:56.766510473Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+1ms[0m
2018-11-15T14:24:56.766514254Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:56.766517842Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+7ms[0m
2018-11-15T14:24:56.766546731Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:56.766550863Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
2018-11-15T14:24:56.841995133Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+77ms[0m
2018-11-15T14:24:56.842024170Z    [34;1mengine:socket [0mpacket [34m+77ms[0m
2018-11-15T14:24:56.842028684Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+75ms[0m
2018-11-15T14:24:56.842033798Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+76ms[0m
2018-11-15T14:24:56.842037828Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:56.842041922Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:56.842045936Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+76ms[0m
2018-11-15T14:24:56.842049578Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:56.842053773Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:57.002355048Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+160ms[0m
2018-11-15T14:24:57.002408963Z    [34;1mengine:socket [0mpacket [34m+160ms[0m
2018-11-15T14:24:57.002414826Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+160ms[0m
2018-11-15T14:24:57.002420027Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+160ms[0m
2018-11-15T14:24:57.002444319Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:57.002449084Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:57.002452971Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+160ms[0m
2018-11-15T14:24:57.002456603Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.002477693Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+1ms[0m
2018-11-15T14:24:57.008238303Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+6ms[0m
2018-11-15T14:24:57.008258003Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:57.008262264Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
2018-11-15T14:24:57.008267104Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+6ms[0m
2018-11-15T14:24:57.008271293Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:57.008310493Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:57.008315973Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+7ms[0m
2018-11-15T14:24:57.008319538Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:57.008324034Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:24:57.023917028Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+16ms[0m
2018-11-15T14:24:57.023988844Z    [34;1mengine:socket [0mpacket [34m+16ms[0m
2018-11-15T14:24:57.024126276Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+15ms[0m
2018-11-15T14:24:57.024136807Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+16ms[0m
2018-11-15T14:24:57.024141321Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:24:57.024145473Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
2018-11-15T14:24:57.024239211Z    [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+16ms[0m
2018-11-15T14:24:57.024247478Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:57.024391909Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
2018-11-15T14:24:57.209903520Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231"}]" [33m+186ms[0m
2018-11-15T14:24:57.209993431Z    [34;1mengine:socket [0mpacket [34m+186ms[0m
2018-11-15T14:24:57.210104839Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [32m+185ms[0m
2018-11-15T14:24:57.210114553Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [36m+185ms[0m
2018-11-15T14:24:57.210140076Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
2018-11-15T14:24:57.210145761Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
2018-11-15T14:24:57.210149686Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231 } [32m+185ms[0m
2018-11-15T14:24:57.210260476Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:57.210269106Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231"}] [32m+0ms[0m
2018-11-15T14:24:57.215815818Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312"}]" [33m+6ms[0m
2018-11-15T14:24:57.216004948Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:57.216015118Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [32m+5ms[0m
2018-11-15T14:24:57.216020173Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [36m+6ms[0m
2018-11-15T14:24:57.216132177Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
2018-11-15T14:24:57.216141057Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
2018-11-15T14:24:57.216145054Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312 } [32m+7ms[0m
2018-11-15T14:24:57.216250000Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:57.216269329Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312"}] [32m+0ms[0m
2018-11-15T14:24:57.363972235Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123121"}]" [33m+148ms[0m
2018-11-15T14:24:57.364026527Z    [34;1mengine:socket [0mpacket [34m+148ms[0m
2018-11-15T14:24:57.364352314Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123121"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121"}]} [32m+147ms[0m
2018-11-15T14:24:57.364370313Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121"}]} [36m+148ms[0m
2018-11-15T14:24:57.364377892Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123121"}] [36m+1ms[0m
2018-11-15T14:24:57.364384510Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123121"}] [36m+0ms[0m
2018-11-15T14:24:57.364391408Z    [32;1mserver [0m  ["lineChanged"] { line: 123123121 } [32m+148ms[0m
2018-11-15T14:24:57.364397364Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123121"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:57.364550955Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123121"}],"nsp":"/"} as 2["syncLine",{"line":"123123121"}] [32m+0ms[0m
2018-11-15T14:24:57.369885070Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231212"}]" [33m+6ms[0m
2018-11-15T14:24:57.369930122Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:57.370079207Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231212"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212"}]} [32m+5ms[0m
2018-11-15T14:24:57.370093999Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212"}]} [36m+5ms[0m
2018-11-15T14:24:57.370145252Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231212"}] [36m+0ms[0m
2018-11-15T14:24:57.370162991Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231212"}] [36m+0ms[0m
2018-11-15T14:24:57.370212900Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231212 } [32m+5ms[0m
2018-11-15T14:24:57.370221219Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231212"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.370228624Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231212"}],"nsp":"/"} as 2["syncLine",{"line":"1231231212"}] [32m+0ms[0m
2018-11-15T14:24:57.411346497Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312123"}]" [33m+42ms[0m
2018-11-15T14:24:57.411424475Z    [34;1mengine:socket [0mpacket [34m+42ms[0m
2018-11-15T14:24:57.411560317Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123"}]} [32m+42ms[0m
2018-11-15T14:24:57.411574135Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123"}]} [36m+42ms[0m
2018-11-15T14:24:57.412824221Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312123"}] [36m+0ms[0m
2018-11-15T14:24:57.412839632Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312123"}] [36m+1ms[0m
2018-11-15T14:24:57.412844667Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312123 } [32m+43ms[0m
2018-11-15T14:24:57.412848824Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:57.412853300Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312123"}],"nsp":"/"} as 2["syncLine",{"line":"12312312123"}] [32m+0ms[0m
2018-11-15T14:24:57.532081938Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123121232"}]" [33m+120ms[0m
2018-11-15T14:24:57.532110988Z    [34;1mengine:socket [0mpacket [34m+120ms[0m
2018-11-15T14:24:57.532115865Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123121232"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121232"}]} [32m+119ms[0m
2018-11-15T14:24:57.532167363Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123121232"}]} [36m+119ms[0m
2018-11-15T14:24:57.532172013Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123121232"}] [36m+0ms[0m
2018-11-15T14:24:57.532175963Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123121232"}] [36m+0ms[0m
2018-11-15T14:24:57.532180053Z    [32;1mserver [0m  ["lineChanged"] { line: 123123121232 } [32m+119ms[0m
2018-11-15T14:24:57.532183789Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123121232"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.532188431Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123121232"}],"nsp":"/"} as 2["syncLine",{"line":"123123121232"}] [32m+0ms[0m
2018-11-15T14:24:57.560872234Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231212321"}]" [33m+29ms[0m
2018-11-15T14:24:57.560902554Z    [34;1mengine:socket [0mpacket [34m+29ms[0m
2018-11-15T14:24:57.560922517Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231212321"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212321"}]} [32m+29ms[0m
2018-11-15T14:24:57.560951881Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231212321"}]} [36m+29ms[0m
2018-11-15T14:24:57.560956230Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231212321"}] [36m+0ms[0m
2018-11-15T14:24:57.560960076Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231212321"}] [36m+0ms[0m
2018-11-15T14:24:57.560963713Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231212321 } [32m+29ms[0m
2018-11-15T14:24:57.560967333Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231212321"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.560983124Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231212321"}],"nsp":"/"} as 2["syncLine",{"line":"1231231212321"}] [32m+0ms[0m
2018-11-15T14:24:57.596721030Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312123213"}]" [33m+35ms[0m
2018-11-15T14:24:57.596818497Z    [34;1mengine:socket [0mpacket [34m+35ms[0m
2018-11-15T14:24:57.596827925Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312123213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123213"}]} [32m+36ms[0m
2018-11-15T14:24:57.596835775Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312123213"}]} [36m+36ms[0m
2018-11-15T14:24:57.596867276Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312123213"}] [36m+0ms[0m
2018-11-15T14:24:57.596874910Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312123213"}] [36m+0ms[0m
2018-11-15T14:24:57.596881358Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312123213 } [32m+36ms[0m
2018-11-15T14:24:57.596887120Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312123213"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.596893875Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312123213"}],"nsp":"/"} as 2["syncLine",{"line":"12312312123213"}] [32m+0ms[0m
2018-11-15T14:24:57.652494518Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+56ms[0m
2018-11-15T14:24:57.652549649Z    [34;1mengine:socket [0mpacket [34m+56ms[0m
2018-11-15T14:24:57.652554888Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+56ms[0m
2018-11-15T14:24:57.652574260Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+56ms[0m
2018-11-15T14:24:57.652578691Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:57.652582365Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:57.652585841Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+56ms[0m
2018-11-15T14:24:57.652610158Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.652615689Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:57.657714004Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12312312123213"}]" [33m+5ms[0m
2018-11-15T14:24:57.657835787Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:57.657843795Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12312312123213"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312123213"}]} [32m+4ms[0m
2018-11-15T14:24:57.657851559Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312123213"}]} [36m+5ms[0m
2018-11-15T14:24:57.657858095Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12312312123213"}] [36m+0ms[0m
2018-11-15T14:24:57.657864317Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12312312123213"}] [36m+0ms[0m
2018-11-15T14:24:57.657870424Z    [32;1mserver [0m  ["evaluate"] { code: 12312312123213 } [32m+5ms[0m
2018-11-15T14:24:57.657876178Z    [32;1mRepl [0m[bufferWrite(string = "12312312123213", bufferInterval = 5, write = true)] [32m+959ms[0m
2018-11-15T14:24:57.657882151Z    [32;1mRepl [0m  this.process.write('12312312123213' + '\n') [32m+0ms[0m
2018-11-15T14:24:57.657909235Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:57.657916363Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:57.657922188Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:57.658612237Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:57.658628311Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:57.658634895Z        return result !== '';
2018-11-15T14:24:57.658640529Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:57.658700149Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:57.658709410Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:57.658714920Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:57.658720175Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:57.658725618Z          if (condFunc()) {
2018-11-15T14:24:57.658730662Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:57.658736222Z            return resolve(value);
2018-11-15T14:24:57.658742332Z          }
2018-11-15T14:24:57.658766903Z          setTimeout(wait, interval);
2018-11-15T14:24:57.658772388Z        } [32m+0ms[0m
2018-11-15T14:24:57.658777312Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:57.658782294Z    [32;1mRepl [0m  [concatResult(data = 12312312123213
2018-11-15T14:24:57.658787122Z  => 12312312123213
2018-11-15T14:24:57.658791869Z  irb(main):004:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:57.659217316Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:57.659227994Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:57.659231505Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:57.659234737Z          if (condFunc()) {
2018-11-15T14:24:57.659237794Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:57.659241249Z            return resolve(value);
2018-11-15T14:24:57.659244429Z          }
2018-11-15T14:24:57.659248032Z          setTimeout(wait, interval);
2018-11-15T14:24:57.659251234Z        } [32m+0ms[0m
2018-11-15T14:24:57.659254386Z    [32;1mRepl [0m  [isDataReceived()] result: "12312312123213
2018-11-15T14:24:57.659257814Z  => 12312312123213
2018-11-15T14:24:57.659308754Z  irb(main):004:0> " [32m+0ms[0m
2018-11-15T14:24:57.659313566Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:57.659317191Z    [32;1mRepl [0m`let currResult = result` //==> "12312312123213
2018-11-15T14:24:57.659326108Z  => 12312312123213
2018-11-15T14:24:57.659343018Z  irb(main):004:0> " [32m+0ms[0m
2018-11-15T14:24:57.659347530Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:57.664903454Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:57.664963826Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:57.664970352Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:57.664973998Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:57.664977369Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:57.664981958Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:57.664987883Z        return result += data;
2018-11-15T14:24:57.664992946Z      })] [32m+0ms[0m
2018-11-15T14:24:57.664997906Z    [32;1mRepl [0m  resolve(result = "12312312123213
2018-11-15T14:24:57.665003360Z  => 12312312123213
2018-11-15T14:24:57.665008546Z  irb(main):004:0> ") [32m+0ms[0m
2018-11-15T14:24:57.665013592Z    [32;1mserver [0m  [emitOutput] output: 12312312123213
2018-11-15T14:24:57.665018644Z  => 12312312123213
2018-11-15T14:24:57.665077668Z  irb(main):004:0>  [32m+7ms[0m
2018-11-15T14:24:57.665082832Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:57.665090554Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}],"nsp":"/"} as 2["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}] [32m+0ms[0m
2018-11-15T14:24:57.665218874Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12312312123213\\r\\n=> 12312312123213\\r\\nirb(main):004:0> \"}]"] [33m+966ms[0m
2018-11-15T14:24:57.665826022Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}]) [34m+9ms[0m
2018-11-15T14:24:57.665840790Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:57.665845007Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12312312123213\r\n=> 12312312123213\r\nirb(main):004:0> "}]" [33m+9ms[0m
2018-11-15T14:24:57.842712695Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+177ms[0m
2018-11-15T14:24:57.843346368Z    [34;1mengine:socket [0mpacket [34m+177ms[0m
2018-11-15T14:24:57.843359381Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+179ms[0m
2018-11-15T14:24:57.843489898Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+186ms[0m
2018-11-15T14:24:57.844112615Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:57.844124754Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:57.844129216Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+179ms[0m
2018-11-15T14:24:57.844133041Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.844263827Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:57.847933643Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
2018-11-15T14:24:57.847949954Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:57.847954451Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
2018-11-15T14:24:57.848007518Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+4ms[0m
2018-11-15T14:24:57.848014477Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:57.848018330Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:57.848022050Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+4ms[0m
2018-11-15T14:24:57.848025650Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.848029737Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:57.865194121Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+17ms[0m
2018-11-15T14:24:57.865780226Z    [34;1mengine:socket [0mpacket [34m+18ms[0m
2018-11-15T14:24:57.865843913Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+18ms[0m
2018-11-15T14:24:57.866257139Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+18ms[0m
2018-11-15T14:24:57.866269530Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:57.866274341Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+1ms[0m
2018-11-15T14:24:57.866278433Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+19ms[0m
2018-11-15T14:24:57.866335458Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:57.866531230Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:57.871621519Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:24:57.871636878Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:57.871641274Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
2018-11-15T14:24:57.871645838Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
2018-11-15T14:24:57.871649953Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:57.871653652Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:57.871657303Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+5ms[0m
2018-11-15T14:24:57.871660836Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:57.872078104Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:57.872089664Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
2018-11-15T14:24:57.872432197Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:24:57.872442781Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
2018-11-15T14:24:57.872742896Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
2018-11-15T14:24:57.872753701Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:57.872757627Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:57.873107532Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+1ms[0m
2018-11-15T14:24:57.873117835Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+208ms[0m
2018-11-15T14:24:57.873121863Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:57.873125369Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:57.873552241Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:57.873563641Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:57.873567247Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:57.873570632Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:57.873573975Z        return result !== '';
2018-11-15T14:24:57.873577104Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:57.873580352Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:57.873708828Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:57.874091609Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:57.874101455Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:57.874104950Z          if (condFunc()) {
2018-11-15T14:24:57.874108287Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:57.874112320Z            return resolve(value);
2018-11-15T14:24:57.874115445Z          }
2018-11-15T14:24:57.874118459Z          setTimeout(wait, interval);
2018-11-15T14:24:57.874121920Z        } [32m+0ms[0m
2018-11-15T14:24:57.874125167Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:57.874128681Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:57.874131919Z  => 123
2018-11-15T14:24:57.874135120Z  irb(main):005:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:57.875550177Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:57.875565756Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:57.875571461Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:57.875576961Z          if (condFunc()) {
2018-11-15T14:24:57.875582033Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:57.875631802Z            return resolve(value);
2018-11-15T14:24:57.875638608Z          }
2018-11-15T14:24:57.875650403Z          setTimeout(wait, interval);
2018-11-15T14:24:57.875700217Z        } [32m+2ms[0m
2018-11-15T14:24:57.875725360Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:57.875731302Z  => 123
2018-11-15T14:24:57.875736366Z  irb(main):005:0> " [32m+0ms[0m
2018-11-15T14:24:57.875750484Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:57.875756713Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:57.875762262Z  => 123
2018-11-15T14:24:57.875787407Z  irb(main):005:0> " [32m+0ms[0m
2018-11-15T14:24:57.875793452Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:57.881206196Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:57.881260501Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:57.881267209Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:57.881274352Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:57.881278012Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:57.881281577Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:57.881284837Z        return result += data;
2018-11-15T14:24:57.881287932Z      })] [32m+0ms[0m
2018-11-15T14:24:57.881291079Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:57.881294399Z  => 123
2018-11-15T14:24:57.881297584Z  irb(main):005:0> ") [32m+0ms[0m
2018-11-15T14:24:57.881300837Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:57.881304079Z  => 123
2018-11-15T14:24:57.881307053Z  irb(main):005:0>  [32m+8ms[0m
2018-11-15T14:24:57.881310375Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:57.881315186Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}] [32m+1ms[0m
2018-11-15T14:24:57.881784697Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):005:0> \"}]"] [33m+217ms[0m
2018-11-15T14:24:57.881798133Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]) [34m+10ms[0m
2018-11-15T14:24:57.881802664Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:57.881806107Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):005:0> "}]" [33m+10ms[0m
2018-11-15T14:24:58.067821767Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+186ms[0m
2018-11-15T14:24:58.068196110Z    [34;1mengine:socket [0mpacket [34m+186ms[0m
2018-11-15T14:24:58.068532579Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+187ms[0m
2018-11-15T14:24:58.068837509Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+196ms[0m
2018-11-15T14:24:58.069035904Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:58.069308078Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+1ms[0m
2018-11-15T14:24:58.069555476Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+189ms[0m
2018-11-15T14:24:58.069812338Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.070031440Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:24:58.074010232Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"23"}]" [33m+6ms[0m
2018-11-15T14:24:58.074329676Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:24:58.074575241Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"23"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [32m+5ms[0m
2018-11-15T14:24:58.074793498Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [36m+5ms[0m
2018-11-15T14:24:58.074995914Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"23"}] [36m+0ms[0m
2018-11-15T14:24:58.075240856Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"23"}] [36m+1ms[0m
2018-11-15T14:24:58.075576091Z    [32;1mserver [0m  ["lineChanged"] { line: 23 } [32m+6ms[0m
2018-11-15T14:24:58.075775813Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.076016192Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} as 2["syncLine",{"line":"23"}] [32m+0ms[0m
2018-11-15T14:24:58.213697185Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+140ms[0m
2018-11-15T14:24:58.214005949Z    [34;1mengine:socket [0mpacket [34m+139ms[0m
2018-11-15T14:24:58.214400248Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+139ms[0m
2018-11-15T14:24:58.214620221Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+139ms[0m
2018-11-15T14:24:58.214833810Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.215110425Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.215288256Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+140ms[0m
2018-11-15T14:24:58.215681807Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.215750651Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:58.219729628Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"23"}]" [33m+6ms[0m
2018-11-15T14:24:58.219935454Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:58.220246541Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"23"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [32m+5ms[0m
2018-11-15T14:24:58.220582550Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [36m+6ms[0m
2018-11-15T14:24:58.220826774Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"23"}] [36m+0ms[0m
2018-11-15T14:24:58.221017150Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"23"}] [36m+0ms[0m
2018-11-15T14:24:58.221176545Z    [32;1mserver [0m  ["evaluate"] { code: 23 } [32m+6ms[0m
2018-11-15T14:24:58.221334056Z    [32;1mRepl [0m[bufferWrite(string = "23", bufferInterval = 5, write = true)] [32m+341ms[0m
2018-11-15T14:24:58.221505634Z    [32;1mRepl [0m  this.process.write('23' + '\n') [32m+0ms[0m
2018-11-15T14:24:58.222058970Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:58.222069742Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:58.222074153Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:58.222077790Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:58.222081298Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:58.222085146Z        return result !== '';
2018-11-15T14:24:58.222088431Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:58.222180846Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:58.222350091Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.222461299Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.222528114Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.222676112Z          if (condFunc()) {
2018-11-15T14:24:58.222832974Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.222897824Z            return resolve(value);
2018-11-15T14:24:58.223293373Z          }
2018-11-15T14:24:58.223305212Z          setTimeout(wait, interval);
2018-11-15T14:24:58.223309314Z        } [32m+1ms[0m
2018-11-15T14:24:58.223312804Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:24:58.223316612Z    [32;1mRepl [0m  [concatResult(data = 23
2018-11-15T14:24:58.223319914Z  => 23
2018-11-15T14:24:58.223323194Z  irb(main):006:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:58.224518778Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.224695525Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.224868573Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.225058889Z          if (condFunc()) {
2018-11-15T14:24:58.225248591Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.225450358Z            return resolve(value);
2018-11-15T14:24:58.225660203Z          }
2018-11-15T14:24:58.225839763Z          setTimeout(wait, interval);
2018-11-15T14:24:58.226013364Z        } [32m+1ms[0m
2018-11-15T14:24:58.226288633Z    [32;1mRepl [0m  [isDataReceived()] result: "23
2018-11-15T14:24:58.226608218Z  => 23
2018-11-15T14:24:58.226623857Z  irb(main):006:0> " [32m+2ms[0m
2018-11-15T14:24:58.226834396Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:58.226844475Z    [32;1mRepl [0m`let currResult = result` //==> "23
2018-11-15T14:24:58.227054675Z  => 23
2018-11-15T14:24:58.227067003Z  irb(main):006:0> " [32m+0ms[0m
2018-11-15T14:24:58.227072197Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:58.232303607Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:58.232324538Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:58.232558718Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:58.232581647Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:58.232586007Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:58.232589552Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:58.232592892Z        return result += data;
2018-11-15T14:24:58.232596060Z      })] [32m+0ms[0m
2018-11-15T14:24:58.232841203Z    [32;1mRepl [0m  resolve(result = "23
2018-11-15T14:24:58.232854131Z  => 23
2018-11-15T14:24:58.232858008Z  irb(main):006:0> ") [32m+0ms[0m
2018-11-15T14:24:58.232861454Z    [32;1mserver [0m  [emitOutput] output: 23
2018-11-15T14:24:58.232864815Z  => 23
2018-11-15T14:24:58.232867850Z  irb(main):006:0>  [32m+11ms[0m
2018-11-15T14:24:58.232871524Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}],"nsp":"/"} [32m+12ms[0m
2018-11-15T14:24:58.232964978Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}],"nsp":"/"} as 2["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}] [32m+0ms[0m
2018-11-15T14:24:58.233103245Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"23\\r\\n=> 23\\r\\nirb(main):006:0> \"}]"] [33m+351ms[0m
2018-11-15T14:24:58.233354150Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}]) [34m+14ms[0m
2018-11-15T14:24:58.233461417Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:58.233603932Z    [33;1mengine:ws [0mwriting "42["output",{"output":"23\r\n=> 23\r\nirb(main):006:0> "}]" [33m+14ms[0m
2018-11-15T14:24:58.239172416Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+5ms[0m
2018-11-15T14:24:58.239301221Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:58.239533351Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+7ms[0m
2018-11-15T14:24:58.239675316Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+19ms[0m
2018-11-15T14:24:58.239812443Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.239927003Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.240510613Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+7ms[0m
2018-11-15T14:24:58.240655325Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.240790889Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:58.279880876Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+41ms[0m
2018-11-15T14:24:58.280121460Z    [34;1mengine:socket [0mpacket [34m+40ms[0m
2018-11-15T14:24:58.280452940Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+40ms[0m
2018-11-15T14:24:58.280683751Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+41ms[0m
2018-11-15T14:24:58.280934981Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:58.281086766Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:58.281256530Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+42ms[0m
2018-11-15T14:24:58.281563686Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.281721377Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:58.285905106Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+6ms[0m
2018-11-15T14:24:58.286076121Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:58.286366226Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+5ms[0m
2018-11-15T14:24:58.286571841Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+6ms[0m
2018-11-15T14:24:58.286820449Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.287037579Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.287151566Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+6ms[0m
2018-11-15T14:24:58.287406449Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.287602867Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:58.369415584Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+84ms[0m
2018-11-15T14:24:58.369588467Z    [34;1mengine:socket [0mpacket [34m+84ms[0m
2018-11-15T14:24:58.369896743Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+82ms[0m
2018-11-15T14:24:58.370139054Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+83ms[0m
2018-11-15T14:24:58.370359541Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:58.370566795Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.370754597Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+83ms[0m
2018-11-15T14:24:58.370850260Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.371058232Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:58.375763724Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
2018-11-15T14:24:58.376070545Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:58.376354050Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
2018-11-15T14:24:58.376472536Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
2018-11-15T14:24:58.376669998Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.376898268Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.377170063Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
2018-11-15T14:24:58.377355197Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+145ms[0m
2018-11-15T14:24:58.377545750Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:58.378371830Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:58.378395885Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:58.378425046Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:58.378448929Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:58.378455527Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:58.378460761Z        return result !== '';
2018-11-15T14:24:58.378465816Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:58.378470935Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:24:58.378476522Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.378500260Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.378509111Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.378513732Z          if (condFunc()) {
2018-11-15T14:24:58.378518333Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.378524189Z            return resolve(value);
2018-11-15T14:24:58.378529169Z          }
2018-11-15T14:24:58.378534841Z          setTimeout(wait, interval);
2018-11-15T14:24:58.378641377Z        } [32m+0ms[0m
2018-11-15T14:24:58.378754535Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:58.378972773Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:58.378991741Z  => 123
2018-11-15T14:24:58.378998162Z  irb(main):007:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:58.380412097Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.380606533Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.380768489Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.380907577Z          if (condFunc()) {
2018-11-15T14:24:58.380922261Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.380971563Z            return resolve(value);
2018-11-15T14:24:58.381105567Z          }
2018-11-15T14:24:58.381242355Z          setTimeout(wait, interval);
2018-11-15T14:24:58.381253432Z        } [32m+2ms[0m
2018-11-15T14:24:58.381388647Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:58.381419162Z  => 123
2018-11-15T14:24:58.381503161Z  irb(main):007:0> " [32m+1ms[0m
2018-11-15T14:24:58.381574869Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:58.381726549Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:58.381737724Z  => 123
2018-11-15T14:24:58.381767034Z  irb(main):007:0> " [32m+0ms[0m
2018-11-15T14:24:58.381869988Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:58.389749380Z    [32;1mRepl [0m  [setInterval()] [32m+8ms[0m
2018-11-15T14:24:58.389802182Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:58.389809714Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:58.389815157Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:58.389820693Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:58.389826342Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:58.389831494Z        return result += data;
2018-11-15T14:24:58.389836486Z      })] [32m+0ms[0m
2018-11-15T14:24:58.389968976Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:58.389979704Z  => 123
2018-11-15T14:24:58.389985062Z  irb(main):007:0> ") [32m+0ms[0m
2018-11-15T14:24:58.389991034Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:58.389996285Z  => 123
2018-11-15T14:24:58.390001050Z  irb(main):007:0>  [32m+13ms[0m
2018-11-15T14:24:58.390006727Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} [32m+13ms[0m
2018-11-15T14:24:58.390213770Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}] [32m+0ms[0m
2018-11-15T14:24:58.390228202Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):007:0> \"}]"] [33m+157ms[0m
2018-11-15T14:24:58.390236209Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]) [34m+15ms[0m
2018-11-15T14:24:58.390243012Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:58.390248564Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):007:0> "}]" [33m+15ms[0m
2018-11-15T14:24:58.431989489Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+41ms[0m
2018-11-15T14:24:58.432020560Z    [34;1mengine:socket [0mpacket [34m+41ms[0m
2018-11-15T14:24:58.432025353Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+42ms[0m
2018-11-15T14:24:58.432043171Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+55ms[0m
2018-11-15T14:24:58.432047638Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.432051449Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.432099074Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+42ms[0m
2018-11-15T14:24:58.432102821Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.432107034Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:58.443136698Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+11ms[0m
2018-11-15T14:24:58.443162614Z    [34;1mengine:socket [0mpacket [34m+11ms[0m
2018-11-15T14:24:58.443215546Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+11ms[0m
2018-11-15T14:24:58.443228005Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+11ms[0m
2018-11-15T14:24:58.443235316Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:58.443241399Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:58.443247791Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+11ms[0m
2018-11-15T14:24:58.443275681Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.443280666Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:58.500614849Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+57ms[0m
2018-11-15T14:24:58.500645720Z    [34;1mengine:socket [0mpacket [34m+57ms[0m
2018-11-15T14:24:58.500650450Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+57ms[0m
2018-11-15T14:24:58.500655668Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+58ms[0m
2018-11-15T14:24:58.500659908Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.500725384Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.500731960Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+58ms[0m
2018-11-15T14:24:58.500735551Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.500740287Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:58.516700077Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+16ms[0m
2018-11-15T14:24:58.516726639Z    [34;1mengine:socket [0mpacket [34m+16ms[0m
2018-11-15T14:24:58.516731215Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+16ms[0m
2018-11-15T14:24:58.516754851Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+16ms[0m
2018-11-15T14:24:58.516759255Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.516763192Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.516767048Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+16ms[0m
2018-11-15T14:24:58.516770968Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.516775371Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:58.522415140Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
2018-11-15T14:24:58.522434893Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:58.522439293Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+5ms[0m
2018-11-15T14:24:58.522444182Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+5ms[0m
2018-11-15T14:24:58.522485537Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.522489879Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:24:58.522493587Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+5ms[0m
2018-11-15T14:24:58.522497458Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+133ms[0m
2018-11-15T14:24:58.522513704Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:24:58.522517517Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:58.522521066Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:58.522524632Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:58.522541593Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:58.522545890Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:58.522549371Z        return result !== '';
2018-11-15T14:24:58.522552515Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:58.522555797Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:58.522559343Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.522562554Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.522565651Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.522568903Z          if (condFunc()) {
2018-11-15T14:24:58.522572338Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.522575741Z            return resolve(value);
2018-11-15T14:24:58.522578840Z          }
2018-11-15T14:24:58.522581874Z          setTimeout(wait, interval);
2018-11-15T14:24:58.522585070Z        } [32m+0ms[0m
2018-11-15T14:24:58.522588272Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:58.523111656Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:24:58.523121546Z  => 123
2018-11-15T14:24:58.523125112Z  irb(main):008:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:58.523128517Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.523131854Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.523135072Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.523138389Z          if (condFunc()) {
2018-11-15T14:24:58.523141502Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.523144912Z            return resolve(value);
2018-11-15T14:24:58.523147976Z          }
2018-11-15T14:24:58.523151026Z          setTimeout(wait, interval);
2018-11-15T14:24:58.523154098Z        } [32m+0ms[0m
2018-11-15T14:24:58.523178614Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:24:58.523183192Z  => 123
2018-11-15T14:24:58.523186326Z  irb(main):008:0> " [32m+0ms[0m
2018-11-15T14:24:58.523189645Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:58.523193197Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:24:58.523196581Z  => 123
2018-11-15T14:24:58.523199699Z  irb(main):008:0> " [32m+0ms[0m
2018-11-15T14:24:58.523202976Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:58.528824667Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:58.528851076Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:58.528855606Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:58.528859148Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:58.528904584Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:58.528910701Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:58.528913941Z        return result += data;
2018-11-15T14:24:58.528917124Z      })] [32m+0ms[0m
2018-11-15T14:24:58.528920364Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:24:58.528923784Z  => 123
2018-11-15T14:24:58.528926901Z  irb(main):008:0> ") [32m+0ms[0m
2018-11-15T14:24:58.528930366Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:24:58.528933661Z  => 123
2018-11-15T14:24:58.528936665Z  irb(main):008:0>  [32m+7ms[0m
2018-11-15T14:24:58.528939932Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:58.528944790Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}] [32m+0ms[0m
2018-11-15T14:24:58.528963966Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):008:0> \"}]"] [33m+139ms[0m
2018-11-15T14:24:58.528968630Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}]) [34m+7ms[0m
2018-11-15T14:24:58.528972786Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:58.528984440Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):008:0> "}]" [33m+7ms[0m
2018-11-15T14:24:58.624021648Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+94ms[0m
2018-11-15T14:24:58.624049295Z    [34;1mengine:socket [0mpacket [34m+94ms[0m
2018-11-15T14:24:58.624054009Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+95ms[0m
2018-11-15T14:24:58.624059052Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+102ms[0m
2018-11-15T14:24:58.624063443Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.624082952Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.624086919Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+95ms[0m
2018-11-15T14:24:58.624090621Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.624095287Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:58.654310755Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+31ms[0m
2018-11-15T14:24:58.654379315Z    [34;1mengine:socket [0mpacket [34m+31ms[0m
2018-11-15T14:24:58.654385553Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+30ms[0m
2018-11-15T14:24:58.654390593Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+30ms[0m
2018-11-15T14:24:58.654394768Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.654398801Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.654402607Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+30ms[0m
2018-11-15T14:24:58.654419841Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.654440835Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:58.659150292Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"1"}]" [33m+5ms[0m
2018-11-15T14:24:58.659171352Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:58.659208412Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"1"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [32m+5ms[0m
2018-11-15T14:24:58.659214491Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"1"}]} [36m+5ms[0m
2018-11-15T14:24:58.659218554Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.659222189Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"1"}] [36m+0ms[0m
2018-11-15T14:24:58.659225742Z    [32;1mserver [0m  ["evaluate"] { code: 1 } [32m+5ms[0m
2018-11-15T14:24:58.659229272Z    [32;1mRepl [0m[bufferWrite(string = "1", bufferInterval = 5, write = true)] [32m+130ms[0m
2018-11-15T14:24:58.659232859Z    [32;1mRepl [0m  this.process.write('1' + '\n') [32m+0ms[0m
2018-11-15T14:24:58.659236234Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:58.659239691Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:58.659243221Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:58.659246616Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:58.659249978Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:58.659253415Z        return result !== '';
2018-11-15T14:24:58.659256728Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:58.659260133Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:58.659263626Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.659302103Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.659307469Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.659310786Z          if (condFunc()) {
2018-11-15T14:24:58.659313861Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.659317393Z            return resolve(value);
2018-11-15T14:24:58.659320644Z          }
2018-11-15T14:24:58.659323756Z          setTimeout(wait, interval);
2018-11-15T14:24:58.659326943Z        } [32m+0ms[0m
2018-11-15T14:24:58.659330145Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:58.659810101Z    [32;1mRepl [0m  [concatResult(data = 1
2018-11-15T14:24:58.659820381Z  => 1
2018-11-15T14:24:58.659823709Z  irb(main):009:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:58.659837363Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.659840898Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.659844127Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.659847446Z          if (condFunc()) {
2018-11-15T14:24:58.659850542Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.659853888Z            return resolve(value);
2018-11-15T14:24:58.659857094Z          }
2018-11-15T14:24:58.659890872Z          setTimeout(wait, interval);
2018-11-15T14:24:58.659897962Z        } [32m+0ms[0m
2018-11-15T14:24:58.660575146Z    [32;1mRepl [0m  [isDataReceived()] result: "1
2018-11-15T14:24:58.660586989Z  => 1
2018-11-15T14:24:58.660590735Z  irb(main):009:0> " [32m+0ms[0m
2018-11-15T14:24:58.660594287Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:24:58.660598066Z    [32;1mRepl [0m`let currResult = result` //==> "1
2018-11-15T14:24:58.660601490Z  => 1
2018-11-15T14:24:58.660604768Z  irb(main):009:0> " [32m+0ms[0m
2018-11-15T14:24:58.660608085Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:58.665680752Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:58.665711421Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:58.665812504Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:58.665821417Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:58.665825224Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:58.665828827Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:58.665832159Z        return result += data;
2018-11-15T14:24:58.665835282Z      })] [32m+0ms[0m
2018-11-15T14:24:58.665838634Z    [32;1mRepl [0m  resolve(result = "1
2018-11-15T14:24:58.665841962Z  => 1
2018-11-15T14:24:58.665845167Z  irb(main):009:0> ") [32m+0ms[0m
2018-11-15T14:24:58.665848425Z    [32;1mserver [0m  [emitOutput] output: 1
2018-11-15T14:24:58.665872222Z  => 1
2018-11-15T14:24:58.665876150Z  irb(main):009:0>  [32m+7ms[0m
2018-11-15T14:24:58.666040986Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:58.666158760Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}],"nsp":"/"} as 2["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}] [32m+0ms[0m
2018-11-15T14:24:58.666166680Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"1\\r\\n=> 1\\r\\nirb(main):009:0> \"}]"] [33m+137ms[0m
2018-11-15T14:24:58.666172241Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}]) [34m+7ms[0m
2018-11-15T14:24:58.666176437Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:58.666179848Z    [33;1mengine:ws [0mwriting "42["output",{"output":"1\r\n=> 1\r\nirb(main):009:0> "}]" [33m+8ms[0m
2018-11-15T14:24:58.692866478Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+26ms[0m
2018-11-15T14:24:58.692893707Z    [34;1mengine:socket [0mpacket [34m+27ms[0m
2018-11-15T14:24:58.692898307Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+27ms[0m
2018-11-15T14:24:58.692903378Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+34ms[0m
2018-11-15T14:24:58.692907572Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:58.692917420Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:58.692935263Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+27ms[0m
2018-11-15T14:24:58.692999947Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.693016795Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:24:58.807648350Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+115ms[0m
2018-11-15T14:24:58.807700362Z    [34;1mengine:socket [0mpacket [34m+115ms[0m
2018-11-15T14:24:58.807706750Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+115ms[0m
2018-11-15T14:24:58.807711882Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+115ms[0m
2018-11-15T14:24:58.807716255Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:58.807735573Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:24:58.807899276Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+115ms[0m
2018-11-15T14:24:58.807913484Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.807918549Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:24:58.821211655Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+13ms[0m
2018-11-15T14:24:58.821281037Z    [34;1mengine:socket [0mpacket [34m+13ms[0m
2018-11-15T14:24:58.821493318Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+14ms[0m
2018-11-15T14:24:58.821505467Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+14ms[0m
2018-11-15T14:24:58.821510119Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.821514241Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.821692957Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+14ms[0m
2018-11-15T14:24:58.821704099Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.821708795Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:58.821933338Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"31"}]" [33m+1ms[0m
2018-11-15T14:24:58.821943394Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:58.822077057Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"31"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [32m+0ms[0m
2018-11-15T14:24:58.822086070Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"31"}]} [36m+0ms[0m
2018-11-15T14:24:58.822146011Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"31"}] [36m+0ms[0m
2018-11-15T14:24:58.822240021Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"31"}] [36m+1ms[0m
2018-11-15T14:24:58.822248579Z    [32;1mserver [0m  ["evaluate"] { code: 31 } [32m+1ms[0m
2018-11-15T14:24:58.822269210Z    [32;1mRepl [0m[bufferWrite(string = "31", bufferInterval = 5, write = true)] [32m+157ms[0m
2018-11-15T14:24:58.822288339Z    [32;1mRepl [0m  this.process.write('31' + '\n') [32m+0ms[0m
2018-11-15T14:24:58.822309977Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:58.822902350Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:58.822918580Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:58.822925928Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:58.822929577Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:58.822932990Z        return result !== '';
2018-11-15T14:24:58.822936180Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:58.822939515Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:58.822973504Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.822977620Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.822980790Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.822984017Z          if (condFunc()) {
2018-11-15T14:24:58.822987225Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.822990676Z            return resolve(value);
2018-11-15T14:24:58.823000154Z          }
2018-11-15T14:24:58.823003252Z          setTimeout(wait, interval);
2018-11-15T14:24:58.823006459Z        } [32m+0ms[0m
2018-11-15T14:24:58.823009650Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:58.823083139Z    [32;1mRepl [0m  [concatResult(data = 31
2018-11-15T14:24:58.823090757Z  => 31
2018-11-15T14:24:58.823094150Z  irb(main):010:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:58.824416106Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.824428761Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.824434628Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.824440898Z          if (condFunc()) {
2018-11-15T14:24:58.824445241Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.824450015Z            return resolve(value);
2018-11-15T14:24:58.824454784Z          }
2018-11-15T14:24:58.824459162Z          setTimeout(wait, interval);
2018-11-15T14:24:58.824510501Z        } [32m+2ms[0m
2018-11-15T14:24:58.824534384Z    [32;1mRepl [0m  [isDataReceived()] result: "31
2018-11-15T14:24:58.824541085Z  => 31
2018-11-15T14:24:58.824568426Z  irb(main):010:0> " [32m+0ms[0m
2018-11-15T14:24:58.824575903Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:58.824582010Z    [32;1mRepl [0m`let currResult = result` //==> "31
2018-11-15T14:24:58.824587099Z  => 31
2018-11-15T14:24:58.824591550Z  irb(main):010:0> " [32m+0ms[0m
2018-11-15T14:24:58.824596306Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:58.826295979Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+4ms[0m
2018-11-15T14:24:58.826318690Z    [34;1mengine:socket [0mpacket [34m+4ms[0m
2018-11-15T14:24:58.826325304Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+4ms[0m
2018-11-15T14:24:58.826332126Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+3ms[0m
2018-11-15T14:24:58.826338341Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+1ms[0m
2018-11-15T14:24:58.826371733Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:24:58.826380046Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+4ms[0m
2018-11-15T14:24:58.826385533Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.826391661Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:24:58.829954628Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:58.829972630Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:58.830016747Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:58.830020516Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:58.830024032Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:58.830033376Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:58.830037168Z        return result += data;
2018-11-15T14:24:58.830040357Z      })] [32m+0ms[0m
2018-11-15T14:24:58.830043683Z    [32;1mRepl [0m  resolve(result = "31
2018-11-15T14:24:58.830072801Z  => 31
2018-11-15T14:24:58.830077585Z  irb(main):010:0> ") [32m+0ms[0m
2018-11-15T14:24:58.830081033Z    [32;1mserver [0m  [emitOutput] output: 31
2018-11-15T14:24:58.830084382Z  => 31
2018-11-15T14:24:58.830089067Z  irb(main):010:0>  [32m+3ms[0m
2018-11-15T14:24:58.830093942Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}],"nsp":"/"} [32m+3ms[0m
2018-11-15T14:24:58.830101435Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}],"nsp":"/"} as 2["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}] [32m+0ms[0m
2018-11-15T14:24:58.830109638Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"31\\r\\n=> 31\\r\\nirb(main):010:0> \"}]"] [33m+164ms[0m
2018-11-15T14:24:58.830116229Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}]) [34m+4ms[0m
2018-11-15T14:24:58.830120444Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:58.830123867Z    [33;1mengine:ws [0mwriting "42["output",{"output":"31\r\n=> 31\r\nirb(main):010:0> "}]" [33m+4ms[0m
2018-11-15T14:24:58.875906599Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"23"}]" [33m+46ms[0m
2018-11-15T14:24:58.875937190Z    [34;1mengine:socket [0mpacket [34m+46ms[0m
2018-11-15T14:24:58.875941772Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"23"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [32m+46ms[0m
2018-11-15T14:24:58.875946815Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"23"}]} [36m+49ms[0m
2018-11-15T14:24:58.875951082Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"23"}] [36m+0ms[0m
2018-11-15T14:24:58.875955478Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"23"}] [36m+0ms[0m
2018-11-15T14:24:58.875959053Z    [32;1mserver [0m  ["lineChanged"] { line: 23 } [32m+46ms[0m
2018-11-15T14:24:58.875962607Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:58.875966815Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"23"}],"nsp":"/"} as 2["syncLine",{"line":"23"}] [32m+0ms[0m
2018-11-15T14:24:58.936418136Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+60ms[0m
2018-11-15T14:24:58.936445624Z    [34;1mengine:socket [0mpacket [34m+60ms[0m
2018-11-15T14:24:58.936494511Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+60ms[0m
2018-11-15T14:24:58.936500775Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+60ms[0m
2018-11-15T14:24:58.936504852Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.936508569Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:58.936512231Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+61ms[0m
2018-11-15T14:24:58.936515788Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:58.936519948Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:58.942246448Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"23"}]" [33m+6ms[0m
2018-11-15T14:24:58.942261472Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:58.942265552Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"23"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [32m+5ms[0m
2018-11-15T14:24:58.942270120Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"23"}]} [36m+6ms[0m
2018-11-15T14:24:58.942274195Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"23"}] [36m+0ms[0m
2018-11-15T14:24:58.942278037Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"23"}] [36m+0ms[0m
2018-11-15T14:24:58.942281640Z    [32;1mserver [0m  ["evaluate"] { code: 23 } [32m+5ms[0m
2018-11-15T14:24:58.942299828Z    [32;1mRepl [0m[bufferWrite(string = "23", bufferInterval = 5, write = true)] [32m+112ms[0m
2018-11-15T14:24:58.942304717Z    [32;1mRepl [0m  this.process.write('23' + '\n') [32m+0ms[0m
2018-11-15T14:24:58.942308177Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:58.942311599Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:58.942315167Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:24:58.942318987Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:58.942322322Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:58.942325637Z        return result !== '';
2018-11-15T14:24:58.942337085Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:58.942341291Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:58.942344946Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.942348199Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.942351448Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.942354643Z          if (condFunc()) {
2018-11-15T14:24:58.942357686Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.942361206Z            return resolve(value);
2018-11-15T14:24:58.942364446Z          }
2018-11-15T14:24:58.942400414Z          setTimeout(wait, interval);
2018-11-15T14:24:58.942405291Z        } [32m+0ms[0m
2018-11-15T14:24:58.942408537Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:58.942990488Z    [32;1mRepl [0m  [concatResult(data = 23
2018-11-15T14:24:58.942998871Z  => 23
2018-11-15T14:24:58.943002104Z  irb(main):011:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:58.943005526Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:58.943008751Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:58.943011846Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:58.943015123Z          if (condFunc()) {
2018-11-15T14:24:58.943018269Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:58.943021611Z            return resolve(value);
2018-11-15T14:24:58.943024688Z          }
2018-11-15T14:24:58.943027760Z          setTimeout(wait, interval);
2018-11-15T14:24:58.943030854Z        } [32m+0ms[0m
2018-11-15T14:24:58.943033946Z    [32;1mRepl [0m  [isDataReceived()] result: "23
2018-11-15T14:24:58.943037228Z  => 23
2018-11-15T14:24:58.943040383Z  irb(main):011:0> " [32m+0ms[0m
2018-11-15T14:24:58.943075026Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:58.943083957Z    [32;1mRepl [0m`let currResult = result` //==> "23
2018-11-15T14:24:58.943087829Z  => 23
2018-11-15T14:24:58.943090956Z  irb(main):011:0> " [32m+0ms[0m
2018-11-15T14:24:58.943094251Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:58.948579120Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:58.948603319Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:24:58.948608559Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:58.948612115Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:58.948615510Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:58.948618960Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:58.948660218Z        return result += data;
2018-11-15T14:24:58.948663551Z      })] [32m+0ms[0m
2018-11-15T14:24:58.948666743Z    [32;1mRepl [0m  resolve(result = "23
2018-11-15T14:24:58.948670170Z  => 23
2018-11-15T14:24:58.948678839Z  irb(main):011:0> ") [32m+0ms[0m
2018-11-15T14:24:58.948682558Z    [32;1mserver [0m  [emitOutput] output: 23
2018-11-15T14:24:58.948685879Z  => 23
2018-11-15T14:24:58.948688895Z  irb(main):011:0>  [32m+7ms[0m
2018-11-15T14:24:58.948692463Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:24:58.948697378Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}],"nsp":"/"} as 2["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}] [32m+0ms[0m
2018-11-15T14:24:58.948717389Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"23\\r\\n=> 23\\r\\nirb(main):011:0> \"}]"] [33m+119ms[0m
2018-11-15T14:24:58.948722867Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}]) [34m+7ms[0m
2018-11-15T14:24:58.948727058Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:58.948730501Z    [33;1mengine:ws [0mwriting "42["output",{"output":"23\r\n=> 23\r\nirb(main):011:0> "}]" [33m+7ms[0m
2018-11-15T14:24:59.085062835Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+136ms[0m
2018-11-15T14:24:59.085117274Z    [34;1mengine:socket [0mpacket [34m+136ms[0m
2018-11-15T14:24:59.085122617Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+136ms[0m
2018-11-15T14:24:59.085284486Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+143ms[0m
2018-11-15T14:24:59.085298388Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:59.085375566Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:24:59.085385077Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+137ms[0m
2018-11-15T14:24:59.085641098Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:24:59.085651613Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:59.090902600Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:24:59.090927464Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:59.091081902Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:24:59.091091287Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:24:59.091095428Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:24:59.091207473Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:24:59.091215091Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:24:59.091246789Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+143ms[0m
2018-11-15T14:24:59.091250560Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:24:59.091528666Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:59.091703514Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:24:59.091711359Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:59.091714959Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:59.091718396Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:59.091733604Z        return result !== '';
2018-11-15T14:24:59.091737019Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:59.091740285Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:59.091781890Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:59.091787149Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:59.091790352Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:59.091805659Z          if (condFunc()) {
2018-11-15T14:24:59.091809633Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:59.091813047Z            return resolve(value);
2018-11-15T14:24:59.091816148Z          }
2018-11-15T14:24:59.091819201Z          setTimeout(wait, interval);
2018-11-15T14:24:59.091822307Z        } [32m+0ms[0m
2018-11-15T14:24:59.091825467Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:59.091900912Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:24:59.091908061Z  irb(main):012:0> )] result: "" [32m+0ms[0m
2018-11-15T14:24:59.093149039Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:59.093158374Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:59.093161787Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:59.093165081Z          if (condFunc()) {
2018-11-15T14:24:59.093168153Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:59.093171644Z            return resolve(value);
2018-11-15T14:24:59.093174700Z          }
2018-11-15T14:24:59.093177777Z          setTimeout(wait, interval);
2018-11-15T14:24:59.093181227Z        } [32m+1ms[0m
2018-11-15T14:24:59.093184434Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:24:59.093187702Z  irb(main):012:0> " [32m+0ms[0m
2018-11-15T14:24:59.093191186Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:59.093194795Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:24:59.093198110Z  irb(main):012:0> " [32m+0ms[0m
2018-11-15T14:24:59.093232733Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:59.098726544Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:24:59.098747140Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:59.098754087Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:24:59.098809654Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:59.098816025Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:59.098828027Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:59.098831504Z        return result += data;
2018-11-15T14:24:59.098861536Z      })] [32m+0ms[0m
2018-11-15T14:24:59.098870363Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:24:59.098875649Z  irb(main):012:0> ") [32m+0ms[0m
2018-11-15T14:24:59.098880925Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:24:59.098887033Z  irb(main):012:0>  [32m+7ms[0m
2018-11-15T14:24:59.098892020Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):012:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:24:59.098899265Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):012:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):012:0> "}] [32m+0ms[0m
2018-11-15T14:24:59.098906648Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):012:0> \"}]"] [33m+150ms[0m
2018-11-15T14:24:59.098913423Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):012:0> "}]) [34m+8ms[0m
2018-11-15T14:24:59.098917855Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:59.098921222Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):012:0> "}]" [33m+8ms[0m
2018-11-15T14:24:59.118623934Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+19ms[0m
2018-11-15T14:24:59.118667416Z    [34;1mengine:socket [0mpacket [34m+20ms[0m
2018-11-15T14:24:59.118672054Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+20ms[0m
2018-11-15T14:24:59.118676750Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+27ms[0m
2018-11-15T14:24:59.118681074Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:59.118685094Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:24:59.118688782Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+20ms[0m
2018-11-15T14:24:59.118692286Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.118696363Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:24:59.139547829Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+21ms[0m
2018-11-15T14:24:59.139652954Z    [34;1mengine:socket [0mpacket [34m+21ms[0m
2018-11-15T14:24:59.139672451Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+21ms[0m
2018-11-15T14:24:59.139681810Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+21ms[0m
2018-11-15T14:24:59.139688086Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:59.139694031Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:24:59.139699854Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+21ms[0m
2018-11-15T14:24:59.139705546Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.139713469Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:24:59.286946953Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+148ms[0m
2018-11-15T14:24:59.286975978Z    [34;1mengine:socket [0mpacket [34m+147ms[0m
2018-11-15T14:24:59.286980432Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+147ms[0m
2018-11-15T14:24:59.286985973Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+147ms[0m
2018-11-15T14:24:59.286990074Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:59.286993933Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:24:59.286999061Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+147ms[0m
2018-11-15T14:24:59.287004527Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.287008941Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:24:59.499557688Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+212ms[0m
2018-11-15T14:24:59.499604254Z    [34;1mengine:socket [0mpacket [34m+213ms[0m
2018-11-15T14:24:59.499616476Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+213ms[0m
2018-11-15T14:24:59.499621769Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+213ms[0m
2018-11-15T14:24:59.499639312Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:59.499643478Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:24:59.499647120Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+213ms[0m
2018-11-15T14:24:59.499650918Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.499655065Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
2018-11-15T14:24:59.506256315Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+6ms[0m
2018-11-15T14:24:59.506319251Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:59.506325340Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
2018-11-15T14:24:59.506330452Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+5ms[0m
2018-11-15T14:24:59.506334639Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:59.506338445Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:24:59.509540740Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+10ms[0m
2018-11-15T14:24:59.509559792Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+5ms[0m
2018-11-15T14:24:59.509568848Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:24:59.577618792Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+73ms[0m
2018-11-15T14:24:59.577650815Z    [34;1mengine:socket [0mpacket [34m+73ms[0m
2018-11-15T14:24:59.577768203Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+68ms[0m
2018-11-15T14:24:59.577777890Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+73ms[0m
2018-11-15T14:24:59.577782355Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:24:59.577786429Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:24:59.577876443Z    [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+68ms[0m
2018-11-15T14:24:59.577899738Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.577904701Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
2018-11-15T14:24:59.690047218Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231"}]" [33m+112ms[0m
2018-11-15T14:24:59.690076369Z    [34;1mengine:socket [0mpacket [34m+112ms[0m
2018-11-15T14:24:59.690081067Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [32m+112ms[0m
2018-11-15T14:24:59.690086135Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [36m+112ms[0m
2018-11-15T14:24:59.690113652Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
2018-11-15T14:24:59.690119558Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
2018-11-15T14:24:59.690123565Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231 } [32m+112ms[0m
2018-11-15T14:24:59.690127365Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.690132015Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231"}] [32m+0ms[0m
2018-11-15T14:24:59.695932644Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312"}]" [33m+6ms[0m
2018-11-15T14:24:59.695958905Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:24:59.695964149Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [32m+6ms[0m
2018-11-15T14:24:59.695969971Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [36m+6ms[0m
2018-11-15T14:24:59.696002104Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
2018-11-15T14:24:59.696009032Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
2018-11-15T14:24:59.696015497Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312 } [32m+6ms[0m
2018-11-15T14:24:59.696042040Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.696077416Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312"}] [32m+0ms[0m
2018-11-15T14:24:59.757253579Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123"}]" [33m+61ms[0m
2018-11-15T14:24:59.757293338Z    [34;1mengine:socket [0mpacket [34m+61ms[0m
2018-11-15T14:24:59.757302050Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [32m+61ms[0m
2018-11-15T14:24:59.757333843Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [36m+61ms[0m
2018-11-15T14:24:59.757346569Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
2018-11-15T14:24:59.757351103Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
2018-11-15T14:24:59.757354923Z    [32;1mserver [0m  ["lineChanged"] { line: 123123123 } [32m+61ms[0m
2018-11-15T14:24:59.757358772Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.757363254Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123"}] [32m+0ms[0m
2018-11-15T14:24:59.892096621Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231"}]" [33m+135ms[0m
2018-11-15T14:24:59.892148909Z    [34;1mengine:socket [0mpacket [34m+135ms[0m
2018-11-15T14:24:59.892154512Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [32m+135ms[0m
2018-11-15T14:24:59.892160024Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [36m+135ms[0m
2018-11-15T14:24:59.892164244Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
2018-11-15T14:24:59.892169772Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
2018-11-15T14:24:59.892175812Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231231 } [32m+135ms[0m
2018-11-15T14:24:59.892179810Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.892184271Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231"}] [32m+0ms[0m
2018-11-15T14:24:59.897079115Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312"}]" [33m+5ms[0m
2018-11-15T14:24:59.897122294Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:24:59.897127775Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [32m+5ms[0m
2018-11-15T14:24:59.897132646Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [36m+5ms[0m
2018-11-15T14:24:59.897136680Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
2018-11-15T14:24:59.897140477Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
2018-11-15T14:24:59.897144171Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312312 } [32m+5ms[0m
2018-11-15T14:24:59.897171136Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.897177166Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312"}] [32m+0ms[0m
2018-11-15T14:24:59.946421041Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+49ms[0m
2018-11-15T14:24:59.946473308Z    [34;1mengine:socket [0mpacket [34m+50ms[0m
2018-11-15T14:24:59.946479607Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+50ms[0m
2018-11-15T14:24:59.946569270Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+50ms[0m
2018-11-15T14:24:59.946587243Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:59.946680932Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:24:59.946788786Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+50ms[0m
2018-11-15T14:24:59.946983491Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.947094962Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:24:59.947340168Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12312312312"}]" [33m+2ms[0m
2018-11-15T14:24:59.947350698Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:24:59.947559002Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12312312312"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312312"}]} [32m+1ms[0m
2018-11-15T14:24:59.947795796Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12312312312"}]} [36m+1ms[0m
2018-11-15T14:24:59.947806315Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12312312312"}] [36m+0ms[0m
2018-11-15T14:24:59.947825364Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12312312312"}] [36m+0ms[0m
2018-11-15T14:24:59.947970861Z    [32;1mserver [0m  ["evaluate"] { code: 12312312312 } [32m+1ms[0m
2018-11-15T14:24:59.948070701Z    [32;1mRepl [0m[bufferWrite(string = "12312312312", bufferInterval = 5, write = true)] [32m+849ms[0m
2018-11-15T14:24:59.948079983Z    [32;1mRepl [0m  this.process.write('12312312312' + '\n') [32m+0ms[0m
2018-11-15T14:24:59.948083589Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:24:59.948317644Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:24:59.948327628Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:24:59.948551579Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:24:59.948560638Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:24:59.948564232Z        return result !== '';
2018-11-15T14:24:59.948567533Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:24:59.948570918Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:24:59.948712626Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:59.948720786Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:59.948724069Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:59.948727309Z          if (condFunc()) {
2018-11-15T14:24:59.948730400Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:59.948734035Z            return resolve(value);
2018-11-15T14:24:59.948737400Z          }
2018-11-15T14:24:59.948740907Z          setTimeout(wait, interval);
2018-11-15T14:24:59.948744144Z        } [32m+0ms[0m
2018-11-15T14:24:59.948891402Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:24:59.949668585Z    [32;1mRepl [0m  [concatResult(data = 12312312312
2018-11-15T14:24:59.949680859Z  => 12312312312
2018-11-15T14:24:59.949684448Z  irb(main):013:0> )] result: "" [32m+1ms[0m
2018-11-15T14:24:59.949876440Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:24:59.949885813Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:24:59.949889214Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:24:59.949892513Z          if (condFunc()) {
2018-11-15T14:24:59.949895672Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:24:59.949899305Z            return resolve(value);
2018-11-15T14:24:59.949902737Z          }
2018-11-15T14:24:59.949905756Z          setTimeout(wait, interval);
2018-11-15T14:24:59.949908971Z        } [32m+0ms[0m
2018-11-15T14:24:59.950041892Z    [32;1mRepl [0m  [isDataReceived()] result: "12312312312
2018-11-15T14:24:59.950054034Z  => 12312312312
2018-11-15T14:24:59.950063752Z  irb(main):013:0> " [32m+0ms[0m
2018-11-15T14:24:59.950153621Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:24:59.950346757Z    [32;1mRepl [0m`let currResult = result` //==> "12312312312
2018-11-15T14:24:59.950356706Z  => 12312312312
2018-11-15T14:24:59.950360066Z  irb(main):013:0> " [32m+1ms[0m
2018-11-15T14:24:59.950546212Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:24:59.955876992Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:24:59.956078476Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:24:59.956258075Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:24:59.956446272Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:24:59.956456784Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:24:59.956460781Z        // @todo: Check if return is necessary here.
2018-11-15T14:24:59.956464192Z        return result += data;
2018-11-15T14:24:59.956473234Z      })] [32m+0ms[0m
2018-11-15T14:24:59.956645753Z    [32;1mRepl [0m  resolve(result = "12312312312
2018-11-15T14:24:59.956662703Z  => 12312312312
2018-11-15T14:24:59.956669342Z  irb(main):013:0> ") [32m+0ms[0m
2018-11-15T14:24:59.956868170Z    [32;1mserver [0m  [emitOutput] output: 12312312312
2018-11-15T14:24:59.956878990Z  => 12312312312
2018-11-15T14:24:59.956882923Z  irb(main):013:0>  [32m+9ms[0m
2018-11-15T14:24:59.957124462Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:24:59.957340946Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}],"nsp":"/"} as 2["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}] [32m+1ms[0m
2018-11-15T14:24:59.957564887Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12312312312\\r\\n=> 12312312312\\r\\nirb(main):013:0> \"}]"] [33m+859ms[0m
2018-11-15T14:24:59.957784203Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}]) [34m+10ms[0m
2018-11-15T14:24:59.957957832Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:24:59.958147097Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12312312312\r\n=> 12312312312\r\nirb(main):013:0> "}]" [33m+10ms[0m
2018-11-15T14:24:59.977950307Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+20ms[0m
2018-11-15T14:24:59.978154599Z    [34;1mengine:socket [0mpacket [34m+20ms[0m
2018-11-15T14:24:59.978370153Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+21ms[0m
2018-11-15T14:24:59.978556875Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+31ms[0m
2018-11-15T14:24:59.978695141Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:59.978851977Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:24:59.978953870Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+22ms[0m
2018-11-15T14:24:59.979105114Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:24:59.979212173Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
2018-11-15T14:25:00.114940302Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+137ms[0m
2018-11-15T14:25:00.115084227Z    [34;1mengine:socket [0mpacket [34m+137ms[0m
2018-11-15T14:25:00.115312624Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+136ms[0m
2018-11-15T14:25:00.115540622Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+137ms[0m
2018-11-15T14:25:00.115667108Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:00.115844725Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:00.115976031Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+137ms[0m
2018-11-15T14:25:00.116170505Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.116427969Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:00.120529612Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
2018-11-15T14:25:00.120720768Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:00.120989734Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
2018-11-15T14:25:00.121235413Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
2018-11-15T14:25:00.121247064Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:25:00.121364805Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:25:00.121537474Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
2018-11-15T14:25:00.121695954Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+165ms[0m
2018-11-15T14:25:00.121815346Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:25:00.122462229Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:00.122618424Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:00.122698314Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:00.122835153Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:00.122843717Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:00.122854098Z        return result !== '';
2018-11-15T14:25:00.122858111Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:00.122965504Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:00.123087792Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:00.123095638Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:00.123116998Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:00.123121259Z          if (condFunc()) {
2018-11-15T14:25:00.123124365Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:00.123127781Z            return resolve(value);
2018-11-15T14:25:00.123135295Z          }
2018-11-15T14:25:00.123138763Z          setTimeout(wait, interval);
2018-11-15T14:25:00.123141990Z        } [32m+0ms[0m
2018-11-15T14:25:00.123226788Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:00.123472757Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:25:00.123482898Z  => 3
2018-11-15T14:25:00.123486464Z  irb(main):014:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:00.124648897Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:00.124666266Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:00.124670012Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:00.124679654Z          if (condFunc()) {
2018-11-15T14:25:00.124690958Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:00.124697217Z            return resolve(value);
2018-11-15T14:25:00.124702142Z          }
2018-11-15T14:25:00.124706871Z          setTimeout(wait, interval);
2018-11-15T14:25:00.124713274Z        } [32m+1ms[0m
2018-11-15T14:25:00.124825164Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:25:00.124836808Z  => 3
2018-11-15T14:25:00.124840479Z  irb(main):014:0> " [32m+0ms[0m
2018-11-15T14:25:00.124943985Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:00.125122588Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:25:00.125133138Z  => 3
2018-11-15T14:25:00.125136455Z  irb(main):014:0> " [32m+0ms[0m
2018-11-15T14:25:00.125284007Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:25:00.130496517Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:00.130642854Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:00.130819907Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:00.130978198Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:00.131001353Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:00.131005973Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:00.131009349Z        return result += data;
2018-11-15T14:25:00.131012623Z      })] [32m+0ms[0m
2018-11-15T14:25:00.131155599Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:25:00.131166596Z  => 3
2018-11-15T14:25:00.131175902Z  irb(main):014:0> ") [32m+1ms[0m
2018-11-15T14:25:00.131294596Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:25:00.131304843Z  => 3
2018-11-15T14:25:00.131308396Z  irb(main):014:0>  [32m+10ms[0m
2018-11-15T14:25:00.131508395Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:25:00.131652985Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}] [32m+0ms[0m
2018-11-15T14:25:00.131807479Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):014:0> \"}]"] [33m+174ms[0m
2018-11-15T14:25:00.131932169Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}]) [34m+11ms[0m
2018-11-15T14:25:00.132098426Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:00.132229847Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):014:0> "}]" [33m+12ms[0m
2018-11-15T14:25:00.142978797Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+10ms[0m
2018-11-15T14:25:00.143158613Z    [34;1mengine:socket [0mpacket [34m+11ms[0m
2018-11-15T14:25:00.143427332Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+12ms[0m
2018-11-15T14:25:00.143647493Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+22ms[0m
2018-11-15T14:25:00.143784343Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:00.143961290Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:00.144183393Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+12ms[0m
2018-11-15T14:25:00.144415619Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.144599224Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:00.148526560Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:25:00.148542634Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:00.148758866Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
2018-11-15T14:25:00.148985791Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
2018-11-15T14:25:00.149165630Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:00.149302335Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
2018-11-15T14:25:00.149434782Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:25:00.149674012Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.149851995Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:00.223598817Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+75ms[0m
2018-11-15T14:25:00.223626416Z    [34;1mengine:socket [0mpacket [34m+75ms[0m
2018-11-15T14:25:00.223867610Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+74ms[0m
2018-11-15T14:25:00.224188440Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+74ms[0m
2018-11-15T14:25:00.224204546Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:00.224209870Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+1ms[0m
2018-11-15T14:25:00.224423038Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+75ms[0m
2018-11-15T14:25:00.224630006Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.224768025Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:00.252469662Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+29ms[0m
2018-11-15T14:25:00.252627005Z    [34;1mengine:socket [0mpacket [34m+29ms[0m
2018-11-15T14:25:00.252836406Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
2018-11-15T14:25:00.253049017Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+28ms[0m
2018-11-15T14:25:00.253174370Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:00.253321455Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:00.253516449Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+29ms[0m
2018-11-15T14:25:00.253698279Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.253825478Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:00.265009076Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+12ms[0m
2018-11-15T14:25:00.265170768Z    [34;1mengine:socket [0mpacket [34m+12ms[0m
2018-11-15T14:25:00.265397494Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+12ms[0m
2018-11-15T14:25:00.265613091Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+12ms[0m
2018-11-15T14:25:00.265761325Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:00.265916016Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:00.266068831Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+12ms[0m
2018-11-15T14:25:00.266199267Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+135ms[0m
2018-11-15T14:25:00.266358769Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:25:00.266953687Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:00.267123559Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:00.267236879Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:25:00.267406132Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:00.267415398Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:00.267431035Z        return result !== '';
2018-11-15T14:25:00.267434761Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:00.267562281Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:00.267684651Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:00.267693341Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:00.267696790Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:00.267700089Z          if (condFunc()) {
2018-11-15T14:25:00.267703271Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:00.267706880Z            return resolve(value);
2018-11-15T14:25:00.267710183Z          }
2018-11-15T14:25:00.267713209Z          setTimeout(wait, interval);
2018-11-15T14:25:00.267716349Z        } [32m+0ms[0m
2018-11-15T14:25:00.267856754Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:00.268085958Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:25:00.268095708Z  => 123
2018-11-15T14:25:00.268099012Z  irb(main):015:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:00.269395276Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:00.269407213Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:00.269410921Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:00.269420241Z          if (condFunc()) {
2018-11-15T14:25:00.269446273Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:00.269450179Z            return resolve(value);
2018-11-15T14:25:00.269453509Z          }
2018-11-15T14:25:00.269456619Z          setTimeout(wait, interval);
2018-11-15T14:25:00.269459949Z        } [32m+2ms[0m
2018-11-15T14:25:00.269575820Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:25:00.269588498Z  => 123
2018-11-15T14:25:00.269592651Z  irb(main):015:0> " [32m+0ms[0m
2018-11-15T14:25:00.269682504Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:00.269899181Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:25:00.269911254Z  => 123
2018-11-15T14:25:00.269914639Z  irb(main):015:0> " [32m+0ms[0m
2018-11-15T14:25:00.270026736Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:00.275296518Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:00.275427109Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:00.275606602Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:00.275762554Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:00.275771452Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:00.275775119Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:00.275778440Z        return result += data;
2018-11-15T14:25:00.275781849Z      })] [32m+0ms[0m
2018-11-15T14:25:00.275921028Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:25:00.275939188Z  => 123
2018-11-15T14:25:00.275943866Z  irb(main):015:0> ") [32m+0ms[0m
2018-11-15T14:25:00.276053019Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:25:00.276062158Z  => 123
2018-11-15T14:25:00.276065576Z  irb(main):015:0>  [32m+10ms[0m
2018-11-15T14:25:00.276241205Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:25:00.276489389Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}] [32m+0ms[0m
2018-11-15T14:25:00.276624840Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):015:0> \"}]"] [33m+145ms[0m
2018-11-15T14:25:00.276801683Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}]) [34m+12ms[0m
2018-11-15T14:25:00.276931907Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:00.277104242Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):015:0> "}]" [33m+12ms[0m
2018-11-15T14:25:00.389620698Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+113ms[0m
2018-11-15T14:25:00.389847468Z    [34;1mengine:socket [0mpacket [34m+113ms[0m
2018-11-15T14:25:00.390141999Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+113ms[0m
2018-11-15T14:25:00.390277502Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+125ms[0m
2018-11-15T14:25:00.390449543Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:00.390608137Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:00.390729994Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+115ms[0m
2018-11-15T14:25:00.390936836Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.391112780Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:00.395832293Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:25:00.395978799Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:00.396226378Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
2018-11-15T14:25:00.396432621Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
2018-11-15T14:25:00.396598584Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:00.396745511Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:00.396915071Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:25:00.397088067Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:00.397243290Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
2018-11-15T14:25:00.415810812Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+20ms[0m
2018-11-15T14:25:00.415838163Z    [34;1mengine:socket [0mpacket [34m+20ms[0m
2018-11-15T14:25:00.416039351Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+18ms[0m
2018-11-15T14:25:00.416199680Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+20ms[0m
2018-11-15T14:25:00.416763935Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:00.416860225Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:00.416961105Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+20ms[0m
2018-11-15T14:25:00.417128983Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:25:00.417291153Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:00.551047051Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+135ms[0m
2018-11-15T14:25:00.551098690Z    [34;1mengine:socket [0mpacket [34m+135ms[0m
2018-11-15T14:25:00.551189557Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+134ms[0m
2018-11-15T14:25:00.551395081Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+135ms[0m
2018-11-15T14:25:00.551405082Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:25:00.551485634Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:25:00.551635457Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+135ms[0m
2018-11-15T14:25:00.551724587Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:00.551866543Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
2018-11-15T14:25:00.576427932Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+26ms[0m
2018-11-15T14:25:00.576478709Z    [34;1mengine:socket [0mpacket [34m+26ms[0m
2018-11-15T14:25:00.576628976Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+25ms[0m
2018-11-15T14:25:00.576803959Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+25ms[0m
2018-11-15T14:25:00.576949707Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:25:00.577055192Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:25:00.577163634Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+25ms[0m
2018-11-15T14:25:00.577297935Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.577415175Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:25:00.645902209Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+69ms[0m
2018-11-15T14:25:00.645962069Z    [34;1mengine:socket [0mpacket [34m+69ms[0m
2018-11-15T14:25:00.646147710Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+68ms[0m
2018-11-15T14:25:00.646170783Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+69ms[0m
2018-11-15T14:25:00.646308283Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
2018-11-15T14:25:00.646440550Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:25:00.646570557Z    [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+70ms[0m
2018-11-15T14:25:00.646809957Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.646820036Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
2018-11-15T14:25:00.766071672Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231"}]" [33m+120ms[0m
2018-11-15T14:25:00.766099861Z    [34;1mengine:socket [0mpacket [34m+120ms[0m
2018-11-15T14:25:00.766258339Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [32m+120ms[0m
2018-11-15T14:25:00.766330266Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231"}]} [36m+120ms[0m
2018-11-15T14:25:00.766434197Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
2018-11-15T14:25:00.766442691Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231"}] [36m+0ms[0m
2018-11-15T14:25:00.766446787Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231 } [32m+120ms[0m
2018-11-15T14:25:00.766543680Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:00.766551890Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231"}] [32m+0ms[0m
2018-11-15T14:25:00.772764400Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312"}]" [33m+7ms[0m
2018-11-15T14:25:00.772787352Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:00.772945924Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [32m+6ms[0m
2018-11-15T14:25:00.773149752Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312"}]} [36m+6ms[0m
2018-11-15T14:25:00.773158990Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
2018-11-15T14:25:00.773163150Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312"}] [36m+0ms[0m
2018-11-15T14:25:00.773166726Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312 } [32m+7ms[0m
2018-11-15T14:25:00.773366046Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.773375627Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312"}] [32m+0ms[0m
2018-11-15T14:25:00.867973006Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123"}]" [33m+95ms[0m
2018-11-15T14:25:00.868010644Z    [34;1mengine:socket [0mpacket [34m+95ms[0m
2018-11-15T14:25:00.868035808Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [32m+94ms[0m
2018-11-15T14:25:00.868147401Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123"}]} [36m+95ms[0m
2018-11-15T14:25:00.868158414Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
2018-11-15T14:25:00.868162841Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123"}] [36m+0ms[0m
2018-11-15T14:25:00.868166728Z    [32;1mserver [0m  ["lineChanged"] { line: 123123123 } [32m+94ms[0m
2018-11-15T14:25:00.868185928Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:00.868190438Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123"}] [32m+1ms[0m
2018-11-15T14:25:00.972300959Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231"}]" [33m+104ms[0m
2018-11-15T14:25:00.972354482Z    [34;1mengine:socket [0mpacket [34m+105ms[0m
2018-11-15T14:25:00.972496965Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [32m+104ms[0m
2018-11-15T14:25:00.972519480Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231"}]} [36m+105ms[0m
2018-11-15T14:25:00.972540590Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
2018-11-15T14:25:00.972544968Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231"}] [36m+0ms[0m
2018-11-15T14:25:00.972548626Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231231 } [32m+105ms[0m
2018-11-15T14:25:00.972552179Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:00.972570566Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231"}] [32m+0ms[0m
2018-11-15T14:25:00.977862490Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312"}]" [33m+6ms[0m
2018-11-15T14:25:00.977884417Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:00.978066982Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [32m+5ms[0m
2018-11-15T14:25:00.978084677Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312"}]} [36m+5ms[0m
2018-11-15T14:25:00.978089023Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
2018-11-15T14:25:00.978092873Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312"}] [36m+0ms[0m
2018-11-15T14:25:00.978096600Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312312 } [32m+5ms[0m
2018-11-15T14:25:00.978179632Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:00.978188022Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312"}] [32m+0ms[0m
2018-11-15T14:25:01.061645397Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123123"}]" [33m+84ms[0m
2018-11-15T14:25:01.061684074Z    [34;1mengine:socket [0mpacket [34m+84ms[0m
2018-11-15T14:25:01.061691724Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123"}]} [32m+83ms[0m
2018-11-15T14:25:01.061699261Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123"}]} [36m+84ms[0m
2018-11-15T14:25:01.061705844Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123123"}] [36m+0ms[0m
2018-11-15T14:25:01.061750971Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123123"}] [36m+0ms[0m
2018-11-15T14:25:01.061758368Z    [32;1mserver [0m  ["lineChanged"] { line: 123123123123 } [32m+84ms[0m
2018-11-15T14:25:01.061960312Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:01.061973493Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123123"}] [32m+0ms[0m
2018-11-15T14:25:01.147351872Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231231"}]" [33m+85ms[0m
2018-11-15T14:25:01.147404054Z    [34;1mengine:socket [0mpacket [34m+86ms[0m
2018-11-15T14:25:01.147416870Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231"}]} [32m+86ms[0m
2018-11-15T14:25:01.147503049Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231"}]} [36m+86ms[0m
2018-11-15T14:25:01.147512008Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231231"}] [36m+0ms[0m
2018-11-15T14:25:01.147546591Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231231"}] [36m+0ms[0m
2018-11-15T14:25:01.147550824Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231231231 } [32m+86ms[0m
2018-11-15T14:25:01.147554612Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231231"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:01.147559012Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231231"}] [32m+0ms[0m
2018-11-15T14:25:01.161739152Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312312"}]" [33m+15ms[0m
2018-11-15T14:25:01.161795746Z    [34;1mengine:socket [0mpacket [34m+14ms[0m
2018-11-15T14:25:01.161803755Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312"}]} [32m+14ms[0m
2018-11-15T14:25:01.161810266Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312"}]} [36m+14ms[0m
2018-11-15T14:25:01.161816085Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312312"}] [36m+0ms[0m
2018-11-15T14:25:01.161821771Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312312"}] [36m+0ms[0m
2018-11-15T14:25:01.163801379Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312312312 } [32m+14ms[0m
2018-11-15T14:25:01.163896618Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:01.163907276Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312312"}] [32m+0ms[0m
2018-11-15T14:25:01.223358905Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123123123"}]" [33m+61ms[0m
2018-11-15T14:25:01.223419952Z    [34;1mengine:socket [0mpacket [34m+62ms[0m
2018-11-15T14:25:01.223492654Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123"}]} [32m+62ms[0m
2018-11-15T14:25:01.223688583Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123"}]} [36m+62ms[0m
2018-11-15T14:25:01.223704551Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123123123"}] [36m+0ms[0m
2018-11-15T14:25:01.223711388Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123123123"}] [36m+0ms[0m
2018-11-15T14:25:01.223718783Z    [32;1mserver [0m  ["lineChanged"] { line: 123123123123123 } [32m+62ms[0m
2018-11-15T14:25:01.223750743Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:01.223760364Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123123123"}] [32m+0ms[0m
2018-11-15T14:25:01.326085196Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231231231231231"}]" [33m+103ms[0m
2018-11-15T14:25:01.326127788Z    [34;1mengine:socket [0mpacket [34m+102ms[0m
2018-11-15T14:25:01.326133540Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231231231231231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231231"}]} [32m+102ms[0m
2018-11-15T14:25:01.326279676Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231231231231231"}]} [36m+102ms[0m
2018-11-15T14:25:01.326290123Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231231231231231"}] [36m+1ms[0m
2018-11-15T14:25:01.326294830Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231231231231231"}] [36m+0ms[0m
2018-11-15T14:25:01.326300479Z    [32;1mserver [0m  ["lineChanged"] { line: 1231231231231231 } [32m+103ms[0m
2018-11-15T14:25:01.326324815Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231231231231231"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:01.326493536Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231231231231231"}],"nsp":"/"} as 2["syncLine",{"line":"1231231231231231"}] [32m+0ms[0m
2018-11-15T14:25:01.331430492Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312312312312312"}]" [33m+5ms[0m
2018-11-15T14:25:01.331487211Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:01.331495540Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312312312312312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312312"}]} [32m+5ms[0m
2018-11-15T14:25:01.331503508Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312312312312312"}]} [36m+5ms[0m
2018-11-15T14:25:01.331509571Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312312312312312"}] [36m+0ms[0m
2018-11-15T14:25:01.331522150Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312312312312312"}] [36m+0ms[0m
2018-11-15T14:25:01.331526768Z    [32;1mserver [0m  ["lineChanged"] { line: 12312312312312312 } [32m+5ms[0m
2018-11-15T14:25:01.331553017Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312312312312312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:01.331561036Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312312312312312"}],"nsp":"/"} as 2["syncLine",{"line":"12312312312312312"}] [32m+0ms[0m
2018-11-15T14:25:01.383224439Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123123123123123"}]" [33m+52ms[0m
2018-11-15T14:25:01.383273625Z    [34;1mengine:socket [0mpacket [34m+52ms[0m
2018-11-15T14:25:01.383278970Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123123123123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123123"}]} [32m+51ms[0m
2018-11-15T14:25:01.383284364Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123123123123123"}]} [36m+51ms[0m
2018-11-15T14:25:01.383288648Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123123123123123"}] [36m+0ms[0m
2018-11-15T14:25:01.383292574Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123123123123123"}] [36m+0ms[0m
2018-11-15T14:25:01.383297637Z    [32;1mserver [0m  ["lineChanged"] { line: 123123123123123123 } [32m+51ms[0m
2018-11-15T14:25:01.383303424Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123123123123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:01.383346572Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123123123123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123123123123123"}] [32m+1ms[0m
2018-11-15T14:25:02.032314059Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+649ms[0m
2018-11-15T14:25:02.032473936Z    [34;1mengine:socket [0mpacket [34m+650ms[0m
2018-11-15T14:25:02.032576266Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+649ms[0m
2018-11-15T14:25:02.032585515Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+650ms[0m
2018-11-15T14:25:02.032592064Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:02.032597706Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:02.032604746Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+650ms[0m
2018-11-15T14:25:02.032693364Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:02.032702186Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:02.038484112Z    [33;1mengine:ws [0mreceived "42["initRepl",{"language":"shell"}]" [33m+7ms[0m
2018-11-15T14:25:02.038608879Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:02.038653310Z    [32;1msocket.io-parser [0mdecoded 2["initRepl",{"language":"shell"}] as {"type":2,"nsp":"/","data":["initRepl",{"language":"shell"}]} [32m+6ms[0m
2018-11-15T14:25:02.038730956Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["initRepl",{"language":"shell"}]} [36m+6ms[0m
2018-11-15T14:25:02.038798990Z    [36;1msocket.io:socket [0memitting event ["initRepl",{"language":"shell"}] [36m+0ms[0m
2018-11-15T14:25:02.038806589Z    [36;1msocket.io:socket [0mdispatching an event ["initRepl",{"language":"shell"}] [36m+0ms[0m
2018-11-15T14:25:02.039057358Z    [32;1mserver [0m  ["initRepl"] { language: shell } [32m+6ms[0m
2018-11-15T14:25:02.039099603Z    [32;1mserver [0m  [initRepl] lang: shell, welcome_msg:  [32m+0ms[0m
2018-11-15T14:25:02.040356592Z    [32;1mRepl [0m[kill()] this.process: UnixTerminal { _internalee: EventEmitter { _events: [Object: null prototype] {}, _eventsCount: [33m0[39m, _maxListeners: [90mundefined[39m }, _socket: PipeSocket { connecting: [33mfalse[39m, _hadError: [33mfalse[39m, _handle: Pipe { onread: [36m[Function: onStreamRead][39m, reading: [33mtrue[39m, [[32mSymbol(owner)[39m]: [36m[Circular][39m }, _parent: [1mnull[22m, _host: [1mnull[22m, _readableState: ReadableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m }, length: [33m0[39m, pipes: [1mnull[22m, pipesCount: [33m0[39m, flowing: [33mtrue[39m, ended: [33mfalse[39m, endEmitted: [33mfalse[39m, reading: [33mtrue[39m, sync: [33mfalse[39m, needReadable: [33mtrue[39m, emittedReadable: [33mfalse[39m, readableListening: [33mfalse[39m, resumeScheduled: [33mfalse[39m, emitClose: [33mfalse[39m, destroyed: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, awaitDrain: [33m0[39m, readingMore: [33mfalse[39m, decoder: StringDecoder { encoding: [32m'utf8'[39m, [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> }, encoding: [32m'utf8'[39m }, readable: [33mfalse[39m, _events: [Object: null prototype] { end: [36m[Function: onReadableStreamEnd][39m, error: [36m[Function][39m, close: [36m[Function][39m }, _eventsCount: [33m3[39m, _maxListeners: [90mundefined[39m, _writableState: WritableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, finalCalled: [33mfalse[39m, needDrain: [33mfalse[39m, ending: [33mfalse[39m, ended: [33mfalse[39m, finished: [33mfalse[39m, destroyed: [33mfalse[39m, decodeStrings: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, length: [33m0[39m, writing: [33mfalse[39m, corked: [33m0[39m, sync: [33mfalse[39m, bufferProcessing: [33mfalse[39m, onwrite: [36m[Function: bound onwrite][39m, writecb: [1mnull[22m, writelen: [33m0[39m, bufferedRequest: [1mnull[22m, lastBufferedRequest: [1mnull[22m, pendingcb: [33m0[39m, prefinished: [33mfalse[39m, errorEmitted: [33mfalse[39m, emitClose: [33mfalse[39m, bufferedRequestCount: [33m0[39m, corkedRequestsFree: { next: [1mnull[22m, entry: [1mnull[22m, finish: [36m[Function: bound onCorkedFinish][39m } }, writable: [33mfalse[39m, allowHalfOpen: [33mfalse[39m, _sockname: [1mnull[22m, _pendingData: [1mnull[22m, _pendingEncoding: [32m''[39m, server: [1mnull[22m, _server: [1mnull[22m, [[32mSymbol(asyncId)[39m]: [33m6614[39m, [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m, [[32mSymbol(timeout)[39m]: [1mnull[22m, [[32mSymbol(kBytesRead)[39m]: [33m0[39m, [[32mSymbol(kBytesWritten)[39m]: [33m0[39m }, _pid: [33m31[39m, _fd: [33m22[39m, _pty: [32m'/dev/pts/1'[39m, _file: [32m'irb'[39m, _name: [32m'xterm'[39m, _readable: [33mtrue[39m, _writable: [33mtrue[39m } [32m+2s[0m
2018-11-15T14:25:02.042239307Z    [32;1mRepl [0mRepl process killed. [32m+3ms[0m
2018-11-15T14:25:02.042321141Z    [32;1mRepl [0m[Repl.init(language = "shell")] [32m+0ms[0m
2018-11-15T14:25:02.058579656Z    [32;1mRepl [0m  INITIALIZED command: bash [32m+9ms[0m
2018-11-15T14:25:02.058618277Z    [32;1mRepl [0m  this.process: UnixTerminal {
2018-11-15T14:25:02.058664868Z    [32;1mRepl [0m  _internalee:
2018-11-15T14:25:02.058672336Z    [32;1mRepl [0m   EventEmitter {
2018-11-15T14:25:02.058677562Z    [32;1mRepl [0m     _events: [Object: null prototype] {},
2018-11-15T14:25:02.058682776Z    [32;1mRepl [0m     _eventsCount: [33m0[39m,
2018-11-15T14:25:02.058688616Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
2018-11-15T14:25:02.058694150Z    [32;1mRepl [0m  _socket:
2018-11-15T14:25:02.058699270Z    [32;1mRepl [0m   PipeSocket {
2018-11-15T14:25:02.058704310Z    [32;1mRepl [0m     connecting: [33mfalse[39m,
2018-11-15T14:25:02.058709562Z    [32;1mRepl [0m     _hadError: [33mfalse[39m,
2018-11-15T14:25:02.058715048Z    [32;1mRepl [0m     _handle:
2018-11-15T14:25:02.058737028Z    [32;1mRepl [0m      Pipe {
2018-11-15T14:25:02.058743371Z    [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
2018-11-15T14:25:02.058748883Z    [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
2018-11-15T14:25:02.058754606Z    [32;1mRepl [0m     _parent: [1mnull[22m,
2018-11-15T14:25:02.058759851Z    [32;1mRepl [0m     _host: [1mnull[22m,
2018-11-15T14:25:02.058765228Z    [32;1mRepl [0m     _readableState:
2018-11-15T14:25:02.058770272Z    [32;1mRepl [0m      ReadableState {
2018-11-15T14:25:02.058775561Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:25:02.058780891Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:25:02.058786441Z    [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
2018-11-15T14:25:02.058792310Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:25:02.058797649Z    [32;1mRepl [0m        pipes: [1mnull[22m,
2018-11-15T14:25:02.058818920Z    [32;1mRepl [0m        pipesCount: [33m0[39m,
2018-11-15T14:25:02.058825489Z    [32;1mRepl [0m        flowing: [1mnull[22m,
2018-11-15T14:25:02.058830811Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:25:02.058836230Z    [32;1mRepl [0m        endEmitted: [33mfalse[39m,
2018-11-15T14:25:02.058841697Z    [32;1mRepl [0m        reading: [33mfalse[39m,
2018-11-15T14:25:02.058847196Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:25:02.058852569Z    [32;1mRepl [0m        needReadable: [33mfalse[39m,
2018-11-15T14:25:02.058864007Z    [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
2018-11-15T14:25:02.058869499Z    [32;1mRepl [0m        readableListening: [33mfalse[39m,
2018-11-15T14:25:02.058874619Z    [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
2018-11-15T14:25:02.058879977Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:25:02.058900710Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:25:02.058906297Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:25:02.058911118Z    [32;1mRepl [0m        awaitDrain: [33m0[39m,
2018-11-15T14:25:02.058916803Z    [32;1mRepl [0m        readingMore: [33mfalse[39m,
2018-11-15T14:25:02.058921553Z    [32;1mRepl [0m        decoder:
2018-11-15T14:25:02.058926565Z    [32;1mRepl [0m         StringDecoder {
2018-11-15T14:25:02.058931509Z    [32;1mRepl [0m           encoding: [32m'utf8'[39m,
2018-11-15T14:25:02.058936595Z    [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
2018-11-15T14:25:02.058942598Z    [32;1mRepl [0m        encoding: [32m'utf8'[39m },
2018-11-15T14:25:02.058947989Z    [32;1mRepl [0m     readable: [33mfalse[39m,
2018-11-15T14:25:02.058953211Z    [32;1mRepl [0m     _events:
2018-11-15T14:25:02.058958210Z    [32;1mRepl [0m      [Object: null prototype] {
2018-11-15T14:25:02.058963439Z    [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
2018-11-15T14:25:02.058987395Z    [32;1mRepl [0m        error: [36m[Function][39m,
2018-11-15T14:25:02.058993231Z    [32;1mRepl [0m        close: [36m[Function][39m },
2018-11-15T14:25:02.058998642Z    [32;1mRepl [0m     _eventsCount: [33m3[39m,
2018-11-15T14:25:02.059004170Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
2018-11-15T14:25:02.059009522Z    [32;1mRepl [0m     _writableState:
2018-11-15T14:25:02.059014682Z    [32;1mRepl [0m      WritableState {
2018-11-15T14:25:02.059019806Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:25:02.059025277Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:25:02.059030632Z    [32;1mRepl [0m        finalCalled: [33mfalse[39m,
2018-11-15T14:25:02.059035637Z    [32;1mRepl [0m        needDrain: [33mfalse[39m,
2018-11-15T14:25:02.059041035Z    [32;1mRepl [0m        ending: [33mfalse[39m,
2018-11-15T14:25:02.059068910Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:25:02.059075809Z    [32;1mRepl [0m        finished: [33mfalse[39m,
2018-11-15T14:25:02.059081082Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:25:02.059086491Z    [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
2018-11-15T14:25:02.059091819Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:25:02.059097070Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:25:02.059102790Z    [32;1mRepl [0m        writing: [33mfalse[39m,
2018-11-15T14:25:02.059107987Z    [32;1mRepl [0m        corked: [33m0[39m,
2018-11-15T14:25:02.059113434Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:25:02.059118954Z    [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
2018-11-15T14:25:02.059124589Z    [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
2018-11-15T14:25:02.059146113Z    [32;1mRepl [0m        writecb: [1mnull[22m,
2018-11-15T14:25:02.059153605Z    [32;1mRepl [0m        writelen: [33m0[39m,
2018-11-15T14:25:02.059158922Z    [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
2018-11-15T14:25:02.059164309Z    [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
2018-11-15T14:25:02.059169836Z    [32;1mRepl [0m        pendingcb: [33m0[39m,
2018-11-15T14:25:02.059175965Z    [32;1mRepl [0m        prefinished: [33mfalse[39m,
2018-11-15T14:25:02.059181362Z    [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
2018-11-15T14:25:02.059186844Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:25:02.059192149Z    [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
2018-11-15T14:25:02.059197706Z    [32;1mRepl [0m        corkedRequestsFree:
2018-11-15T14:25:02.059202816Z    [32;1mRepl [0m         { next: [1mnull[22m,
2018-11-15T14:25:02.059208087Z    [32;1mRepl [0m           entry: [1mnull[22m,
2018-11-15T14:25:02.059230253Z    [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
2018-11-15T14:25:02.059237693Z    [32;1mRepl [0m     writable: [33mfalse[39m,
2018-11-15T14:25:02.059243204Z    [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
2018-11-15T14:25:02.059248871Z    [32;1mRepl [0m     _sockname: [1mnull[22m,
2018-11-15T14:25:02.059254056Z    [32;1mRepl [0m     _pendingData: [1mnull[22m,
2018-11-15T14:25:02.059265651Z    [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
2018-11-15T14:25:02.059271321Z    [32;1mRepl [0m     server: [1mnull[22m,
2018-11-15T14:25:02.059276951Z    [32;1mRepl [0m     _server: [1mnull[22m,
2018-11-15T14:25:02.059282193Z    [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m8816[39m,
2018-11-15T14:25:02.059287757Z    [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
2018-11-15T14:25:02.059293559Z    [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
2018-11-15T14:25:02.059318296Z    [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
2018-11-15T14:25:02.059324159Z    [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
2018-11-15T14:25:02.059329775Z    [32;1mRepl [0m  _pid: [33m34[39m,
2018-11-15T14:25:02.059335345Z    [32;1mRepl [0m  _fd: [33m21[39m,
2018-11-15T14:25:02.059340867Z    [32;1mRepl [0m  _pty: [32m'/dev/pts/2'[39m,
2018-11-15T14:25:02.059346198Z    [32;1mRepl [0m  _file: [32m'bash'[39m,
2018-11-15T14:25:02.059351694Z    [32;1mRepl [0m  _name: [32m'xterm'[39m,
2018-11-15T14:25:02.059357158Z    [32;1mRepl [0m  _readable: [33mtrue[39m,
2018-11-15T14:25:02.059362795Z    [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "shell" [32m+0ms[0m
2018-11-15T14:25:02.059368850Z    [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+1ms[0m
2018-11-15T14:25:02.059374475Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
2018-11-15T14:25:02.059396403Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:02.059403476Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:02.059409436Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:02.059415035Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:02.059420290Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:02.059426630Z        return result !== '';
2018-11-15T14:25:02.059431694Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:02.059437010Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:02.059442644Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:02.059447956Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:02.059459153Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:02.059537784Z          if (condFunc()) {
2018-11-15T14:25:02.059543437Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:02.059569154Z            return resolve(value);
2018-11-15T14:25:02.059574413Z          }
2018-11-15T14:25:02.059579413Z          setTimeout(wait, interval);
2018-11-15T14:25:02.059584386Z        } [32m+0ms[0m
2018-11-15T14:25:02.059589608Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:02.059594984Z    [32;1mRepl [0m  [concatResult(data = bash-4.4# )] result: "" [32m+2ms[0m
2018-11-15T14:25:02.059607731Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:02.059614128Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:02.059619234Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:02.059624481Z          if (condFunc()) {
2018-11-15T14:25:02.059661483Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:02.059668883Z            return resolve(value);
2018-11-15T14:25:02.059673989Z          }
2018-11-15T14:25:02.059678803Z          setTimeout(wait, interval);
2018-11-15T14:25:02.059683832Z        } [32m+0ms[0m
2018-11-15T14:25:02.059688963Z    [32;1mRepl [0m  [isDataReceived()] result: "bash-4.4# " [32m+0ms[0m
2018-11-15T14:25:02.059694834Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:02.059701049Z    [32;1mRepl [0m`let currResult = result` //==> "bash-4.4# " [32m+0ms[0m
2018-11-15T14:25:02.059706917Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:02.062358306Z    [32;1mRepl [0m  [setInterval()] [32m+7ms[0m
2018-11-15T14:25:02.062443173Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:02.062451492Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:02.062457292Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:02.062507668Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:02.062514534Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:02.062519777Z        return result += data;
2018-11-15T14:25:02.062524894Z      })] [32m+0ms[0m
2018-11-15T14:25:02.062546484Z    [32;1mRepl [0m  resolve(result = "bash-4.4# ") [32m+0ms[0m
2018-11-15T14:25:02.062552596Z    [32;1mserver [0m    data: "bash-4.4# " [32m+23ms[0m
2018-11-15T14:25:02.062558380Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"shell","data":"bash-4.4# "}],"nsp":"/"} [32m+23ms[0m
2018-11-15T14:25:02.062583820Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"shell","data":"bash-4.4# "}],"nsp":"/"} as 2["langChange",{"language":"shell","data":"bash-4.4# "}] [32m+0ms[0m
2018-11-15T14:25:02.062592716Z    [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"shell\",\"data\":\"bash-4.4# \"}]"] [33m+2s[0m
2018-11-15T14:25:02.062599957Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"shell","data":"bash-4.4# "}]) [34m+23ms[0m
2018-11-15T14:25:02.062606478Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:02.062612068Z    [33;1mengine:ws [0mwriting "42["langChange",{"language":"shell","data":"bash-4.4# "}]" [33m+23ms[0m
2018-11-15T14:25:02.455799106Z    [31;1mexpress:router [0mdispatching GET / [31m+8s[0m
2018-11-15T14:25:02.455826508Z    [31;1mexpress:router [0mquery  : / [31m+1ms[0m
2018-11-15T14:25:02.455830775Z    [31;1mexpress:router [0mexpressInit  : / [31m+0ms[0m
2018-11-15T14:25:02.455834525Z    [31;1mexpress:router [0mtextParser  : / [31m+0ms[0m
2018-11-15T14:25:02.455838024Z    [32;1mbody-parser:text [0mskip empty body [32m+8s[0m
2018-11-15T14:25:02.455841489Z    [31;1mexpress:router [0mserveStatic  : / [31m+0ms[0m
2018-11-15T14:25:02.455845017Z    [36;1msend [0mstat "/app/public/index.html" [36m+8s[0m
2018-11-15T14:25:02.455848559Z    [36;1msend [0mpipe "/app/public/index.html" [36m+0ms[0m
2018-11-15T14:25:02.455851981Z    [36;1msend [0maccept ranges [36m+0ms[0m
2018-11-15T14:25:02.455855266Z    [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
2018-11-15T14:25:02.455858598Z    [36;1msend [0mmodified Thu, 15 Nov 2018 07:15:53 GMT [36m+0ms[0m
2018-11-15T14:25:02.455861935Z    [36;1msend [0metag W/"28c-1671639e828" [36m+0ms[0m
2018-11-15T14:25:02.455865255Z    [36;1msend [0mcontent-type text/html [36m+0ms[0m
2018-11-15T14:25:02.492204578Z    [33;1msocket.io:client [0mclient close with reason transport close [33m+430ms[0m
2018-11-15T14:25:02.492331340Z    [36;1msocket.io:socket [0mclosing socket - reason transport close [36m+454ms[0m
2018-11-15T14:25:02.492340477Z    [32;1mserver [0m  ["disconnect"] [32m+431ms[0m
2018-11-15T14:25:02.492457025Z    [32;1mserver [0m    [io of / .clients] error: null, clients:  [32m+0ms[0m
2018-11-15T14:25:02.493112434Z    [32;1mRepl [0m[kill()] this.process: UnixTerminal { _internalee: EventEmitter { _events: [Object: null prototype] {}, _eventsCount: [33m0[39m, _maxListeners: [90mundefined[39m }, _socket: PipeSocket { connecting: [33mfalse[39m, _hadError: [33mfalse[39m, _handle: Pipe { onread: [36m[Function: onStreamRead][39m, reading: [33mtrue[39m, [[32mSymbol(owner)[39m]: [36m[Circular][39m }, _parent: [1mnull[22m, _host: [1mnull[22m, _readableState: ReadableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m }, length: [33m0[39m, pipes: [1mnull[22m, pipesCount: [33m0[39m, flowing: [33mtrue[39m, ended: [33mfalse[39m, endEmitted: [33mfalse[39m, reading: [33mtrue[39m, sync: [33mfalse[39m, needReadable: [33mtrue[39m, emittedReadable: [33mfalse[39m, readableListening: [33mfalse[39m, resumeScheduled: [33mfalse[39m, emitClose: [33mfalse[39m, destroyed: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, awaitDrain: [33m0[39m, readingMore: [33mfalse[39m, decoder: StringDecoder { encoding: [32m'utf8'[39m, [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> }, encoding: [32m'utf8'[39m }, readable: [33mfalse[39m, _events: [Object: null prototype] { end: [36m[Function: onReadableStreamEnd][39m, error: [36m[Function][39m, close: [36m[Function][39m }, _eventsCount: [33m3[39m, _maxListeners: [90mundefined[39m, _writableState: WritableState { objectMode: [33mfalse[39m, highWaterMark: [33m16384[39m, finalCalled: [33mfalse[39m, needDrain: [33mfalse[39m, ending: [33mfalse[39m, ended: [33mfalse[39m, finished: [33mfalse[39m, destroyed: [33mfalse[39m, decodeStrings: [33mfalse[39m, defaultEncoding: [32m'utf8'[39m, length: [33m0[39m, writing: [33mfalse[39m, corked: [33m0[39m, sync: [33mtrue[39m, bufferProcessing: [33mfalse[39m, onwrite: [36m[Function: bound onwrite][39m, writecb: [1mnull[22m, writelen: [33m0[39m, bufferedRequest: [1mnull[22m, lastBufferedRequest: [1mnull[22m, pendingcb: [33m0[39m, prefinished: [33mfalse[39m, errorEmitted: [33mfalse[39m, emitClose: [33mfalse[39m, bufferedRequestCount: [33m0[39m, corkedRequestsFree: { next: [1mnull[22m, entry: [1mnull[22m, finish: [36m[Function: bound onCorkedFinish][39m } }, writable: [33mfalse[39m, allowHalfOpen: [33mfalse[39m, _sockname: [1mnull[22m, _pendingData: [1mnull[22m, _pendingEncoding: [32m''[39m, server: [1mnull[22m, _server: [1mnull[22m, [[32mSymbol(asyncId)[39m]: [33m8816[39m, [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m, [[32mSymbol(timeout)[39m]: [1mnull[22m, [[32mSymbol(kBytesRead)[39m]: [33m0[39m, [[32mSymbol(kBytesWritten)[39m]: [33m0[39m }, _pid: [33m34[39m, _fd: [33m21[39m, _pty: [32m'/dev/pts/2'[39m, _file: [32m'bash'[39m, _name: [32m'xterm'[39m, _readable: [33mtrue[39m, _writable: [33mtrue[39m } [32m+431ms[0m
2018-11-15T14:25:02.493527453Z    [32;1mRepl [0mRepl process killed. [32m+1ms[0m
2018-11-15T14:25:02.497704375Z    [31;1mexpress:router [0mdispatching GET /main.js [31m+43ms[0m
2018-11-15T14:25:02.497779386Z    [31;1mexpress:router [0mquery  : /main.js [31m+0ms[0m
2018-11-15T14:25:02.497894513Z    [31;1mexpress:router [0mexpressInit  : /main.js [31m+0ms[0m
2018-11-15T14:25:02.497906556Z    [31;1mexpress:router [0mtextParser  : /main.js [31m+0ms[0m
2018-11-15T14:25:02.497912761Z    [32;1mbody-parser:text [0mskip empty body [32m+43ms[0m
2018-11-15T14:25:02.498051517Z    [31;1mexpress:router [0mserveStatic  : /main.js [31m+0ms[0m
2018-11-15T14:25:02.498060835Z    [36;1msend [0mstat "/app/public/main.js" [36m+43ms[0m
2018-11-15T14:25:02.498283706Z    [36;1msend [0mpipe "/app/public/main.js" [36m+1ms[0m
2018-11-15T14:25:02.498293495Z    [36;1msend [0maccept ranges [36m+0ms[0m
2018-11-15T14:25:02.498302530Z    [36;1msend [0mcache-control public, max-age=0 [36m+0ms[0m
2018-11-15T14:25:02.498409512Z    [36;1msend [0mmodified Thu, 15 Nov 2018 14:12:09 GMT [36m+0ms[0m
2018-11-15T14:25:02.498417079Z    [36;1msend [0metag W/"1250ee-16717b702a8" [36m+0ms[0m
2018-11-15T14:25:02.498420755Z    [36;1msend [0mcontent-type application/javascript [36m+0ms[0m
2018-11-15T14:25:03.274403028Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+8s[0m
2018-11-15T14:25:03.274443067Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjCP" [35m+0ms[0m
2018-11-15T14:25:03.274610017Z    [35;1mengine [0mhandshaking client "DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
2018-11-15T14:25:03.278927422Z    [34;1mengine:socket [0msending packet "open" ({"sid":"DEflyucXzJNQ5nm4AAAG","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}) [34m+1s[0m
2018-11-15T14:25:03.278992944Z    [34;1mengine:socket [0msending packet "message" (0) [34m+0ms[0m
2018-11-15T14:25:03.279008208Z    [31;1mengine:polling [0msetting request [31m+8s[0m
2018-11-15T14:25:03.279014793Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:03.279020694Z    [31;1mengine:polling [0mwriting "96:0{"sid":"DEflyucXzJNQ5nm4AAAG","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":5000}2:40" [31m+0ms[0m
2018-11-15T14:25:03.279027679Z    [34;1mengine:socket [0mexecuting batch send callback [34m+1ms[0m
2018-11-15T14:25:03.279033838Z    [33;1msocket.io:server [0mincoming connection with id DEflyucXzJNQ5nm4AAAG [33m+8s[0m
2018-11-15T14:25:03.279105832Z    [33;1msocket.io:client [0mconnecting to namespace / [33m+785ms[0m
2018-11-15T14:25:03.279114012Z    [36;1msocket.io:namespace [0madding socket to nsp / [36m+8s[0m
2018-11-15T14:25:03.279119701Z    [36;1msocket.io:socket [0msocket connected - writing packet [36m+784ms[0m
2018-11-15T14:25:03.279125397Z    [36;1msocket.io:socket [0mjoining room DEflyucXzJNQ5nm4AAAG [36m+0ms[0m
2018-11-15T14:25:03.279130952Z    [36;1msocket.io:socket [0mpacket already sent in initial handshake [36m+0ms[0m
2018-11-15T14:25:03.279153539Z    [32;1mserver [0mio.on("connection", (socket) => { [32m+784ms[0m
2018-11-15T14:25:03.279160688Z    [32;1mserver [0m`socket.emit("langChange", {` ~~> language: ruby, data: WELCOME TO SPACECRAFT!
2018-11-15T14:25:03.279166488Z   [32m+0ms[0m
2018-11-15T14:25:03.279171840Z    [33;1msocket.io:client [0mwriting packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [33m+0ms[0m
2018-11-15T14:25:03.279179190Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} [32m+1s[0m
2018-11-15T14:25:03.279186293Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}] [32m+0ms[0m
2018-11-15T14:25:03.279194040Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]) [34m+0ms[0m
2018-11-15T14:25:03.279200666Z    [36;1msocket.io:socket [0mjoined room DEflyucXzJNQ5nm4AAAG [36m+1ms[0m
2018-11-15T14:25:03.279207408Z    [32;1mserver [0m  [io.of("/").clients(fn)] error: null, clients: DEflyucXzJNQ5nm4AAAG [32m+1ms[0m
2018-11-15T14:25:03.279213120Z    [32;1mserver [0m  [initRepl] lang: ruby, welcome_msg: WELCOME TO SPACECRAFT!
2018-11-15T14:25:03.279218291Z   [32m+0ms[0m
2018-11-15T14:25:03.279243319Z    [32;1mRepl [0m[kill()] this.process: [1mnull[22m [32m+784ms[0m
2018-11-15T14:25:03.279249473Z    [32;1mRepl [0mRepl process killed. [32m+0ms[0m
2018-11-15T14:25:03.279254948Z    [32;1mRepl [0m[Repl.init(language = "ruby")] [32m+0ms[0m
2018-11-15T14:25:03.281130301Z    [32;1mRepl [0m  INITIALIZED command: irb [32m+3ms[0m
2018-11-15T14:25:03.283566649Z    [32;1mRepl [0m  this.process: UnixTerminal {
2018-11-15T14:25:03.283593073Z    [32;1mRepl [0m  _internalee:
2018-11-15T14:25:03.283662134Z    [32;1mRepl [0m   EventEmitter {
2018-11-15T14:25:03.283669924Z    [32;1mRepl [0m     _events: [Object: null prototype] {},
2018-11-15T14:25:03.283675178Z    [32;1mRepl [0m     _eventsCount: [33m0[39m,
2018-11-15T14:25:03.283680448Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m },
2018-11-15T14:25:03.283707600Z    [32;1mRepl [0m  _socket:
2018-11-15T14:25:03.283713861Z    [32;1mRepl [0m   PipeSocket {
2018-11-15T14:25:03.283718930Z    [32;1mRepl [0m     connecting: [33mfalse[39m,
2018-11-15T14:25:03.283724274Z    [32;1mRepl [0m     _hadError: [33mfalse[39m,
2018-11-15T14:25:03.283729456Z    [32;1mRepl [0m     _handle:
2018-11-15T14:25:03.283734661Z    [32;1mRepl [0m      Pipe {
2018-11-15T14:25:03.283739837Z    [32;1mRepl [0m        onread: [36m[Function: onStreamRead][39m,
2018-11-15T14:25:03.283745437Z    [32;1mRepl [0m        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
2018-11-15T14:25:03.283751155Z    [32;1mRepl [0m     _parent: [1mnull[22m,
2018-11-15T14:25:03.283756791Z    [32;1mRepl [0m     _host: [1mnull[22m,
2018-11-15T14:25:03.283762036Z    [32;1mRepl [0m     _readableState:
2018-11-15T14:25:03.283767395Z    [32;1mRepl [0m      ReadableState {
2018-11-15T14:25:03.283790120Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:25:03.283796479Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:25:03.283801763Z    [32;1mRepl [0m        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
2018-11-15T14:25:03.283807709Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:25:03.283812829Z    [32;1mRepl [0m        pipes: [1mnull[22m,
2018-11-15T14:25:03.283851239Z    [32;1mRepl [0m        pipesCount: [33m0[39m,
2018-11-15T14:25:03.283876193Z    [32;1mRepl [0m        flowing: [1mnull[22m,
2018-11-15T14:25:03.283881833Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:25:03.283886816Z    [32;1mRepl [0m        endEmitted: [33mfalse[39m,
2018-11-15T14:25:03.283891892Z    [32;1mRepl [0m        reading: [33mfalse[39m,
2018-11-15T14:25:03.283903927Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:25:03.283909697Z    [32;1mRepl [0m        needReadable: [33mfalse[39m,
2018-11-15T14:25:03.283914707Z    [32;1mRepl [0m        emittedReadable: [33mfalse[39m,
2018-11-15T14:25:03.283926658Z    [32;1mRepl [0m        readableListening: [33mfalse[39m,
2018-11-15T14:25:03.283932270Z    [32;1mRepl [0m        resumeScheduled: [33mfalse[39m,
2018-11-15T14:25:03.283957047Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:25:03.283963850Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:25:03.283969169Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:25:03.283974473Z    [32;1mRepl [0m        awaitDrain: [33m0[39m,
2018-11-15T14:25:03.283980116Z    [32;1mRepl [0m        readingMore: [33mfalse[39m,
2018-11-15T14:25:03.283986618Z    [32;1mRepl [0m        decoder:
2018-11-15T14:25:03.283991668Z    [32;1mRepl [0m         StringDecoder {
2018-11-15T14:25:03.283996857Z    [32;1mRepl [0m           encoding: [32m'utf8'[39m,
2018-11-15T14:25:03.284002841Z    [32;1mRepl [0m           [[32mSymbol(kNativeDecoder)[39m]: <Buffer 00 00 00 00 00 00 01> },
2018-11-15T14:25:03.284008750Z    [32;1mRepl [0m        encoding: [32m'utf8'[39m },
2018-11-15T14:25:03.284014055Z    [32;1mRepl [0m     readable: [33mfalse[39m,
2018-11-15T14:25:03.284019090Z    [32;1mRepl [0m     _events:
2018-11-15T14:25:03.284041347Z    [32;1mRepl [0m      [Object: null prototype] {
2018-11-15T14:25:03.284047926Z    [32;1mRepl [0m        end: [36m[Function: onReadableStreamEnd][39m,
2018-11-15T14:25:03.284053174Z    [32;1mRepl [0m        error: [36m[Function][39m,
2018-11-15T14:25:03.284058755Z    [32;1mRepl [0m        close: [36m[Function][39m },
2018-11-15T14:25:03.284063728Z    [32;1mRepl [0m     _eventsCount: [33m3[39m,
2018-11-15T14:25:03.284068968Z    [32;1mRepl [0m     _maxListeners: [90mundefined[39m,
2018-11-15T14:25:03.284074240Z    [32;1mRepl [0m     _writableState:
2018-11-15T14:25:03.284079215Z    [32;1mRepl [0m      WritableState {
2018-11-15T14:25:03.284084655Z    [32;1mRepl [0m        objectMode: [33mfalse[39m,
2018-11-15T14:25:03.284089934Z    [32;1mRepl [0m        highWaterMark: [33m16384[39m,
2018-11-15T14:25:03.284095289Z    [32;1mRepl [0m        finalCalled: [33mfalse[39m,
2018-11-15T14:25:03.284100669Z    [32;1mRepl [0m        needDrain: [33mfalse[39m,
2018-11-15T14:25:03.284130229Z    [32;1mRepl [0m        ending: [33mfalse[39m,
2018-11-15T14:25:03.284137259Z    [32;1mRepl [0m        ended: [33mfalse[39m,
2018-11-15T14:25:03.284142411Z    [32;1mRepl [0m        finished: [33mfalse[39m,
2018-11-15T14:25:03.284153297Z    [32;1mRepl [0m        destroyed: [33mfalse[39m,
2018-11-15T14:25:03.284158774Z    [32;1mRepl [0m        decodeStrings: [33mfalse[39m,
2018-11-15T14:25:03.284163947Z    [32;1mRepl [0m        defaultEncoding: [32m'utf8'[39m,
2018-11-15T14:25:03.284169174Z    [32;1mRepl [0m        length: [33m0[39m,
2018-11-15T14:25:03.284174787Z    [32;1mRepl [0m        writing: [33mfalse[39m,
2018-11-15T14:25:03.284180107Z    [32;1mRepl [0m        corked: [33m0[39m,
2018-11-15T14:25:03.284185408Z    [32;1mRepl [0m        sync: [33mtrue[39m,
2018-11-15T14:25:03.284190537Z    [32;1mRepl [0m        bufferProcessing: [33mfalse[39m,
2018-11-15T14:25:03.284214286Z    [32;1mRepl [0m        onwrite: [36m[Function: bound onwrite][39m,
2018-11-15T14:25:03.284221155Z    [32;1mRepl [0m        writecb: [1mnull[22m,
2018-11-15T14:25:03.284226640Z    [32;1mRepl [0m        writelen: [33m0[39m,
2018-11-15T14:25:03.284231840Z    [32;1mRepl [0m        bufferedRequest: [1mnull[22m,
2018-11-15T14:25:03.284236803Z    [32;1mRepl [0m        lastBufferedRequest: [1mnull[22m,
2018-11-15T14:25:03.284241968Z    [32;1mRepl [0m        pendingcb: [33m0[39m,
2018-11-15T14:25:03.284246955Z    [32;1mRepl [0m        prefinished: [33mfalse[39m,
2018-11-15T14:25:03.284252774Z    [32;1mRepl [0m        errorEmitted: [33mfalse[39m,
2018-11-15T14:25:03.284271280Z    [32;1mRepl [0m        emitClose: [33mfalse[39m,
2018-11-15T14:25:03.284277637Z    [32;1mRepl [0m        bufferedRequestCount: [33m0[39m,
2018-11-15T14:25:03.284301427Z    [32;1mRepl [0m        corkedRequestsFree:
2018-11-15T14:25:03.284306875Z    [32;1mRepl [0m         { next: [1mnull[22m,
2018-11-15T14:25:03.284312083Z    [32;1mRepl [0m           entry: [1mnull[22m,
2018-11-15T14:25:03.284317226Z    [32;1mRepl [0m           finish: [36m[Function: bound onCorkedFinish][39m } },
2018-11-15T14:25:03.284322679Z    [32;1mRepl [0m     writable: [33mfalse[39m,
2018-11-15T14:25:03.284328272Z    [32;1mRepl [0m     allowHalfOpen: [33mfalse[39m,
2018-11-15T14:25:03.284334032Z    [32;1mRepl [0m     _sockname: [1mnull[22m,
2018-11-15T14:25:03.284339170Z    [32;1mRepl [0m     _pendingData: [1mnull[22m,
2018-11-15T14:25:03.284344811Z    [32;1mRepl [0m     _pendingEncoding: [32m''[39m,
2018-11-15T14:25:03.284350088Z    [32;1mRepl [0m     server: [1mnull[22m,
2018-11-15T14:25:03.284361371Z    [32;1mRepl [0m     _server: [1mnull[22m,
2018-11-15T14:25:03.284384973Z    [32;1mRepl [0m     [[32mSymbol(asyncId)[39m]: [33m9067[39m,
2018-11-15T14:25:03.284396008Z    [32;1mRepl [0m     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
2018-11-15T14:25:03.284401429Z    [32;1mRepl [0m     [[32mSymbol(timeout)[39m]: [1mnull[22m,
2018-11-15T14:25:03.284406797Z    [32;1mRepl [0m     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
2018-11-15T14:25:03.284412046Z    [32;1mRepl [0m     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
2018-11-15T14:25:03.284417469Z    [32;1mRepl [0m  _pid: [33m36[39m,
2018-11-15T14:25:03.284422917Z    [32;1mRepl [0m  _fd: [33m21[39m,
2018-11-15T14:25:03.284428132Z    [32;1mRepl [0m  _pty: [32m'/dev/pts/1'[39m,
2018-11-15T14:25:03.284433213Z    [32;1mRepl [0m  _file: [32m'irb'[39m,
2018-11-15T14:25:03.284438368Z    [32;1mRepl [0m  _name: [32m'xterm'[39m,
2018-11-15T14:25:03.284443442Z    [32;1mRepl [0m  _readable: [33mtrue[39m,
2018-11-15T14:25:03.284467110Z    [32;1mRepl [0m  _writable: [33mtrue[39m }, this.language: "ruby" [32m+1ms[0m
2018-11-15T14:25:03.284561978Z    [32;1mRepl [0m[bufferRead(bufferInterval = undefined)] [32m+2ms[0m
2018-11-15T14:25:03.284571692Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = false)] [32m+0ms[0m
2018-11-15T14:25:03.284583484Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:03.284589282Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:03.284614357Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:03.284620801Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:03.284625872Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:03.284630964Z        return result !== '';
2018-11-15T14:25:03.284635798Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:03.284641169Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:03.284646729Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.284652009Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.284657043Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.284669269Z          if (condFunc()) {
2018-11-15T14:25:03.284674695Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.284697510Z            return resolve(value);
2018-11-15T14:25:03.284703230Z          }
2018-11-15T14:25:03.284708036Z          setTimeout(wait, interval);
2018-11-15T14:25:03.284713118Z        } [32m+0ms[0m
2018-11-15T14:25:03.284718124Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.285282184Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.285303479Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.285309214Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.285314793Z          if (condFunc()) {
2018-11-15T14:25:03.285319384Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.285351916Z            return resolve(value);
2018-11-15T14:25:03.285362327Z          }
2018-11-15T14:25:03.285368988Z          setTimeout(wait, interval);
2018-11-15T14:25:03.285375662Z        } [32m+2ms[0m
2018-11-15T14:25:03.285382784Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.286593500Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.286614709Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.286620576Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.286625669Z          if (condFunc()) {
2018-11-15T14:25:03.286650680Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.286657167Z            return resolve(value);
2018-11-15T14:25:03.286662019Z          }
2018-11-15T14:25:03.286666720Z          setTimeout(wait, interval);
2018-11-15T14:25:03.286671585Z        } [32m+1ms[0m
2018-11-15T14:25:03.286677035Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.287805175Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.287835390Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.287841185Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.287866634Z          if (condFunc()) {
2018-11-15T14:25:03.287872796Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.287878235Z            return resolve(value);
2018-11-15T14:25:03.287882905Z          }
2018-11-15T14:25:03.287929198Z          setTimeout(wait, interval);
2018-11-15T14:25:03.287969876Z        } [32m+1ms[0m
2018-11-15T14:25:03.288072835Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.289054366Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.289090006Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.289136086Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.289141622Z          if (condFunc()) {
2018-11-15T14:25:03.289146274Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.289151538Z            return resolve(value);
2018-11-15T14:25:03.289156526Z          }
2018-11-15T14:25:03.289161028Z          setTimeout(wait, interval);
2018-11-15T14:25:03.289165807Z        } [32m+1ms[0m
2018-11-15T14:25:03.289259285Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.290285764Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.290302388Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.290308087Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.290313369Z          if (condFunc()) {
2018-11-15T14:25:03.290318460Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.290324103Z            return resolve(value);
2018-11-15T14:25:03.290388394Z          }
2018-11-15T14:25:03.290396629Z          setTimeout(wait, interval);
2018-11-15T14:25:03.290401641Z        } [32m+2ms[0m
2018-11-15T14:25:03.290525489Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.291587184Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.291605187Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.291613141Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.291673265Z          if (condFunc()) {
2018-11-15T14:25:03.291680215Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.291685733Z            return resolve(value);
2018-11-15T14:25:03.291690649Z          }
2018-11-15T14:25:03.291695396Z          setTimeout(wait, interval);
2018-11-15T14:25:03.291700461Z        } [32m+1ms[0m
2018-11-15T14:25:03.291705541Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.292754914Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.292783659Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.292789499Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.292794472Z          if (condFunc()) {
2018-11-15T14:25:03.292799351Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.292826141Z            return resolve(value);
2018-11-15T14:25:03.292831191Z          }
2018-11-15T14:25:03.292835820Z          setTimeout(wait, interval);
2018-11-15T14:25:03.292840858Z        } [32m+1ms[0m
2018-11-15T14:25:03.292942698Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.294051112Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.294071319Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.294078949Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.294141177Z          if (condFunc()) {
2018-11-15T14:25:03.294148906Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.294157066Z            return resolve(value);
2018-11-15T14:25:03.294163418Z          }
2018-11-15T14:25:03.294169923Z          setTimeout(wait, interval);
2018-11-15T14:25:03.294203589Z        } [32m+1ms[0m
2018-11-15T14:25:03.294211335Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.295230064Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.295244597Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.295249989Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.295254912Z          if (condFunc()) {
2018-11-15T14:25:03.295259962Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.295265389Z            return resolve(value);
2018-11-15T14:25:03.295270493Z          }
2018-11-15T14:25:03.295294965Z          setTimeout(wait, interval);
2018-11-15T14:25:03.295301678Z        } [32m+2ms[0m
2018-11-15T14:25:03.295390645Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.296591139Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.296609688Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.296617544Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.296680261Z          if (condFunc()) {
2018-11-15T14:25:03.296689397Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.296748663Z            return resolve(value);
2018-11-15T14:25:03.296757307Z          }
2018-11-15T14:25:03.296765658Z          setTimeout(wait, interval);
2018-11-15T14:25:03.296772848Z        } [32m+1ms[0m
2018-11-15T14:25:03.296779946Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.297729311Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.297745134Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.297750474Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.297755316Z          if (condFunc()) {
2018-11-15T14:25:03.297759999Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.297765514Z            return resolve(value);
2018-11-15T14:25:03.297770354Z          }
2018-11-15T14:25:03.297796462Z          setTimeout(wait, interval);
2018-11-15T14:25:03.297803497Z        } [32m+1ms[0m
2018-11-15T14:25:03.297893331Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.298986057Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.299003689Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.299011333Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.299018673Z          if (condFunc()) {
2018-11-15T14:25:03.299083342Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.299092611Z            return resolve(value);
2018-11-15T14:25:03.299100128Z          }
2018-11-15T14:25:03.299107316Z          setTimeout(wait, interval);
2018-11-15T14:25:03.299114511Z        } [32m+1ms[0m
2018-11-15T14:25:03.299147419Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.300221513Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.300236881Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.300242425Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.300247575Z          if (condFunc()) {
2018-11-15T14:25:03.300252231Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.300291193Z            return resolve(value);
2018-11-15T14:25:03.300298193Z          }
2018-11-15T14:25:03.300304174Z          setTimeout(wait, interval);
2018-11-15T14:25:03.300309185Z        } [32m+2ms[0m
2018-11-15T14:25:03.300330746Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.301539344Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.301558852Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.301717987Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.301728334Z          if (condFunc()) {
2018-11-15T14:25:03.301808575Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.301819930Z            return resolve(value);
2018-11-15T14:25:03.301827385Z          }
2018-11-15T14:25:03.301834436Z          setTimeout(wait, interval);
2018-11-15T14:25:03.301841702Z        } [32m+1ms[0m
2018-11-15T14:25:03.301849035Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.302885632Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.302900332Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.302905836Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.302911204Z          if (condFunc()) {
2018-11-15T14:25:03.302916078Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.302943694Z            return resolve(value);
2018-11-15T14:25:03.302950372Z          }
2018-11-15T14:25:03.302955262Z          setTimeout(wait, interval);
2018-11-15T14:25:03.302960178Z        } [32m+1ms[0m
2018-11-15T14:25:03.302965241Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.304232744Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.304253087Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.304328148Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.304335924Z          if (condFunc()) {
2018-11-15T14:25:03.304340928Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.304346492Z            return resolve(value);
2018-11-15T14:25:03.304351425Z          }
2018-11-15T14:25:03.304356254Z          setTimeout(wait, interval);
2018-11-15T14:25:03.304360932Z        } [32m+1ms[0m
2018-11-15T14:25:03.304386969Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.305465300Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.305479747Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.305505838Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.305528529Z          if (condFunc()) {
2018-11-15T14:25:03.305533999Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.305539380Z            return resolve(value);
2018-11-15T14:25:03.305544153Z          }
2018-11-15T14:25:03.305548755Z          setTimeout(wait, interval);
2018-11-15T14:25:03.305553624Z        } [32m+1ms[0m
2018-11-15T14:25:03.305558790Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.306749145Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.306829022Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.306839919Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.306846001Z          if (condFunc()) {
2018-11-15T14:25:03.306850510Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.306855822Z            return resolve(value);
2018-11-15T14:25:03.306860456Z          }
2018-11-15T14:25:03.306899111Z          setTimeout(wait, interval);
2018-11-15T14:25:03.306907511Z        } [32m+1ms[0m
2018-11-15T14:25:03.306915533Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.308058148Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.308082108Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.308088771Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.308113506Z          if (condFunc()) {
2018-11-15T14:25:03.308120251Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.308125721Z            return resolve(value);
2018-11-15T14:25:03.308130790Z          }
2018-11-15T14:25:03.308135569Z          setTimeout(wait, interval);
2018-11-15T14:25:03.308140467Z        } [32m+1ms[0m
2018-11-15T14:25:03.308145534Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.309781448Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.309798823Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.309804261Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.309809281Z          if (condFunc()) {
2018-11-15T14:25:03.309814114Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.309860503Z            return resolve(value);
2018-11-15T14:25:03.309880130Z          }
2018-11-15T14:25:03.309885434Z          setTimeout(wait, interval);
2018-11-15T14:25:03.309890246Z        } [32m+2ms[0m
2018-11-15T14:25:03.309895053Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.311015101Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.311030796Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.311036732Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.311041651Z          if (condFunc()) {
2018-11-15T14:25:03.311046242Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.311072852Z            return resolve(value);
2018-11-15T14:25:03.311079321Z          }
2018-11-15T14:25:03.311083778Z          setTimeout(wait, interval);
2018-11-15T14:25:03.311088602Z        } [32m+1ms[0m
2018-11-15T14:25:03.311093507Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.312249933Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.312322890Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.312331486Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.312336598Z          if (condFunc()) {
2018-11-15T14:25:03.312341234Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.312346594Z            return resolve(value);
2018-11-15T14:25:03.312351264Z          }
2018-11-15T14:25:03.312355954Z          setTimeout(wait, interval);
2018-11-15T14:25:03.312360504Z        } [32m+2ms[0m
2018-11-15T14:25:03.312365377Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.313635037Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.313652148Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.313657948Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.313663106Z          if (condFunc()) {
2018-11-15T14:25:03.313708445Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.313714026Z            return resolve(value);
2018-11-15T14:25:03.313718672Z          }
2018-11-15T14:25:03.313723327Z          setTimeout(wait, interval);
2018-11-15T14:25:03.313727963Z        } [32m+1ms[0m
2018-11-15T14:25:03.313733095Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.314735652Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.314765821Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.314811430Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.314818909Z          if (condFunc()) {
2018-11-15T14:25:03.314823450Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.314828649Z            return resolve(value);
2018-11-15T14:25:03.314833123Z          }
2018-11-15T14:25:03.314837387Z          setTimeout(wait, interval);
2018-11-15T14:25:03.314843157Z        } [32m+1ms[0m
2018-11-15T14:25:03.314848166Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.315961926Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.315975270Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.315980256Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.315984568Z          if (condFunc()) {
2018-11-15T14:25:03.315988966Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.315993898Z            return resolve(value);
2018-11-15T14:25:03.315998478Z          }
2018-11-15T14:25:03.316020048Z          setTimeout(wait, interval);
2018-11-15T14:25:03.316025986Z        } [32m+1ms[0m
2018-11-15T14:25:03.316030296Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.317348026Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.317448389Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.317480872Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.317487935Z          if (condFunc()) {
2018-11-15T14:25:03.317492512Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.317497941Z            return resolve(value);
2018-11-15T14:25:03.317502530Z          }
2018-11-15T14:25:03.317507436Z          setTimeout(wait, interval);
2018-11-15T14:25:03.317512351Z        } [32m+2ms[0m
2018-11-15T14:25:03.317541695Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.327120011Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.327149179Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.327153398Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.327157114Z          if (condFunc()) {
2018-11-15T14:25:03.327188464Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.327193738Z            return resolve(value);
2018-11-15T14:25:03.327196903Z          }
2018-11-15T14:25:03.327199950Z          setTimeout(wait, interval);
2018-11-15T14:25:03.327203232Z        } [32m+3ms[0m
2018-11-15T14:25:03.327206510Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+6ms[0m
2018-11-15T14:25:03.328381918Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.328459897Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.328466377Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.328469863Z          if (condFunc()) {
2018-11-15T14:25:03.328473045Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.328476609Z            return resolve(value);
2018-11-15T14:25:03.328479826Z          }
2018-11-15T14:25:03.328482968Z          setTimeout(wait, interval);
2018-11-15T14:25:03.328486090Z        } [32m+2ms[0m
2018-11-15T14:25:03.328489487Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.329675919Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.329693483Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.329697045Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.329700472Z          if (condFunc()) {
2018-11-15T14:25:03.329703534Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.329707165Z            return resolve(value);
2018-11-15T14:25:03.329726184Z          }
2018-11-15T14:25:03.329730615Z          setTimeout(wait, interval);
2018-11-15T14:25:03.329733744Z        } [32m+1ms[0m
2018-11-15T14:25:03.329736992Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.330911267Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.330960381Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.330966126Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.330969816Z          if (condFunc()) {
2018-11-15T14:25:03.330973083Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.330976840Z            return resolve(value);
2018-11-15T14:25:03.330980246Z          }
2018-11-15T14:25:03.330983424Z          setTimeout(wait, interval);
2018-11-15T14:25:03.330986608Z        } [32m+1ms[0m
2018-11-15T14:25:03.331002523Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.332342017Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.332364288Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.332371699Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.332377010Z          if (condFunc()) {
2018-11-15T14:25:03.332381977Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.332388488Z            return resolve(value);
2018-11-15T14:25:03.332393355Z          }
2018-11-15T14:25:03.332398098Z          setTimeout(wait, interval);
2018-11-15T14:25:03.332403037Z        } [32m+1ms[0m
2018-11-15T14:25:03.332464041Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.333638829Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.333676175Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.333680677Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.333684253Z          if (condFunc()) {
2018-11-15T14:25:03.333687352Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.333691072Z            return resolve(value);
2018-11-15T14:25:03.333694285Z          }
2018-11-15T14:25:03.333697306Z          setTimeout(wait, interval);
2018-11-15T14:25:03.333700397Z        } [32m+1ms[0m
2018-11-15T14:25:03.333703695Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.334983834Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.335027606Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.335031347Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.335034904Z          if (condFunc()) {
2018-11-15T14:25:03.335038104Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.335041906Z            return resolve(value);
2018-11-15T14:25:03.335045049Z          }
2018-11-15T14:25:03.335048232Z          setTimeout(wait, interval);
2018-11-15T14:25:03.335051765Z        } [32m+1ms[0m
2018-11-15T14:25:03.335055008Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.336346575Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.336384519Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.336407232Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.336415223Z          if (condFunc()) {
2018-11-15T14:25:03.336420868Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.336427394Z            return resolve(value);
2018-11-15T14:25:03.336432378Z          }
2018-11-15T14:25:03.336462002Z          setTimeout(wait, interval);
2018-11-15T14:25:03.336467331Z        } [32m+2ms[0m
2018-11-15T14:25:03.336472757Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.337715669Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.337757815Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.337761847Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.337765104Z          if (condFunc()) {
2018-11-15T14:25:03.337768177Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.337771634Z            return resolve(value);
2018-11-15T14:25:03.337774786Z          }
2018-11-15T14:25:03.337777837Z          setTimeout(wait, interval);
2018-11-15T14:25:03.337781013Z        } [32m+1ms[0m
2018-11-15T14:25:03.337784172Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.339025890Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.339063900Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.339068751Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.339087793Z          if (condFunc()) {
2018-11-15T14:25:03.339091820Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.339095946Z            return resolve(value);
2018-11-15T14:25:03.339099130Z          }
2018-11-15T14:25:03.339102189Z          setTimeout(wait, interval);
2018-11-15T14:25:03.339105418Z        } [32m+1ms[0m
2018-11-15T14:25:03.339129097Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.340468167Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.340484446Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.340490942Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.340496369Z          if (condFunc()) {
2018-11-15T14:25:03.340501481Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.340506971Z            return resolve(value);
2018-11-15T14:25:03.340562524Z          }
2018-11-15T14:25:03.340570689Z          setTimeout(wait, interval);
2018-11-15T14:25:03.340575738Z        } [32m+2ms[0m
2018-11-15T14:25:03.340582487Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.341625288Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.341647821Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.341655364Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.341874492Z          if (condFunc()) {
2018-11-15T14:25:03.341891524Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.341899073Z            return resolve(value);
2018-11-15T14:25:03.341905286Z          }
2018-11-15T14:25:03.341911283Z          setTimeout(wait, interval);
2018-11-15T14:25:03.341916437Z        } [32m+1ms[0m
2018-11-15T14:25:03.341921681Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.343081043Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.343100036Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.343107369Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.343112952Z          if (condFunc()) {
2018-11-15T14:25:03.343118087Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.343252085Z            return resolve(value);
2018-11-15T14:25:03.343323806Z          }
2018-11-15T14:25:03.343380932Z          setTimeout(wait, interval);
2018-11-15T14:25:03.343408563Z        } [32m+1ms[0m
2018-11-15T14:25:03.343417872Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.344669144Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.344686781Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.344693311Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.344698463Z          if (condFunc()) {
2018-11-15T14:25:03.344832420Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.344924764Z            return resolve(value);
2018-11-15T14:25:03.344932302Z          }
2018-11-15T14:25:03.344946993Z          setTimeout(wait, interval);
2018-11-15T14:25:03.344950790Z        } [32m+1ms[0m
2018-11-15T14:25:03.344970743Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.346257420Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.346278895Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.346286415Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.346292322Z          if (condFunc()) {
2018-11-15T14:25:03.346421383Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.346431580Z            return resolve(value);
2018-11-15T14:25:03.346435039Z          }
2018-11-15T14:25:03.346438105Z          setTimeout(wait, interval);
2018-11-15T14:25:03.346441220Z        } [32m+2ms[0m
2018-11-15T14:25:03.346549145Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.347939349Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.347956470Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.347962313Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.347967168Z          if (condFunc()) {
2018-11-15T14:25:03.347993955Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.348002195Z            return resolve(value);
2018-11-15T14:25:03.348007459Z          }
2018-11-15T14:25:03.348013315Z          setTimeout(wait, interval);
2018-11-15T14:25:03.348019288Z        } [32m+1ms[0m
2018-11-15T14:25:03.348024491Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.349217809Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.349270819Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.349279571Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.349285587Z          if (condFunc()) {
2018-11-15T14:25:03.349290739Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.349296464Z            return resolve(value);
2018-11-15T14:25:03.349301442Z          }
2018-11-15T14:25:03.349399467Z          setTimeout(wait, interval);
2018-11-15T14:25:03.349410816Z        } [32m+2ms[0m
2018-11-15T14:25:03.349656067Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.350909494Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.350927780Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.350933512Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.350955810Z          if (condFunc()) {
2018-11-15T14:25:03.350983115Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.350990075Z            return resolve(value);
2018-11-15T14:25:03.351201619Z          }
2018-11-15T14:25:03.351215782Z          setTimeout(wait, interval);
2018-11-15T14:25:03.351221403Z        } [32m+1ms[0m
2018-11-15T14:25:03.351226803Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.352431627Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.352449431Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.352455639Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.352461085Z          if (condFunc()) {
2018-11-15T14:25:03.352465893Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.352471037Z            return resolve(value);
2018-11-15T14:25:03.352621449Z          }
2018-11-15T14:25:03.352672465Z          setTimeout(wait, interval);
2018-11-15T14:25:03.352676508Z        } [32m+1ms[0m
2018-11-15T14:25:03.352703812Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.353964431Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.353982690Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.353988688Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.353993531Z          if (condFunc()) {
2018-11-15T14:25:03.354166521Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.354178388Z            return resolve(value);
2018-11-15T14:25:03.354182463Z          }
2018-11-15T14:25:03.354185625Z          setTimeout(wait, interval);
2018-11-15T14:25:03.354188932Z        } [32m+1ms[0m
2018-11-15T14:25:03.354192180Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.355432216Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.355445552Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.355449516Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.355452942Z          if (condFunc()) {
2018-11-15T14:25:03.355456391Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.355459974Z            return resolve(value);
2018-11-15T14:25:03.355552822Z          }
2018-11-15T14:25:03.355563028Z          setTimeout(wait, interval);
2018-11-15T14:25:03.355613553Z        } [32m+1ms[0m
2018-11-15T14:25:03.355671957Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.356879187Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.356889787Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.356893598Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.356896904Z          if (condFunc()) {
2018-11-15T14:25:03.356918182Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.356922094Z            return resolve(value);
2018-11-15T14:25:03.356925260Z          }
2018-11-15T14:25:03.356928368Z          setTimeout(wait, interval);
2018-11-15T14:25:03.356931496Z        } [32m+1ms[0m
2018-11-15T14:25:03.356934640Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.358156234Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.358171611Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.358177132Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.358182323Z          if (condFunc()) {
2018-11-15T14:25:03.358187252Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.358212168Z            return resolve(value);
2018-11-15T14:25:03.358218491Z          }
2018-11-15T14:25:03.358222460Z          setTimeout(wait, interval);
2018-11-15T14:25:03.358225782Z        } [32m+1ms[0m
2018-11-15T14:25:03.358228984Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.359420941Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.359432802Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.359454641Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.359458078Z          if (condFunc()) {
2018-11-15T14:25:03.359461182Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.359464851Z            return resolve(value);
2018-11-15T14:25:03.359468065Z          }
2018-11-15T14:25:03.359471091Z          setTimeout(wait, interval);
2018-11-15T14:25:03.359474225Z        } [32m+1ms[0m
2018-11-15T14:25:03.359477326Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.360666418Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.360678145Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.360692003Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.360695683Z          if (condFunc()) {
2018-11-15T14:25:03.360698772Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.360702273Z            return resolve(value);
2018-11-15T14:25:03.360705395Z          }
2018-11-15T14:25:03.360708435Z          setTimeout(wait, interval);
2018-11-15T14:25:03.360730207Z        } [32m+1ms[0m
2018-11-15T14:25:03.360733823Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.361938436Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.361956588Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.361962055Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.361967058Z          if (condFunc()) {
2018-11-15T14:25:03.362003041Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.362011953Z            return resolve(value);
2018-11-15T14:25:03.362017296Z          }
2018-11-15T14:25:03.362020601Z          setTimeout(wait, interval);
2018-11-15T14:25:03.362023769Z        } [32m+1ms[0m
2018-11-15T14:25:03.362027019Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.363171842Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.363196514Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.363226011Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.363234559Z          if (condFunc()) {
2018-11-15T14:25:03.363239687Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.363243467Z            return resolve(value);
2018-11-15T14:25:03.363246654Z          }
2018-11-15T14:25:03.363249678Z          setTimeout(wait, interval);
2018-11-15T14:25:03.363252990Z        } [32m+1ms[0m
2018-11-15T14:25:03.363256553Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.364462142Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.364473958Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.364477579Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.364498618Z          if (condFunc()) {
2018-11-15T14:25:03.364508219Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.364524545Z            return resolve(value);
2018-11-15T14:25:03.364528020Z          }
2018-11-15T14:25:03.364531098Z          setTimeout(wait, interval);
2018-11-15T14:25:03.364534348Z        } [32m+1ms[0m
2018-11-15T14:25:03.364538138Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.365697423Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.365716464Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.365734517Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.365738706Z          if (condFunc()) {
2018-11-15T14:25:03.365741843Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.365745306Z            return resolve(value);
2018-11-15T14:25:03.365748389Z          }
2018-11-15T14:25:03.365751460Z          setTimeout(wait, interval);
2018-11-15T14:25:03.365754591Z        } [32m+1ms[0m
2018-11-15T14:25:03.365757792Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.366945710Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.366956652Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.366960018Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.366963212Z          if (condFunc()) {
2018-11-15T14:25:03.366966335Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.366987250Z            return resolve(value);
2018-11-15T14:25:03.366990772Z          }
2018-11-15T14:25:03.366993853Z          setTimeout(wait, interval);
2018-11-15T14:25:03.366996941Z        } [32m+1ms[0m
2018-11-15T14:25:03.367000178Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.368223666Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.368234866Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.368238988Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.368242413Z          if (condFunc()) {
2018-11-15T14:25:03.368245575Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.368249032Z            return resolve(value);
2018-11-15T14:25:03.368252304Z          }
2018-11-15T14:25:03.368255410Z          setTimeout(wait, interval);
2018-11-15T14:25:03.368331504Z        } [32m+2ms[0m
2018-11-15T14:25:03.368336817Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.369510891Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.369523085Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.369543547Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.369548036Z          if (condFunc()) {
2018-11-15T14:25:03.369551139Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.369554626Z            return resolve(value);
2018-11-15T14:25:03.369557733Z          }
2018-11-15T14:25:03.369560816Z          setTimeout(wait, interval);
2018-11-15T14:25:03.369563933Z        } [32m+1ms[0m
2018-11-15T14:25:03.369567178Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.370794336Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.370813801Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.370858836Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.370863968Z          if (condFunc()) {
2018-11-15T14:25:03.370868661Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.370874090Z            return resolve(value);
2018-11-15T14:25:03.370879732Z          }
2018-11-15T14:25:03.370884540Z          setTimeout(wait, interval);
2018-11-15T14:25:03.370889441Z        } [32m+1ms[0m
2018-11-15T14:25:03.370895375Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.372025730Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.372043189Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.372048896Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.372054891Z          if (condFunc()) {
2018-11-15T14:25:03.372101159Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.372109266Z            return resolve(value);
2018-11-15T14:25:03.372114696Z          }
2018-11-15T14:25:03.372119708Z          setTimeout(wait, interval);
2018-11-15T14:25:03.372125122Z        } [32m+1ms[0m
2018-11-15T14:25:03.372130588Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.373242611Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.373254888Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.373258637Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.373308352Z          if (condFunc()) {
2018-11-15T14:25:03.373313595Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.373317141Z            return resolve(value);
2018-11-15T14:25:03.373320306Z          }
2018-11-15T14:25:03.373323261Z          setTimeout(wait, interval);
2018-11-15T14:25:03.373326429Z        } [32m+2ms[0m
2018-11-15T14:25:03.373329634Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.374490407Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.374503278Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.374506817Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.374510004Z          if (condFunc()) {
2018-11-15T14:25:03.374513182Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.374516556Z            return resolve(value);
2018-11-15T14:25:03.374519672Z          }
2018-11-15T14:25:03.374522625Z          setTimeout(wait, interval);
2018-11-15T14:25:03.374525684Z        } [32m+1ms[0m
2018-11-15T14:25:03.374528868Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.375769642Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.375786401Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.375791939Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.375797054Z          if (condFunc()) {
2018-11-15T14:25:03.375801764Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.375807218Z            return resolve(value);
2018-11-15T14:25:03.375812702Z          }
2018-11-15T14:25:03.375817581Z          setTimeout(wait, interval);
2018-11-15T14:25:03.375822634Z        } [32m+1ms[0m
2018-11-15T14:25:03.375826229Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.376927052Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.376943858Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.376948134Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.376952422Z          if (condFunc()) {
2018-11-15T14:25:03.376955877Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.376959511Z            return resolve(value);
2018-11-15T14:25:03.377100902Z          }
2018-11-15T14:25:03.377121470Z          setTimeout(wait, interval);
2018-11-15T14:25:03.377125331Z        } [32m+1ms[0m
2018-11-15T14:25:03.377128707Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.378289615Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.378304369Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.378308135Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.378311524Z          if (condFunc()) {
2018-11-15T14:25:03.378315080Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.378320492Z            return resolve(value);
2018-11-15T14:25:03.378325494Z          }
2018-11-15T14:25:03.378457979Z          setTimeout(wait, interval);
2018-11-15T14:25:03.378468030Z        } [32m+1ms[0m
2018-11-15T14:25:03.378471578Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.379663459Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.379677755Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.379681643Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.379685184Z          if (condFunc()) {
2018-11-15T14:25:03.379688757Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.379692443Z            return resolve(value);
2018-11-15T14:25:03.379695851Z          }
2018-11-15T14:25:03.379714542Z          setTimeout(wait, interval);
2018-11-15T14:25:03.379726728Z        } [32m+1ms[0m
2018-11-15T14:25:03.379831455Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.381138411Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.381152326Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.381157694Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.381162798Z          if (condFunc()) {
2018-11-15T14:25:03.381167430Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.381173351Z            return resolve(value);
2018-11-15T14:25:03.381178341Z          }
2018-11-15T14:25:03.381183300Z          setTimeout(wait, interval);
2018-11-15T14:25:03.381187340Z        } [32m+1ms[0m
2018-11-15T14:25:03.381331722Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.382575563Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.382637997Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.382643199Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.382646548Z          if (condFunc()) {
2018-11-15T14:25:03.382649751Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.382653292Z            return resolve(value);
2018-11-15T14:25:03.382656493Z          }
2018-11-15T14:25:03.382659470Z          setTimeout(wait, interval);
2018-11-15T14:25:03.382662708Z        } [32m+1ms[0m
2018-11-15T14:25:03.382665953Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.383753409Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.383767835Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.383771729Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.383775166Z          if (condFunc()) {
2018-11-15T14:25:03.383778358Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.383781989Z            return resolve(value);
2018-11-15T14:25:03.383785244Z          }
2018-11-15T14:25:03.383911608Z          setTimeout(wait, interval);
2018-11-15T14:25:03.383922017Z        } [32m+1ms[0m
2018-11-15T14:25:03.383925591Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.385097536Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.385111732Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.385115722Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.385119372Z          if (condFunc()) {
2018-11-15T14:25:03.385122598Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.385126381Z            return resolve(value);
2018-11-15T14:25:03.385276994Z          }
2018-11-15T14:25:03.385291062Z          setTimeout(wait, interval);
2018-11-15T14:25:03.385296960Z        } [32m+1ms[0m
2018-11-15T14:25:03.385301802Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.386460855Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.386476108Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.386480136Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.386483570Z          if (condFunc()) {
2018-11-15T14:25:03.386647873Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.386669859Z            return resolve(value);
2018-11-15T14:25:03.386673780Z          }
2018-11-15T14:25:03.386676871Z          setTimeout(wait, interval);
2018-11-15T14:25:03.386680058Z        } [32m+1ms[0m
2018-11-15T14:25:03.386683327Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.387839705Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.387853804Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.387857695Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.387861762Z          if (condFunc()) {
2018-11-15T14:25:03.388010945Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.388021223Z            return resolve(value);
2018-11-15T14:25:03.388024660Z          }
2018-11-15T14:25:03.388027747Z          setTimeout(wait, interval);
2018-11-15T14:25:03.388031016Z        } [32m+1ms[0m
2018-11-15T14:25:03.388034348Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.389193729Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.389207740Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.389211961Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.389215447Z          if (condFunc()) {
2018-11-15T14:25:03.389218822Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.389222396Z            return resolve(value);
2018-11-15T14:25:03.389372098Z          }
2018-11-15T14:25:03.389385412Z          setTimeout(wait, interval);
2018-11-15T14:25:03.389391000Z        } [32m+2ms[0m
2018-11-15T14:25:03.389394634Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.390556245Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.390570834Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.390574807Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.390578260Z          if (condFunc()) {
2018-11-15T14:25:03.390581633Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.390585251Z            return resolve(value);
2018-11-15T14:25:03.390718193Z          }
2018-11-15T14:25:03.390728094Z          setTimeout(wait, interval);
2018-11-15T14:25:03.390731726Z        } [32m+1ms[0m
2018-11-15T14:25:03.390769760Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.391914510Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.391927242Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.391931188Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.391934593Z          if (condFunc()) {
2018-11-15T14:25:03.391937785Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.391941415Z            return resolve(value);
2018-11-15T14:25:03.392069123Z          }
2018-11-15T14:25:03.392078585Z          setTimeout(wait, interval);
2018-11-15T14:25:03.392081984Z        } [32m+1ms[0m
2018-11-15T14:25:03.392085171Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.393276596Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.393293545Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.393298846Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.393302446Z          if (condFunc()) {
2018-11-15T14:25:03.393305607Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.393309239Z            return resolve(value);
2018-11-15T14:25:03.393485186Z          }
2018-11-15T14:25:03.393498205Z          setTimeout(wait, interval);
2018-11-15T14:25:03.393507795Z        } [32m+2ms[0m
2018-11-15T14:25:03.393511835Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.394665564Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.394678750Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.394682665Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.394686177Z          if (condFunc()) {
2018-11-15T14:25:03.394689736Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.394693406Z            return resolve(value);
2018-11-15T14:25:03.394696513Z          }
2018-11-15T14:25:03.394826178Z          setTimeout(wait, interval);
2018-11-15T14:25:03.394836269Z        } [32m+1ms[0m
2018-11-15T14:25:03.394840064Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.396008360Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.396021056Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.396024970Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.396041584Z          if (condFunc()) {
2018-11-15T14:25:03.396045128Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.396048659Z            return resolve(value);
2018-11-15T14:25:03.396179455Z          }
2018-11-15T14:25:03.396189057Z          setTimeout(wait, interval);
2018-11-15T14:25:03.396192607Z        } [32m+1ms[0m
2018-11-15T14:25:03.396196036Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.397372528Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.397385604Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.397389487Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.397392858Z          if (condFunc()) {
2018-11-15T14:25:03.397396012Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.397399647Z            return resolve(value);
2018-11-15T14:25:03.397565787Z          }
2018-11-15T14:25:03.397578772Z          setTimeout(wait, interval);
2018-11-15T14:25:03.397582621Z        } [32m+1ms[0m
2018-11-15T14:25:03.397586202Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.398776878Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.398792681Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.398796667Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.398800176Z          if (condFunc()) {
2018-11-15T14:25:03.398803532Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.398807119Z            return resolve(value);
2018-11-15T14:25:03.398810339Z          }
2018-11-15T14:25:03.398952304Z          setTimeout(wait, interval);
2018-11-15T14:25:03.398963959Z        } [32m+1ms[0m
2018-11-15T14:25:03.398967946Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.400135544Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.400148862Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.400152896Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.400156424Z          if (condFunc()) {
2018-11-15T14:25:03.400159807Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.400163530Z            return resolve(value);
2018-11-15T14:25:03.400324012Z          }
2018-11-15T14:25:03.400337402Z          setTimeout(wait, interval);
2018-11-15T14:25:03.400364743Z        } [32m+2ms[0m
2018-11-15T14:25:03.400369606Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.401540844Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.401554770Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.401558933Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.401562359Z          if (condFunc()) {
2018-11-15T14:25:03.401565615Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.401569199Z            return resolve(value);
2018-11-15T14:25:03.401690238Z          }
2018-11-15T14:25:03.401700844Z          setTimeout(wait, interval);
2018-11-15T14:25:03.401704444Z        } [32m+1ms[0m
2018-11-15T14:25:03.402429509Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.403498340Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.403511420Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.403515383Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.403519010Z          if (condFunc()) {
2018-11-15T14:25:03.403522229Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.403525717Z            return resolve(value);
2018-11-15T14:25:03.403651296Z          }
2018-11-15T14:25:03.403662068Z          setTimeout(wait, interval);
2018-11-15T14:25:03.403665722Z        } [32m+2ms[0m
2018-11-15T14:25:03.403669185Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.404835953Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.404849559Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.404853535Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.404857282Z          if (condFunc()) {
2018-11-15T14:25:03.404860476Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.404864260Z            return resolve(value);
2018-11-15T14:25:03.405012832Z          }
2018-11-15T14:25:03.405022505Z          setTimeout(wait, interval);
2018-11-15T14:25:03.405025930Z        } [32m+1ms[0m
2018-11-15T14:25:03.405029553Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.406207499Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.406228572Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.406232831Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.406236254Z          if (condFunc()) {
2018-11-15T14:25:03.406239356Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.406243036Z            return resolve(value);
2018-11-15T14:25:03.406246182Z          }
2018-11-15T14:25:03.406249318Z          setTimeout(wait, interval);
2018-11-15T14:25:03.406252499Z        } [32m+2ms[0m
2018-11-15T14:25:03.406371136Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.407679400Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.407692446Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.407696200Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.407699652Z          if (condFunc()) {
2018-11-15T14:25:03.407702913Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.407707065Z            return resolve(value);
2018-11-15T14:25:03.407710313Z          }
2018-11-15T14:25:03.407713440Z          setTimeout(wait, interval);
2018-11-15T14:25:03.407716644Z        } [32m+1ms[0m
2018-11-15T14:25:03.407719936Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.408820284Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.408833579Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.408837460Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.408841078Z          if (condFunc()) {
2018-11-15T14:25:03.408844287Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.408863409Z            return resolve(value);
2018-11-15T14:25:03.408935140Z          }
2018-11-15T14:25:03.408960597Z          setTimeout(wait, interval);
2018-11-15T14:25:03.408969520Z        } [32m+1ms[0m
2018-11-15T14:25:03.409081225Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.410314629Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.410326540Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.410330275Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.410333740Z          if (condFunc()) {
2018-11-15T14:25:03.410411217Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.410429693Z            return resolve(value);
2018-11-15T14:25:03.410433087Z          }
2018-11-15T14:25:03.410437607Z          setTimeout(wait, interval);
2018-11-15T14:25:03.410442610Z        } [32m+2ms[0m
2018-11-15T14:25:03.410447486Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.411527638Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.411537330Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.411540759Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.411544067Z          if (condFunc()) {
2018-11-15T14:25:03.411547164Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.411550633Z            return resolve(value);
2018-11-15T14:25:03.411553767Z          }
2018-11-15T14:25:03.411556794Z          setTimeout(wait, interval);
2018-11-15T14:25:03.411559915Z        } [32m+1ms[0m
2018-11-15T14:25:03.411563037Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.412778712Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.412791689Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.412795624Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.412798956Z          if (condFunc()) {
2018-11-15T14:25:03.412802352Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.412806099Z            return resolve(value);
2018-11-15T14:25:03.412809329Z          }
2018-11-15T14:25:03.412812464Z          setTimeout(wait, interval);
2018-11-15T14:25:03.412815955Z        } [32m+1ms[0m
2018-11-15T14:25:03.412819195Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.413990119Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.414002697Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.414006377Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.414009879Z          if (condFunc()) {
2018-11-15T14:25:03.414013119Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.414016755Z            return resolve(value);
2018-11-15T14:25:03.414019915Z          }
2018-11-15T14:25:03.414023034Z          setTimeout(wait, interval);
2018-11-15T14:25:03.414053993Z        } [32m+1ms[0m
2018-11-15T14:25:03.414058565Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.415253440Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.415265372Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.415287196Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.415290932Z          if (condFunc()) {
2018-11-15T14:25:03.415294082Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.415297701Z            return resolve(value);
2018-11-15T14:25:03.415300820Z          }
2018-11-15T14:25:03.415303901Z          setTimeout(wait, interval);
2018-11-15T14:25:03.415307159Z        } [32m+2ms[0m
2018-11-15T14:25:03.415310338Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.416556747Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.416618985Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.416627687Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.416633364Z          if (condFunc()) {
2018-11-15T14:25:03.416638528Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.416644388Z            return resolve(value);
2018-11-15T14:25:03.416649236Z          }
2018-11-15T14:25:03.416671945Z          setTimeout(wait, interval);
2018-11-15T14:25:03.416679167Z        } [32m+1ms[0m
2018-11-15T14:25:03.416685746Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.417867145Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.417899471Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.417904575Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.417908103Z          if (condFunc()) {
2018-11-15T14:25:03.417911442Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.417915129Z            return resolve(value);
2018-11-15T14:25:03.417918404Z          }
2018-11-15T14:25:03.417921468Z          setTimeout(wait, interval);
2018-11-15T14:25:03.417925105Z        } [32m+1ms[0m
2018-11-15T14:25:03.417928428Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.419227860Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.419263518Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.419286567Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.419292135Z          if (condFunc()) {
2018-11-15T14:25:03.419296952Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.419303675Z            return resolve(value);
2018-11-15T14:25:03.419308502Z          }
2018-11-15T14:25:03.419312943Z          setTimeout(wait, interval);
2018-11-15T14:25:03.419336359Z        } [32m+1ms[0m
2018-11-15T14:25:03.419343923Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.420535733Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.420577739Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.420584451Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.420589640Z          if (condFunc()) {
2018-11-15T14:25:03.420594563Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.420599414Z            return resolve(value);
2018-11-15T14:25:03.420603718Z          }
2018-11-15T14:25:03.420607830Z          setTimeout(wait, interval);
2018-11-15T14:25:03.420612287Z        } [32m+1ms[0m
2018-11-15T14:25:03.420616937Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.421853995Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.421870862Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.421884634Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.421910886Z          if (condFunc()) {
2018-11-15T14:25:03.421918516Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.421924092Z            return resolve(value);
2018-11-15T14:25:03.421929026Z          }
2018-11-15T14:25:03.421933712Z          setTimeout(wait, interval);
2018-11-15T14:25:03.421938552Z        } [32m+1ms[0m
2018-11-15T14:25:03.421943564Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.423111963Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.423125742Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.423131497Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.423137273Z          if (condFunc()) {
2018-11-15T14:25:03.423143195Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.423169950Z            return resolve(value);
2018-11-15T14:25:03.423191020Z          }
2018-11-15T14:25:03.423196087Z          setTimeout(wait, interval);
2018-11-15T14:25:03.423200846Z        } [32m+1ms[0m
2018-11-15T14:25:03.423205699Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.424363906Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.424378908Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.424385102Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.424390751Z          if (condFunc()) {
2018-11-15T14:25:03.424395994Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.424424158Z            return resolve(value);
2018-11-15T14:25:03.424429463Z          }
2018-11-15T14:25:03.424434506Z          setTimeout(wait, interval);
2018-11-15T14:25:03.424440318Z        } [32m+1ms[0m
2018-11-15T14:25:03.424445959Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.425637686Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.425654558Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.425660285Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.425714696Z          if (condFunc()) {
2018-11-15T14:25:03.425723187Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.425728745Z            return resolve(value);
2018-11-15T14:25:03.425734137Z          }
2018-11-15T14:25:03.425738811Z          setTimeout(wait, interval);
2018-11-15T14:25:03.425743894Z        } [32m+1ms[0m
2018-11-15T14:25:03.425748955Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.426912204Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.426926760Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.426947166Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.426951706Z          if (condFunc()) {
2018-11-15T14:25:03.426954969Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.426958778Z            return resolve(value);
2018-11-15T14:25:03.426961979Z          }
2018-11-15T14:25:03.426965129Z          setTimeout(wait, interval);
2018-11-15T14:25:03.426968462Z        } [32m+1ms[0m
2018-11-15T14:25:03.426971703Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.428119684Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.428134895Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.428151436Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.428170865Z          if (condFunc()) {
2018-11-15T14:25:03.428174745Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.428178457Z            return resolve(value);
2018-11-15T14:25:03.428181635Z          }
2018-11-15T14:25:03.428184746Z          setTimeout(wait, interval);
2018-11-15T14:25:03.428187916Z        } [32m+1ms[0m
2018-11-15T14:25:03.428191217Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.429387996Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+155ms[0m
2018-11-15T14:25:03.429504791Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjEo&sid=DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
2018-11-15T14:25:03.429648294Z    [35;1mengine [0msetting new request for existing client [35m+0ms[0m
2018-11-15T14:25:03.429670429Z    [31;1mengine:polling [0msetting request [31m+154ms[0m
2018-11-15T14:25:03.429674434Z    [34;1mengine:socket [0mflushing buffer to transport [34m+153ms[0m
2018-11-15T14:25:03.429678086Z    [31;1mengine:polling [0mwriting "72:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\r"}]" [31m+0ms[0m
2018-11-15T14:25:03.429876179Z    [34;1mengine:socket [0mexecuting batch send callback [34m+0ms[0m
2018-11-15T14:25:03.430048914Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.430058134Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.430061617Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.430065121Z          if (condFunc()) {
2018-11-15T14:25:03.430068359Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.430071995Z            return resolve(value);
2018-11-15T14:25:03.430075321Z          }
2018-11-15T14:25:03.430078513Z          setTimeout(wait, interval);
2018-11-15T14:25:03.430081684Z        } [32m+1ms[0m
2018-11-15T14:25:03.430084895Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.431285868Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.431299050Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.431303103Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.431317932Z          if (condFunc()) {
2018-11-15T14:25:03.431321308Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.431324841Z            return resolve(value);
2018-11-15T14:25:03.431346114Z          }
2018-11-15T14:25:03.431350368Z          setTimeout(wait, interval);
2018-11-15T14:25:03.431353583Z        } [32m+2ms[0m
2018-11-15T14:25:03.431356813Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.432534543Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.432548557Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.432554486Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.432559720Z          if (condFunc()) {
2018-11-15T14:25:03.432564466Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.432568245Z            return resolve(value);
2018-11-15T14:25:03.432571328Z          }
2018-11-15T14:25:03.432574320Z          setTimeout(wait, interval);
2018-11-15T14:25:03.432614149Z        } [32m+1ms[0m
2018-11-15T14:25:03.432620218Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.433822509Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.433835895Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.433839711Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.433843284Z          if (condFunc()) {
2018-11-15T14:25:03.433846477Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.433850080Z            return resolve(value);
2018-11-15T14:25:03.433853386Z          }
2018-11-15T14:25:03.433856543Z          setTimeout(wait, interval);
2018-11-15T14:25:03.433859698Z        } [32m+1ms[0m
2018-11-15T14:25:03.433896917Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.435013519Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.435024188Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.435027549Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.435031066Z          if (condFunc()) {
2018-11-15T14:25:03.435034169Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.435037794Z            return resolve(value);
2018-11-15T14:25:03.435040929Z          }
2018-11-15T14:25:03.435056875Z          setTimeout(wait, interval);
2018-11-15T14:25:03.435090900Z        } [32m+1ms[0m
2018-11-15T14:25:03.435095231Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.436311927Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.436325022Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.436328579Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.436331973Z          if (condFunc()) {
2018-11-15T14:25:03.436335094Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.436338590Z            return resolve(value);
2018-11-15T14:25:03.436342392Z          }
2018-11-15T14:25:03.436345675Z          setTimeout(wait, interval);
2018-11-15T14:25:03.436348971Z        } [32m+2ms[0m
2018-11-15T14:25:03.436352349Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.437603628Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.437617457Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.437620892Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.437624226Z          if (condFunc()) {
2018-11-15T14:25:03.437627462Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.437631079Z            return resolve(value);
2018-11-15T14:25:03.437634208Z          }
2018-11-15T14:25:03.437637242Z          setTimeout(wait, interval);
2018-11-15T14:25:03.437640360Z        } [32m+1ms[0m
2018-11-15T14:25:03.437675989Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.438872013Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.438901333Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.438905877Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.438909280Z          if (condFunc()) {
2018-11-15T14:25:03.438912499Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.438916139Z            return resolve(value);
2018-11-15T14:25:03.438919370Z          }
2018-11-15T14:25:03.438922456Z          setTimeout(wait, interval);
2018-11-15T14:25:03.438925638Z        } [32m+1ms[0m
2018-11-15T14:25:03.438928779Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.440178324Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.440206846Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.440210779Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.440253111Z          if (condFunc()) {
2018-11-15T14:25:03.440268234Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.440272728Z            return resolve(value);
2018-11-15T14:25:03.440275848Z          }
2018-11-15T14:25:03.440278835Z          setTimeout(wait, interval);
2018-11-15T14:25:03.440281887Z        } [32m+1ms[0m
2018-11-15T14:25:03.440285271Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:03.441466237Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.441482434Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.441485872Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.441489310Z          if (condFunc()) {
2018-11-15T14:25:03.441492475Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.441496118Z            return resolve(value);
2018-11-15T14:25:03.441499343Z          }
2018-11-15T14:25:03.441504092Z          setTimeout(wait, interval);
2018-11-15T14:25:03.441526206Z        } [32m+1ms[0m
2018-11-15T14:25:03.441529841Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.442714836Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.442731478Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.442735658Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.442739257Z          if (condFunc()) {
2018-11-15T14:25:03.442742518Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.442746256Z            return resolve(value);
2018-11-15T14:25:03.442784742Z          }
2018-11-15T14:25:03.442789669Z          setTimeout(wait, interval);
2018-11-15T14:25:03.442793035Z        } [32m+1ms[0m
2018-11-15T14:25:03.442796327Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.443966153Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.443981217Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.443986736Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.443991982Z          if (condFunc()) {
2018-11-15T14:25:03.443998092Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.444060514Z            return resolve(value);
2018-11-15T14:25:03.444065914Z          }
2018-11-15T14:25:03.444068930Z          setTimeout(wait, interval);
2018-11-15T14:25:03.444072075Z        } [32m+1ms[0m
2018-11-15T14:25:03.444075438Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.445222795Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.445236931Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.445240438Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.445243779Z          if (condFunc()) {
2018-11-15T14:25:03.445246836Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.445250353Z            return resolve(value);
2018-11-15T14:25:03.445253459Z          }
2018-11-15T14:25:03.445256558Z          setTimeout(wait, interval);
2018-11-15T14:25:03.445259635Z        } [32m+2ms[0m
2018-11-15T14:25:03.445296416Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.446494659Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.446513187Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.446516935Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.446520537Z          if (condFunc()) {
2018-11-15T14:25:03.446523849Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.446527742Z            return resolve(value);
2018-11-15T14:25:03.446569785Z          }
2018-11-15T14:25:03.446573017Z          setTimeout(wait, interval);
2018-11-15T14:25:03.446576220Z        } [32m+1ms[0m
2018-11-15T14:25:03.446579807Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.447768558Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.447783694Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.447787548Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.447791116Z          if (condFunc()) {
2018-11-15T14:25:03.447794373Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.447798505Z            return resolve(value);
2018-11-15T14:25:03.447801727Z          }
2018-11-15T14:25:03.447840254Z          setTimeout(wait, interval);
2018-11-15T14:25:03.447848117Z        } [32m+1ms[0m
2018-11-15T14:25:03.447865211Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.448981802Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.449012992Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.449017609Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.449020966Z          if (condFunc()) {
2018-11-15T14:25:03.449023989Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.449027406Z            return resolve(value);
2018-11-15T14:25:03.449030515Z          }
2018-11-15T14:25:03.449033579Z          setTimeout(wait, interval);
2018-11-15T14:25:03.449036655Z        } [32m+1ms[0m
2018-11-15T14:25:03.449039870Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.450239718Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.450256358Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.450296907Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.450301067Z          if (condFunc()) {
2018-11-15T14:25:03.450304204Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.450307873Z            return resolve(value);
2018-11-15T14:25:03.450311085Z          }
2018-11-15T14:25:03.450314238Z          setTimeout(wait, interval);
2018-11-15T14:25:03.450317516Z        } [32m+2ms[0m
2018-11-15T14:25:03.450320926Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.451430407Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.451445301Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.451449022Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.451452461Z          if (condFunc()) {
2018-11-15T14:25:03.451456010Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.451459799Z            return resolve(value);
2018-11-15T14:25:03.451463069Z          }
2018-11-15T14:25:03.451466231Z          setTimeout(wait, interval);
2018-11-15T14:25:03.451485525Z        } [32m+1ms[0m
2018-11-15T14:25:03.451489868Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.452185330Z    [35;1mengine [0mupgrading existing transport [35m+23ms[0m
2018-11-15T14:25:03.452196181Z    [34;1mengine:socket [0mmight upgrade socket transport from "polling" to "websocket" [34m+23ms[0m
2018-11-15T14:25:03.452389849Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.452399916Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.452405176Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.452408539Z          if (condFunc()) {
2018-11-15T14:25:03.452411677Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.452415206Z            return resolve(value);
2018-11-15T14:25:03.452418264Z          }
2018-11-15T14:25:03.452421261Z          setTimeout(wait, interval);
2018-11-15T14:25:03.452424390Z        } [32m+1ms[0m
2018-11-15T14:25:03.452428016Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.453773273Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.453786113Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.453789834Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.453793159Z          if (condFunc()) {
2018-11-15T14:25:03.453796241Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.453799856Z            return resolve(value);
2018-11-15T14:25:03.453802970Z          }
2018-11-15T14:25:03.453806149Z          setTimeout(wait, interval);
2018-11-15T14:25:03.453809258Z        } [32m+1ms[0m
2018-11-15T14:25:03.453829553Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.454819508Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.454830188Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.454833545Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.454837058Z          if (condFunc()) {
2018-11-15T14:25:03.454840598Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.454844255Z            return resolve(value);
2018-11-15T14:25:03.454847466Z          }
2018-11-15T14:25:03.454850511Z          setTimeout(wait, interval);
2018-11-15T14:25:03.454853608Z        } [32m+1ms[0m
2018-11-15T14:25:03.454856826Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.456043229Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.456055311Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.456058949Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.456073988Z          if (condFunc()) {
2018-11-15T14:25:03.456077409Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.456080874Z            return resolve(value);
2018-11-15T14:25:03.456083954Z          }
2018-11-15T14:25:03.456103584Z          setTimeout(wait, interval);
2018-11-15T14:25:03.456107674Z        } [32m+1ms[0m
2018-11-15T14:25:03.456110973Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.457263210Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.457274087Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.457277578Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.457280901Z          if (condFunc()) {
2018-11-15T14:25:03.457284026Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.457287460Z            return resolve(value);
2018-11-15T14:25:03.457290539Z          }
2018-11-15T14:25:03.457293568Z          setTimeout(wait, interval);
2018-11-15T14:25:03.457296692Z        } [32m+2ms[0m
2018-11-15T14:25:03.457299970Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.458493733Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.458506192Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.458509683Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.458513024Z          if (condFunc()) {
2018-11-15T14:25:03.458516197Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.458519677Z            return resolve(value);
2018-11-15T14:25:03.458522792Z          }
2018-11-15T14:25:03.458525843Z          setTimeout(wait, interval);
2018-11-15T14:25:03.458529002Z        } [32m+1ms[0m
2018-11-15T14:25:03.458532219Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.459735899Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.459747826Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.459751512Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.459754893Z          if (condFunc()) {
2018-11-15T14:25:03.459757990Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.459761637Z            return resolve(value);
2018-11-15T14:25:03.459765011Z          }
2018-11-15T14:25:03.459810487Z          setTimeout(wait, interval);
2018-11-15T14:25:03.459815985Z        } [32m+1ms[0m
2018-11-15T14:25:03.459819313Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.460963824Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.460974710Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.460978052Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.460981356Z          if (condFunc()) {
2018-11-15T14:25:03.461003239Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.461007834Z            return resolve(value);
2018-11-15T14:25:03.461010970Z          }
2018-11-15T14:25:03.461014109Z          setTimeout(wait, interval);
2018-11-15T14:25:03.461017239Z        } [32m+1ms[0m
2018-11-15T14:25:03.461020479Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.462240480Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.462282864Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.462289776Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.462311236Z          if (condFunc()) {
2018-11-15T14:25:03.462315581Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.462319204Z            return resolve(value);
2018-11-15T14:25:03.462322347Z          }
2018-11-15T14:25:03.462325419Z          setTimeout(wait, interval);
2018-11-15T14:25:03.462328619Z        } [32m+2ms[0m
2018-11-15T14:25:03.462348896Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.463464947Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.463475708Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.463479228Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.463482734Z          if (condFunc()) {
2018-11-15T14:25:03.463486054Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.463507911Z            return resolve(value);
2018-11-15T14:25:03.463511913Z          }
2018-11-15T14:25:03.463514990Z          setTimeout(wait, interval);
2018-11-15T14:25:03.463518347Z        } [32m+1ms[0m
2018-11-15T14:25:03.463521620Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.464701948Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.464763178Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.464769674Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.464774646Z          if (condFunc()) {
2018-11-15T14:25:03.464779393Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.464783171Z            return resolve(value);
2018-11-15T14:25:03.464786348Z          }
2018-11-15T14:25:03.464789377Z          setTimeout(wait, interval);
2018-11-15T14:25:03.464792536Z        } [32m+1ms[0m
2018-11-15T14:25:03.464795768Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.465968354Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.465983788Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.465987734Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.465992614Z          if (condFunc()) {
2018-11-15T14:25:03.465997414Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.466002841Z            return resolve(value);
2018-11-15T14:25:03.466057292Z          }
2018-11-15T14:25:03.466061001Z          setTimeout(wait, interval);
2018-11-15T14:25:03.466064100Z        } [32m+1ms[0m
2018-11-15T14:25:03.466067521Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.467186537Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.467199811Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.467203570Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.467207315Z          if (condFunc()) {
2018-11-15T14:25:03.467210567Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.467214209Z            return resolve(value);
2018-11-15T14:25:03.467217345Z          }
2018-11-15T14:25:03.467220598Z          setTimeout(wait, interval);
2018-11-15T14:25:03.467224254Z        } [32m+2ms[0m
2018-11-15T14:25:03.467227601Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:03.468405018Z    [32;1mRepl [0m  [concatResult(data = irb(main):001:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:03.468465487Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:03.468469991Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:03.468473516Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:03.468488656Z          if (condFunc()) {
2018-11-15T14:25:03.468492038Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:03.468495510Z            return resolve(value);
2018-11-15T14:25:03.468498863Z          }
2018-11-15T14:25:03.468501911Z          setTimeout(wait, interval);
2018-11-15T14:25:03.468505095Z        } [32m+0ms[0m
2018-11-15T14:25:03.468508279Z    [32;1mRepl [0m  [isDataReceived()] result: "irb(main):001:0> " [32m+0ms[0m
2018-11-15T14:25:03.468511956Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:03.468528941Z    [32;1mRepl [0m`let currResult = result` //==> "irb(main):001:0> " [32m+0ms[0m
2018-11-15T14:25:03.468533656Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:03.469917214Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+17ms[0m
2018-11-15T14:25:03.470054509Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjFR&sid=DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
2018-11-15T14:25:03.470200167Z    [35;1mengine [0msetting new request for existing client [35m+1ms[0m
2018-11-15T14:25:03.470208802Z    [31;1mengine:polling [0msetting request [31m+41ms[0m
2018-11-15T14:25:03.473847582Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:03.473884359Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:03.473889481Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:03.473907076Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:03.473911704Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:03.473915431Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:03.473918897Z        return result += data;
2018-11-15T14:25:03.473921974Z      })] [32m+0ms[0m
2018-11-15T14:25:03.473925361Z    [32;1mRepl [0m  resolve(result = "irb(main):001:0> ") [32m+0ms[0m
2018-11-15T14:25:03.473929089Z    [32;1mserver [0m    data: "irb(main):001:0> " [32m+196ms[0m
2018-11-15T14:25:03.474052419Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} [32m+197ms[0m
2018-11-15T14:25:03.474346917Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}],"nsp":"/"} as 2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}] [32m+1ms[0m
2018-11-15T14:25:03.474377462Z    [33;1msocket.io:client [0mwriting packet ["2[\"langChange\",{\"language\":\"ruby\",\"data\":\"WELCOME TO SPACECRAFT!\\n\\rirb(main):001:0> \"}]"] [33m+198ms[0m
2018-11-15T14:25:03.474392587Z    [34;1mengine:socket [0msending packet "message" (2["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]) [34m+22ms[0m
2018-11-15T14:25:03.474398182Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:03.474527652Z    [31;1mengine:polling [0mwriting "89:42["langChange",{"language":"ruby","data":"WELCOME TO SPACECRAFT!\n\rirb(main):001:0> "}]" [31m+4ms[0m
2018-11-15T14:25:03.493799303Z    [33;1mengine:ws [0mreceived "2probe" [33m+1s[0m
2018-11-15T14:25:03.493854246Z    [33;1mengine:ws [0mwriting "3probe" [33m+0ms[0m
2018-11-15T14:25:03.511536644Z    [35;1mengine [0mintercepting request for path "/socket.io/" [35m+41ms[0m
2018-11-15T14:25:03.511690883Z    [35;1mengine [0mhandling "GET" http request "/socket.io/?EIO=3&transport=polling&t=MSNmjG6&sid=DEflyucXzJNQ5nm4AAAG" [35m+0ms[0m
2018-11-15T14:25:03.511971269Z    [35;1mengine [0msetting new request for existing client [35m+0ms[0m
2018-11-15T14:25:03.512359013Z    [31;1mengine:polling [0msetting request [31m+38ms[0m
2018-11-15T14:25:03.512375507Z    [34;1mengine:socket [0mexecuting batch send callback [34m+38ms[0m
2018-11-15T14:25:03.594091096Z    [34;1mengine:socket [0mwriting a noop packet to polling for fast upgrade [34m+81ms[0m
2018-11-15T14:25:03.594122133Z    [31;1mengine:polling [0mwriting "1:6" [31m+81ms[0m
2018-11-15T14:25:03.625855871Z    [33;1mengine:ws [0mreceived "5" [33m+132ms[0m
2018-11-15T14:25:03.625884280Z    [34;1mengine:socket [0mgot upgrade packet - upgrading [34m+32ms[0m
2018-11-15T14:25:03.626171211Z    [31;1mengine:polling [0mclosing [31m+32ms[0m
2018-11-15T14:25:03.626187190Z    [31;1mengine:polling [0mtransport discarded - closing right away [31m+1ms[0m
2018-11-15T14:25:03.901950917Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+276ms[0m
2018-11-15T14:25:03.901980298Z    [34;1mengine:socket [0mpacket [34m+276ms[0m
2018-11-15T14:25:03.902302189Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+428ms[0m
2018-11-15T14:25:03.902684235Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+625ms[0m
2018-11-15T14:25:03.902718401Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:03.902723894Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:03.902807869Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+429ms[0m
2018-11-15T14:25:03.902814910Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:03.903024767Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:03.948467893Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+47ms[0m
2018-11-15T14:25:03.948497343Z    [34;1mengine:socket [0mpacket [34m+47ms[0m
2018-11-15T14:25:03.948755664Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+46ms[0m
2018-11-15T14:25:03.948930539Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+46ms[0m
2018-11-15T14:25:03.949248763Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:03.949281997Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+1ms[0m
2018-11-15T14:25:03.949294744Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+47ms[0m
2018-11-15T14:25:03.949379908Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:03.949394722Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:03.973906536Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+25ms[0m
2018-11-15T14:25:03.973942365Z    [34;1mengine:socket [0mpacket [34m+25ms[0m
2018-11-15T14:25:03.974027613Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+24ms[0m
2018-11-15T14:25:03.974276377Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+24ms[0m
2018-11-15T14:25:03.974428016Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+1ms[0m
2018-11-15T14:25:03.974500047Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:03.974693298Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+25ms[0m
2018-11-15T14:25:03.974876091Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:03.975048965Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:04.137005265Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+163ms[0m
2018-11-15T14:25:04.137034782Z    [34;1mengine:socket [0mpacket [34m+163ms[0m
2018-11-15T14:25:04.137350178Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+163ms[0m
2018-11-15T14:25:04.138602903Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+164ms[0m
2018-11-15T14:25:04.138616744Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:25:04.138621609Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:25:04.138625647Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+164ms[0m
2018-11-15T14:25:04.138629402Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:04.138633711Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
2018-11-15T14:25:04.143791957Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+7ms[0m
2018-11-15T14:25:04.143808794Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:04.143813405Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+5ms[0m
2018-11-15T14:25:04.143850354Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+5ms[0m
2018-11-15T14:25:04.143856113Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:25:04.143860242Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:25:04.143864047Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+5ms[0m
2018-11-15T14:25:04.143868004Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.143872228Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:25:04.190140215Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+44ms[0m
2018-11-15T14:25:04.190799800Z    [34;1mengine:socket [0mpacket [34m+47ms[0m
2018-11-15T14:25:04.191842354Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+48ms[0m
2018-11-15T14:25:04.192584564Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+49ms[0m
2018-11-15T14:25:04.193549950Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:25:04.193922260Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+1ms[0m
2018-11-15T14:25:04.194336118Z    [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+51ms[0m
2018-11-15T14:25:04.194738052Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+3ms[0m
2018-11-15T14:25:04.195113703Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
2018-11-15T14:25:04.321564159Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+133ms[0m
2018-11-15T14:25:04.321616392Z    [34;1mengine:socket [0mpacket [34m+131ms[0m
2018-11-15T14:25:04.321621799Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+127ms[0m
2018-11-15T14:25:04.321626911Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+128ms[0m
2018-11-15T14:25:04.321631172Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.321635176Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.321639013Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+127ms[0m
2018-11-15T14:25:04.321643024Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.321647467Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:04.327147794Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+6ms[0m
2018-11-15T14:25:04.327171128Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:04.327192219Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+5ms[0m
2018-11-15T14:25:04.327197730Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+5ms[0m
2018-11-15T14:25:04.327201757Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:25:04.327205437Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:25:04.327209047Z    [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+5ms[0m
2018-11-15T14:25:04.327212652Z    [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+853ms[0m
2018-11-15T14:25:04.327216348Z    [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
2018-11-15T14:25:04.327219717Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:04.327223260Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:04.327226836Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:04.327230197Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:04.327233511Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:04.327236901Z        return result !== '';
2018-11-15T14:25:04.327240125Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:04.327243332Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:04.327246748Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.327249892Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.327253055Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.327256247Z          if (condFunc()) {
2018-11-15T14:25:04.327259284Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.327262608Z            return resolve(value);
2018-11-15T14:25:04.327265797Z          }
2018-11-15T14:25:04.327268828Z          setTimeout(wait, interval);
2018-11-15T14:25:04.327271975Z        } [32m+0ms[0m
2018-11-15T14:25:04.327275168Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:04.327956531Z    [32;1mRepl [0m  [concatResult(data = 123123
2018-11-15T14:25:04.327966032Z  => 123123
2018-11-15T14:25:04.327969309Z  irb(main):002:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:04.327985152Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.327989096Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.327992246Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.327995547Z          if (condFunc()) {
2018-11-15T14:25:04.327998694Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.328002039Z            return resolve(value);
2018-11-15T14:25:04.328005173Z          }
2018-11-15T14:25:04.328008210Z          setTimeout(wait, interval);
2018-11-15T14:25:04.328011453Z        } [32m+0ms[0m
2018-11-15T14:25:04.328014904Z    [32;1mRepl [0m  [isDataReceived()] result: "123123
2018-11-15T14:25:04.328018201Z  => 123123
2018-11-15T14:25:04.328021274Z  irb(main):002:0> " [32m+0ms[0m
2018-11-15T14:25:04.328024604Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:04.328028153Z    [32;1mRepl [0m`let currResult = result` //==> "123123
2018-11-15T14:25:04.328031522Z  => 123123
2018-11-15T14:25:04.328034529Z  irb(main):002:0> " [32m+0ms[0m
2018-11-15T14:25:04.328037853Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:04.333521619Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:04.333541459Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:04.333546142Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:25:04.333550073Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:04.333575534Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:04.333579193Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:04.333582528Z        return result += data;
2018-11-15T14:25:04.333590630Z      })] [32m+0ms[0m
2018-11-15T14:25:04.333594132Z    [32;1mRepl [0m  resolve(result = "123123
2018-11-15T14:25:04.333597619Z  => 123123
2018-11-15T14:25:04.333600893Z  irb(main):002:0> ") [32m+0ms[0m
2018-11-15T14:25:04.333604623Z    [32;1mserver [0m  [emitOutput] output: 123123
2018-11-15T14:25:04.333608055Z  => 123123
2018-11-15T14:25:04.333611172Z  irb(main):002:0>  [32m+7ms[0m
2018-11-15T14:25:04.333614607Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:04.333630618Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}] [32m+0ms[0m
2018-11-15T14:25:04.333636113Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):002:0> \"}]"] [33m+859ms[0m
2018-11-15T14:25:04.333654421Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}]) [34m+7ms[0m
2018-11-15T14:25:04.333658752Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:04.333662302Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):002:0> "}]" [33m+7ms[0m
2018-11-15T14:25:04.490167619Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+156ms[0m
2018-11-15T14:25:04.490215436Z    [34;1mengine:socket [0mpacket [34m+156ms[0m
2018-11-15T14:25:04.490224471Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+156ms[0m
2018-11-15T14:25:04.490231897Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+163ms[0m
2018-11-15T14:25:04.490238333Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.490243753Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.490249156Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+156ms[0m
2018-11-15T14:25:04.490254447Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.490260423Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:04.495931785Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:25:04.495983143Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:04.495989836Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:04.495995044Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:04.495999271Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:04.496016889Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:04.496021108Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:04.496024745Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+162ms[0m
2018-11-15T14:25:04.496028362Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:04.496031753Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:04.496035342Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:04.496038883Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:04.496042322Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:04.496045724Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:04.496064097Z        return result !== '';
2018-11-15T14:25:04.496067518Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:04.496070788Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:04.496074244Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.496077644Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.496086265Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.496092164Z          if (condFunc()) {
2018-11-15T14:25:04.496096802Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.496102176Z            return resolve(value);
2018-11-15T14:25:04.496107982Z          }
2018-11-15T14:25:04.496112759Z          setTimeout(wait, interval);
2018-11-15T14:25:04.496124739Z        } [32m+0ms[0m
2018-11-15T14:25:04.496151755Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:04.496161888Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:04.496167546Z  irb(main):003:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:04.496172885Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.496178035Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.496183006Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.496187175Z          if (condFunc()) {
2018-11-15T14:25:04.496190324Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.496199323Z            return resolve(value);
2018-11-15T14:25:04.496202717Z          }
2018-11-15T14:25:04.496205786Z          setTimeout(wait, interval);
2018-11-15T14:25:04.496208941Z        } [32m+0ms[0m
2018-11-15T14:25:04.496212215Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:04.496231118Z  irb(main):003:0> " [32m+0ms[0m
2018-11-15T14:25:04.496234645Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:04.496238405Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:04.496241856Z  irb(main):003:0> " [32m+0ms[0m
2018-11-15T14:25:04.496245158Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:04.501566996Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:04.501595890Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:25:04.501630141Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:04.501636768Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:04.501642692Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:04.501648002Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:04.501651600Z        return result += data;
2018-11-15T14:25:04.501654864Z      })] [32m+0ms[0m
2018-11-15T14:25:04.501658221Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:04.501661573Z  irb(main):003:0> ") [32m+0ms[0m
2018-11-15T14:25:04.501665183Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:04.501668565Z  irb(main):003:0>  [32m+6ms[0m
2018-11-15T14:25:04.501671964Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:04.501678341Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):003:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):003:0> "}] [32m+0ms[0m
2018-11-15T14:25:04.501686122Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):003:0> \"}]"] [33m+168ms[0m
2018-11-15T14:25:04.501693005Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):003:0> "}]) [34m+7ms[0m
2018-11-15T14:25:04.501698506Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:04.501727845Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):003:0> "}]" [33m+7ms[0m
2018-11-15T14:25:04.655964732Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+154ms[0m
2018-11-15T14:25:04.656027801Z    [34;1mengine:socket [0mpacket [34m+154ms[0m
2018-11-15T14:25:04.656036461Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+154ms[0m
2018-11-15T14:25:04.656044534Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+160ms[0m
2018-11-15T14:25:04.656051733Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:04.656089748Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:04.656098087Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+154ms[0m
2018-11-15T14:25:04.656104495Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.656112189Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:04.664004573Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:25:04.664028854Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:04.664045088Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+7ms[0m
2018-11-15T14:25:04.664054576Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+7ms[0m
2018-11-15T14:25:04.664061073Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:04.664067113Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:04.664073070Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+7ms[0m
2018-11-15T14:25:04.664079184Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.664086791Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:04.664094217Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+1ms[0m
2018-11-15T14:25:04.664098379Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:25:04.664116355Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+0ms[0m
2018-11-15T14:25:04.664125017Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+0ms[0m
2018-11-15T14:25:04.664131273Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:04.664147437Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:04.664154287Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+1ms[0m
2018-11-15T14:25:04.664159680Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:04.664167589Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:04.664174056Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
2018-11-15T14:25:04.664180829Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:04.664187901Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
2018-11-15T14:25:04.664192378Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
2018-11-15T14:25:04.664195983Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.664199503Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.664202904Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+0ms[0m
2018-11-15T14:25:04.664206335Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.664210077Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:04.664365812Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
2018-11-15T14:25:04.664385632Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:04.664622692Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
2018-11-15T14:25:04.664847342Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
2018-11-15T14:25:04.665010951Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:04.665145308Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:04.665348730Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+2ms[0m
2018-11-15T14:25:04.665547464Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+164ms[0m
2018-11-15T14:25:04.665710968Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:25:04.666531417Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:04.666715520Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:04.666790458Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:04.666988853Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:04.667004365Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:04.667011613Z        return result !== '';
2018-11-15T14:25:04.667016986Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:04.667164386Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:04.667961099Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.667971137Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.667974813Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.667978314Z          if (condFunc()) {
2018-11-15T14:25:04.667981422Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.667984971Z            return resolve(value);
2018-11-15T14:25:04.668071293Z          }
2018-11-15T14:25:04.668087012Z          setTimeout(wait, interval);
2018-11-15T14:25:04.668093933Z        } [32m+0ms[0m
2018-11-15T14:25:04.668271941Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:04.668564884Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:25:04.668580369Z  => 123
2018-11-15T14:25:04.668586715Z  irb(main):004:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:04.668818967Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.668829082Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.668832509Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.668843959Z          if (condFunc()) {
2018-11-15T14:25:04.668847607Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.668856887Z            return resolve(value);
2018-11-15T14:25:04.668942547Z          }
2018-11-15T14:25:04.668956257Z          setTimeout(wait, interval);
2018-11-15T14:25:04.668962761Z        } [32m+0ms[0m
2018-11-15T14:25:04.669114238Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:25:04.669123399Z  => 123
2018-11-15T14:25:04.669126710Z  irb(main):004:0> " [32m+1ms[0m
2018-11-15T14:25:04.669355749Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:04.669571084Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:25:04.669584128Z  => 123
2018-11-15T14:25:04.669589870Z  irb(main):004:0> " [32m+0ms[0m
2018-11-15T14:25:04.669798307Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:04.675713811Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:04.675727958Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:04.675732350Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:25:04.675735971Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:04.675746204Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:04.675750057Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:04.675753475Z        return result += data;
2018-11-15T14:25:04.675756729Z      })] [32m+0ms[0m
2018-11-15T14:25:04.675760072Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:25:04.675763550Z  => 123
2018-11-15T14:25:04.675781487Z  irb(main):004:0> ") [32m+0ms[0m
2018-11-15T14:25:04.675785238Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:25:04.675788618Z  => 123
2018-11-15T14:25:04.675791750Z  irb(main):004:0>  [32m+10ms[0m
2018-11-15T14:25:04.675795129Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:25:04.675800054Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}] [32m+0ms[0m
2018-11-15T14:25:04.675811495Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):004:0> \"}]"] [33m+174ms[0m
2018-11-15T14:25:04.675816441Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}]) [34m+11ms[0m
2018-11-15T14:25:04.675820561Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:04.675824033Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):004:0> "}]" [33m+11ms[0m
2018-11-15T14:25:04.813070463Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+137ms[0m
2018-11-15T14:25:04.813116487Z    [34;1mengine:socket [0mpacket [34m+137ms[0m
2018-11-15T14:25:04.813122390Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+137ms[0m
2018-11-15T14:25:04.813127507Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+148ms[0m
2018-11-15T14:25:04.813131887Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.813136027Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.813139956Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+137ms[0m
2018-11-15T14:25:04.813143766Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.813147888Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:04.818401466Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:25:04.818425488Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:04.818429998Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:04.818434943Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:04.818439088Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:04.818442795Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:04.818446361Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:04.818449864Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+143ms[0m
2018-11-15T14:25:04.818467029Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:04.818470787Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:04.818474149Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:04.818477664Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:04.818481045Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:04.818484312Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:04.818487619Z        return result !== '';
2018-11-15T14:25:04.818490726Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:04.818493938Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:04.818497368Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.818500538Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.818503721Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.818506878Z          if (condFunc()) {
2018-11-15T14:25:04.818509926Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.818513301Z            return resolve(value);
2018-11-15T14:25:04.818516441Z          }
2018-11-15T14:25:04.818519458Z          setTimeout(wait, interval);
2018-11-15T14:25:04.818533285Z        } [32m+0ms[0m
2018-11-15T14:25:04.818536589Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:04.819016118Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:04.819025995Z  irb(main):005:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:04.819029613Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.819032909Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.819042073Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.819045736Z          if (condFunc()) {
2018-11-15T14:25:04.819048854Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.819052262Z            return resolve(value);
2018-11-15T14:25:04.819055339Z          }
2018-11-15T14:25:04.819058357Z          setTimeout(wait, interval);
2018-11-15T14:25:04.819061498Z        } [32m+0ms[0m
2018-11-15T14:25:04.819070750Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:04.819074427Z  irb(main):005:0> " [32m+0ms[0m
2018-11-15T14:25:04.819077726Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:04.819081389Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:04.819084869Z  irb(main):005:0> " [32m+0ms[0m
2018-11-15T14:25:04.819088190Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:04.824784098Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:04.824810285Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:04.824815050Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:04.824818947Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:04.824822680Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:04.824826375Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:04.824830135Z        return result += data;
2018-11-15T14:25:04.824833320Z      })] [32m+0ms[0m
2018-11-15T14:25:04.824854640Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:04.824858367Z  irb(main):005:0> ") [32m+0ms[0m
2018-11-15T14:25:04.824861866Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:04.824865280Z  irb(main):005:0>  [32m+6ms[0m
2018-11-15T14:25:04.824868774Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):005:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:04.824873616Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):005:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):005:0> "}] [32m+0ms[0m
2018-11-15T14:25:04.824878430Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):005:0> \"}]"] [33m+149ms[0m
2018-11-15T14:25:04.824882976Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):005:0> "}]) [34m+7ms[0m
2018-11-15T14:25:04.824887066Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:04.824890454Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):005:0> "}]" [33m+7ms[0m
2018-11-15T14:25:04.841913240Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+17ms[0m
2018-11-15T14:25:04.841949547Z    [34;1mengine:socket [0mpacket [34m+17ms[0m
2018-11-15T14:25:04.841986819Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+17ms[0m
2018-11-15T14:25:04.841992855Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+23ms[0m
2018-11-15T14:25:04.841996911Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:04.842000664Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:04.842004327Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+17ms[0m
2018-11-15T14:25:04.842007853Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.842011983Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:04.848865673Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+7ms[0m
2018-11-15T14:25:04.848893680Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:04.848906222Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+7ms[0m
2018-11-15T14:25:04.848911280Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+7ms[0m
2018-11-15T14:25:04.848915749Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:04.848919701Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:04.848923419Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+7ms[0m
2018-11-15T14:25:04.848927054Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.848931083Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:04.975549742Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+126ms[0m
2018-11-15T14:25:04.975577600Z    [34;1mengine:socket [0mpacket [34m+127ms[0m
2018-11-15T14:25:04.975582510Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+127ms[0m
2018-11-15T14:25:04.975587478Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+127ms[0m
2018-11-15T14:25:04.975629811Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.975634929Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:04.975638665Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+127ms[0m
2018-11-15T14:25:04.975642236Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:04.975646390Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:04.981846682Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+6ms[0m
2018-11-15T14:25:04.981881158Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:04.981886355Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+5ms[0m
2018-11-15T14:25:04.981891630Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+6ms[0m
2018-11-15T14:25:04.981895872Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:04.981899772Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:04.981903548Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+6ms[0m
2018-11-15T14:25:04.981907194Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+157ms[0m
2018-11-15T14:25:04.981910887Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
2018-11-15T14:25:04.981914348Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:04.981917805Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:04.981921328Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:04.981924677Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:04.981928058Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:04.981931441Z        return result !== '';
2018-11-15T14:25:04.981934642Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:04.981937853Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:04.981941350Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.981957676Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.981961265Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.981964444Z          if (condFunc()) {
2018-11-15T14:25:04.981967447Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.981970773Z            return resolve(value);
2018-11-15T14:25:04.981973950Z          }
2018-11-15T14:25:04.981977004Z          setTimeout(wait, interval);
2018-11-15T14:25:04.981980105Z        } [32m+0ms[0m
2018-11-15T14:25:04.981983705Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:04.982461362Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:25:04.982497561Z  => 12
2018-11-15T14:25:04.982504762Z  irb(main):006:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:04.982510273Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:04.982515810Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:04.982521210Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:04.982526466Z          if (condFunc()) {
2018-11-15T14:25:04.982531308Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:04.982536972Z            return resolve(value);
2018-11-15T14:25:04.982542005Z          }
2018-11-15T14:25:04.982546962Z          setTimeout(wait, interval);
2018-11-15T14:25:04.982552146Z        } [32m+0ms[0m
2018-11-15T14:25:04.982577991Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:25:04.982583793Z  => 12
2018-11-15T14:25:04.982588855Z  irb(main):006:0> " [32m+0ms[0m
2018-11-15T14:25:04.982594293Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:04.982600305Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:25:04.982606011Z  => 12
2018-11-15T14:25:04.982611003Z  irb(main):006:0> " [32m+0ms[0m
2018-11-15T14:25:04.982616394Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:04.988064011Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:04.988098122Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:04.988106126Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:04.988112342Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:04.988134089Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:04.988140576Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:04.988152305Z        return result += data;
2018-11-15T14:25:04.988155576Z      })] [32m+0ms[0m
2018-11-15T14:25:04.988158830Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:25:04.988162352Z  => 12
2018-11-15T14:25:04.988165592Z  irb(main):006:0> ") [32m+0ms[0m
2018-11-15T14:25:04.988168948Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:25:04.988172360Z  => 12
2018-11-15T14:25:04.988175388Z  irb(main):006:0>  [32m+6ms[0m
2018-11-15T14:25:04.988178830Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:04.988183665Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}] [32m+0ms[0m
2018-11-15T14:25:04.988188443Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):006:0> \"}]"] [33m+163ms[0m
2018-11-15T14:25:04.988193049Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}]) [34m+7ms[0m
2018-11-15T14:25:04.988197260Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:04.988200697Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):006:0> "}]" [33m+7ms[0m
2018-11-15T14:25:05.142036027Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+154ms[0m
2018-11-15T14:25:05.142065750Z    [34;1mengine:socket [0mpacket [34m+154ms[0m
2018-11-15T14:25:05.142070379Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+154ms[0m
2018-11-15T14:25:05.142075182Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+160ms[0m
2018-11-15T14:25:05.142079431Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.142083619Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.142087230Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+154ms[0m
2018-11-15T14:25:05.142090773Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:05.142123019Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:05.142471519Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+0ms[0m
2018-11-15T14:25:05.142481892Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:25:05.142495535Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
2018-11-15T14:25:05.142500157Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
2018-11-15T14:25:05.142541354Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:05.142545022Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:05.142548601Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
2018-11-15T14:25:05.142552070Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+155ms[0m
2018-11-15T14:25:05.142555692Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:05.142559102Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:05.142562582Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:05.142566072Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:05.142569419Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:05.142572679Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:05.142576016Z        return result !== '';
2018-11-15T14:25:05.142579119Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:05.142582399Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:05.142586174Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.142602344Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.142606131Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.142609319Z          if (condFunc()) {
2018-11-15T14:25:05.142612369Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.142615825Z            return resolve(value);
2018-11-15T14:25:05.142618958Z          }
2018-11-15T14:25:05.142628390Z          setTimeout(wait, interval);
2018-11-15T14:25:05.142631731Z        } [32m+0ms[0m
2018-11-15T14:25:05.142634911Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:05.147189299Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:05.147213495Z  irb(main):007:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:05.147218248Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.147221630Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.147224992Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.147244270Z          if (condFunc()) {
2018-11-15T14:25:05.147252972Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.147256646Z            return resolve(value);
2018-11-15T14:25:05.147259779Z          }
2018-11-15T14:25:05.147262836Z          setTimeout(wait, interval);
2018-11-15T14:25:05.147265884Z        } [32m+0ms[0m
2018-11-15T14:25:05.147273756Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:05.147277454Z  irb(main):007:0> " [32m+0ms[0m
2018-11-15T14:25:05.147280771Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:05.147295019Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:05.147298718Z  irb(main):007:0> " [32m+0ms[0m
2018-11-15T14:25:05.147302001Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:05.148574485Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:05.148607113Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:25:05.148612713Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:05.148616405Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:05.148620034Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:05.148623526Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:05.148626843Z        return result += data;
2018-11-15T14:25:05.148629992Z      })] [32m+0ms[0m
2018-11-15T14:25:05.148633226Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:05.148636433Z  irb(main):007:0> ") [32m+0ms[0m
2018-11-15T14:25:05.148639681Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:05.148655803Z  irb(main):007:0>  [32m+6ms[0m
2018-11-15T14:25:05.148659683Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):007:0> "}],"nsp":"/"} [32m+6ms[0m
2018-11-15T14:25:05.148664243Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):007:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):007:0> "}] [32m+0ms[0m
2018-11-15T14:25:05.148668851Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):007:0> \"}]"] [33m+161ms[0m
2018-11-15T14:25:05.148673120Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):007:0> "}]) [34m+7ms[0m
2018-11-15T14:25:05.148677309Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:05.148680634Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):007:0> "}]" [33m+7ms[0m
2018-11-15T14:25:05.347609701Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+198ms[0m
2018-11-15T14:25:05.347652945Z    [34;1mengine:socket [0mpacket [34m+199ms[0m
2018-11-15T14:25:05.347658876Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+199ms[0m
2018-11-15T14:25:05.347663855Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+205ms[0m
2018-11-15T14:25:05.347667874Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.347671792Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.347675483Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+199ms[0m
2018-11-15T14:25:05.347679127Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:05.347683228Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:25:05.455495391Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+108ms[0m
2018-11-15T14:25:05.455536116Z    [34;1mengine:socket [0mpacket [34m+107ms[0m
2018-11-15T14:25:05.461621711Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+111ms[0m
2018-11-15T14:25:05.461863536Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+114ms[0m
2018-11-15T14:25:05.462039162Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.462166398Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.462338487Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+115ms[0m
2018-11-15T14:25:05.462533358Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+4ms[0m
2018-11-15T14:25:05.462690930Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:05.462977133Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2"}]" [33m+8ms[0m
2018-11-15T14:25:05.463125605Z    [34;1mengine:socket [0mpacket [34m+8ms[0m
2018-11-15T14:25:05.463359901Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [32m+1ms[0m
2018-11-15T14:25:05.463546864Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [36m+2ms[0m
2018-11-15T14:25:05.463693760Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.463832229Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.463943230Z    [32;1mserver [0m  ["evaluate"] { code: 2 } [32m+1ms[0m
2018-11-15T14:25:05.464114847Z    [32;1mRepl [0m[bufferWrite(string = "2", bufferInterval = 5, write = true)] [32m+315ms[0m
2018-11-15T14:25:05.464250634Z    [32;1mRepl [0m  this.process.write('2' + '\n') [32m+1ms[0m
2018-11-15T14:25:05.464503420Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:05.464650259Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:05.464771629Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:05.464936274Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:05.464947740Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:05.464953557Z        return result !== '';
2018-11-15T14:25:05.464958557Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:05.465077938Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:05.465087692Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.465091162Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.465102224Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.465105755Z          if (condFunc()) {
2018-11-15T14:25:05.465108914Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.465112402Z            return resolve(value);
2018-11-15T14:25:05.465115627Z          }
2018-11-15T14:25:05.465118674Z          setTimeout(wait, interval);
2018-11-15T14:25:05.465121785Z        } [32m+0ms[0m
2018-11-15T14:25:05.465286457Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:05.465527315Z    [32;1mRepl [0m  [concatResult(data = 2
2018-11-15T14:25:05.465538240Z  )] result: "" [32m+0ms[0m
2018-11-15T14:25:05.465657492Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.465665678Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.465669114Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.465672347Z          if (condFunc()) {
2018-11-15T14:25:05.465675435Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.465679143Z            return resolve(value);
2018-11-15T14:25:05.465682412Z          }
2018-11-15T14:25:05.465685496Z          setTimeout(wait, interval);
2018-11-15T14:25:05.465688831Z        } [32m+0ms[0m
2018-11-15T14:25:05.465917834Z    [32;1mRepl [0m  [isDataReceived()] result: "2
2018-11-15T14:25:05.465930131Z  " [32m+0ms[0m
2018-11-15T14:25:05.465943849Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:05.466062571Z    [32;1mRepl [0m`let currResult = result` //==> "2
2018-11-15T14:25:05.466072718Z  " [32m+0ms[0m
2018-11-15T14:25:05.466076436Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:05.468544542Z    [32;1mRepl [0m  [concatResult(data = => 2
2018-11-15T14:25:05.468562500Z  irb(main):008:0> )] result: "2
2018-11-15T14:25:05.468570137Z  " [32m+3ms[0m
2018-11-15T14:25:05.470705672Z    [32;1mRepl [0m  [setInterval()] [32m+2ms[0m
2018-11-15T14:25:05.470919202Z    [32;1mRepl [0m    [currResult !== result --> return currResult = result] currResult: "2
2018-11-15T14:25:05.470930082Z  ", result: "2
2018-11-15T14:25:05.470933733Z  => 2
2018-11-15T14:25:05.470937036Z  irb(main):008:0> " [32m+0ms[0m
2018-11-15T14:25:05.476108567Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:05.476294716Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:25:05.476483099Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:05.476622056Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:05.476630709Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:05.476634389Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:05.476637669Z        return result += data;
2018-11-15T14:25:05.476640806Z      })] [32m+0ms[0m
2018-11-15T14:25:05.476818981Z    [32;1mRepl [0m  resolve(result = "2
2018-11-15T14:25:05.476828447Z  => 2
2018-11-15T14:25:05.476831752Z  irb(main):008:0> ") [32m+0ms[0m
2018-11-15T14:25:05.476994647Z    [32;1mserver [0m  [emitOutput] output: 2
2018-11-15T14:25:05.477003563Z  => 2
2018-11-15T14:25:05.477006884Z  irb(main):008:0>  [32m+13ms[0m
2018-11-15T14:25:05.477239265Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}],"nsp":"/"} [32m+14ms[0m
2018-11-15T14:25:05.477471844Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}],"nsp":"/"} as 2["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}] [32m+0ms[0m
2018-11-15T14:25:05.477662372Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2\\r\\n=> 2\\r\\nirb(main):008:0> \"}]"] [33m+329ms[0m
2018-11-15T14:25:05.477896005Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}]) [34m+15ms[0m
2018-11-15T14:25:05.477910222Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:05.478124658Z    [33;1mengine:ws [0mwriting "42["output",{"output":"2\r\n=> 2\r\nirb(main):008:0> "}]" [33m+15ms[0m
2018-11-15T14:25:05.613716450Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+136ms[0m
2018-11-15T14:25:05.613897443Z    [34;1mengine:socket [0mpacket [34m+136ms[0m
2018-11-15T14:25:05.614263137Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+136ms[0m
2018-11-15T14:25:05.614277332Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+151ms[0m
2018-11-15T14:25:05.614554989Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.614566040Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.614814943Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+138ms[0m
2018-11-15T14:25:05.614824946Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:05.616536204Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:05.619630979Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:05.619779489Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:05.620004509Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:05.620149656Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:05.620289748Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:05.620518184Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:05.620535434Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:05.620685869Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+144ms[0m
2018-11-15T14:25:05.620848524Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:05.621228975Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:05.627442435Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+7ms[0m
2018-11-15T14:25:05.627459478Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:05.627464019Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:05.627467796Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:05.627471364Z        return result !== '';
2018-11-15T14:25:05.627474609Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:05.627478459Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:05.627482007Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.627485217Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.627506091Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.627509869Z          if (condFunc()) {
2018-11-15T14:25:05.627512926Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.627516366Z            return resolve(value);
2018-11-15T14:25:05.627519639Z          }
2018-11-15T14:25:05.627522829Z          setTimeout(wait, interval);
2018-11-15T14:25:05.627525973Z        } [32m+0ms[0m
2018-11-15T14:25:05.627529086Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:05.627532600Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:05.627536049Z  irb(main):009:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:05.628706171Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.628721761Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.628735110Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.628739421Z          if (condFunc()) {
2018-11-15T14:25:05.628742565Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.628746091Z            return resolve(value);
2018-11-15T14:25:05.628753867Z          }
2018-11-15T14:25:05.628757292Z          setTimeout(wait, interval);
2018-11-15T14:25:05.628760464Z        } [32m+1ms[0m
2018-11-15T14:25:05.628767824Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:05.628771512Z  irb(main):009:0> " [32m+0ms[0m
2018-11-15T14:25:05.628774928Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:05.628778561Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:05.628781920Z  irb(main):009:0> " [32m+0ms[0m
2018-11-15T14:25:05.628785381Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:05.634310956Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:05.634361148Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:05.634371562Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:05.634377170Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:05.634382736Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:05.634387568Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:05.634406924Z        return result += data;
2018-11-15T14:25:05.634412843Z      })] [32m+0ms[0m
2018-11-15T14:25:05.634417810Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:05.634422803Z  irb(main):009:0> ") [32m+0ms[0m
2018-11-15T14:25:05.634447887Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:05.634454447Z  irb(main):009:0>  [32m+13ms[0m
2018-11-15T14:25:05.634459850Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):009:0> "}],"nsp":"/"} [32m+14ms[0m
2018-11-15T14:25:05.634467517Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):009:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):009:0> "}] [32m+0ms[0m
2018-11-15T14:25:05.634475280Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):009:0> \"}]"] [33m+156ms[0m
2018-11-15T14:25:05.634482396Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):009:0> "}]) [34m+14ms[0m
2018-11-15T14:25:05.634488924Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:05.634494750Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):009:0> "}]" [33m+14ms[0m
2018-11-15T14:25:05.781151636Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+147ms[0m
2018-11-15T14:25:05.781182716Z    [34;1mengine:socket [0mpacket [34m+147ms[0m
2018-11-15T14:25:05.781187441Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+147ms[0m
2018-11-15T14:25:05.781192302Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+160ms[0m
2018-11-15T14:25:05.781196518Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.781200465Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.781204079Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+147ms[0m
2018-11-15T14:25:05.781207743Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:05.781211857Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:25:05.786125620Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+5ms[0m
2018-11-15T14:25:05.786145609Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:05.786163401Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+5ms[0m
2018-11-15T14:25:05.786185958Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+5ms[0m
2018-11-15T14:25:05.786190126Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:05.786385434Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.786396296Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:25:05.786400162Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:05.786404485Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:05.786771676Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2"}]" [33m+1ms[0m
2018-11-15T14:25:05.786998801Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:05.787311043Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [32m+1ms[0m
2018-11-15T14:25:05.787548289Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2"}]} [36m+1ms[0m
2018-11-15T14:25:05.787835521Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.788041111Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.788275039Z    [32;1mserver [0m  ["evaluate"] { code: 2 } [32m+2ms[0m
2018-11-15T14:25:05.788543232Z    [32;1mRepl [0m[bufferWrite(string = "2", bufferInterval = 5, write = true)] [32m+155ms[0m
2018-11-15T14:25:05.788788773Z    [32;1mRepl [0m  this.process.write('2' + '\n') [32m+0ms[0m
2018-11-15T14:25:05.789408706Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:05.789420232Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:05.789442427Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:05.789446037Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:05.789449384Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:05.789452758Z        return result !== '';
2018-11-15T14:25:05.789467210Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:05.789477957Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:05.789629224Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.789641499Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.789645435Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.789654182Z          if (condFunc()) {
2018-11-15T14:25:05.789657976Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.789661656Z            return resolve(value);
2018-11-15T14:25:05.789664902Z          }
2018-11-15T14:25:05.789667984Z          setTimeout(wait, interval);
2018-11-15T14:25:05.789671139Z        } [32m+0ms[0m
2018-11-15T14:25:05.789823254Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:05.790091270Z    [32;1mRepl [0m  [concatResult(data = 2
2018-11-15T14:25:05.790101203Z  => 2
2018-11-15T14:25:05.790110459Z  irb(main):010:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:05.791434202Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.791445672Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.791449335Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.791452707Z          if (condFunc()) {
2018-11-15T14:25:05.791455826Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.791459300Z            return resolve(value);
2018-11-15T14:25:05.791462557Z          }
2018-11-15T14:25:05.791465717Z          setTimeout(wait, interval);
2018-11-15T14:25:05.791468885Z        } [32m+2ms[0m
2018-11-15T14:25:05.791649537Z    [32;1mRepl [0m  [isDataReceived()] result: "2
2018-11-15T14:25:05.791667858Z  => 2
2018-11-15T14:25:05.791672466Z  irb(main):010:0> " [32m+0ms[0m
2018-11-15T14:25:05.791835468Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:05.792026932Z    [32;1mRepl [0m`let currResult = result` //==> "2
2018-11-15T14:25:05.792035154Z  => 2
2018-11-15T14:25:05.792038344Z  irb(main):010:0> " [32m+0ms[0m
2018-11-15T14:25:05.792284348Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:25:05.797476100Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:05.797681455Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:05.798006105Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:05.798299621Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:05.798491915Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:05.798625684Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:05.798797316Z        return result += data;
2018-11-15T14:25:05.798954431Z      })] [32m+1ms[0m
2018-11-15T14:25:05.799184779Z    [32;1mRepl [0m  resolve(result = "2
2018-11-15T14:25:05.799337424Z  => 2
2018-11-15T14:25:05.799589702Z  irb(main):010:0> ") [32m+1ms[0m
2018-11-15T14:25:05.799852203Z    [32;1mserver [0m  [emitOutput] output: 2
2018-11-15T14:25:05.800038881Z  => 2
2018-11-15T14:25:05.800272302Z  irb(main):010:0>  [32m+11ms[0m
2018-11-15T14:25:05.800541073Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}],"nsp":"/"} [32m+13ms[0m
2018-11-15T14:25:05.800816167Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}],"nsp":"/"} as 2["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}] [32m+0ms[0m
2018-11-15T14:25:05.801129652Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2\\r\\n=> 2\\r\\nirb(main):010:0> \"}]"] [33m+167ms[0m
2018-11-15T14:25:05.801399485Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}]) [34m+15ms[0m
2018-11-15T14:25:05.801628510Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:05.801859100Z    [33;1mengine:ws [0mwriting "42["output",{"output":"2\r\n=> 2\r\nirb(main):010:0> "}]" [33m+15ms[0m
2018-11-15T14:25:05.922428723Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+121ms[0m
2018-11-15T14:25:05.922718827Z    [34;1mengine:socket [0mpacket [34m+121ms[0m
2018-11-15T14:25:05.923098854Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+122ms[0m
2018-11-15T14:25:05.923329766Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+136ms[0m
2018-11-15T14:25:05.923542027Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.923728320Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:05.923906868Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+124ms[0m
2018-11-15T14:25:05.924166435Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+2ms[0m
2018-11-15T14:25:05.924404321Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:05.928447796Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:05.928779853Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:05.929089635Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
2018-11-15T14:25:05.929366675Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:05.929571480Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:05.929779988Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:05.929958868Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:05.930268819Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+131ms[0m
2018-11-15T14:25:05.930764903Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:05.930775920Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:05.930780283Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:05.930883346Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:05.931172588Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:05.931269799Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:05.931363004Z        return result !== '';
2018-11-15T14:25:05.931543368Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:05.931818001Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:05.932022835Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.932109338Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.932223591Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.932353905Z          if (condFunc()) {
2018-11-15T14:25:05.932448048Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.932649020Z            return resolve(value);
2018-11-15T14:25:05.932746663Z          }
2018-11-15T14:25:05.932947871Z          setTimeout(wait, interval);
2018-11-15T14:25:05.933041920Z        } [32m+0ms[0m
2018-11-15T14:25:05.933272564Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+2ms[0m
2018-11-15T14:25:05.933626685Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:05.933867826Z  irb(main):011:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:05.934185584Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:05.934341254Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:05.934464378Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:05.934572052Z          if (condFunc()) {
2018-11-15T14:25:05.934666471Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:05.934778506Z            return resolve(value);
2018-11-15T14:25:05.934888666Z          }
2018-11-15T14:25:05.935125505Z          setTimeout(wait, interval);
2018-11-15T14:25:05.935473156Z        } [32m+0ms[0m
2018-11-15T14:25:05.935485366Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:05.935551828Z  irb(main):011:0> " [32m+2ms[0m
2018-11-15T14:25:05.935555573Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:05.935559352Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:05.935562901Z  irb(main):011:0> " [32m+0ms[0m
2018-11-15T14:25:05.935566269Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:05.940651323Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:05.941419447Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:05.941504282Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:05.941509346Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:05.941541751Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:05.941546249Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:05.941549559Z        return result += data;
2018-11-15T14:25:05.941564037Z      })] [32m+0ms[0m
2018-11-15T14:25:05.941567882Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:05.941571282Z  irb(main):011:0> ") [32m+0ms[0m
2018-11-15T14:25:05.941574630Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:05.941578027Z  irb(main):011:0>  [32m+11ms[0m
2018-11-15T14:25:05.941764538Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):011:0> "}],"nsp":"/"} [32m+13ms[0m
2018-11-15T14:25:05.941969458Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):011:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):011:0> "}] [32m+0ms[0m
2018-11-15T14:25:05.942492898Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):011:0> \"}]"] [33m+142ms[0m
2018-11-15T14:25:05.942564629Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):011:0> "}]) [34m+14ms[0m
2018-11-15T14:25:05.942572989Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:05.942576488Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):011:0> "}]" [33m+14ms[0m
2018-11-15T14:25:05.944666459Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2"}]" [33m+2ms[0m
2018-11-15T14:25:05.944865855Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:25:05.945246527Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [32m+4ms[0m
2018-11-15T14:25:05.945482215Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2"}]} [36m+16ms[0m
2018-11-15T14:25:05.945653123Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.945960649Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2"}] [36m+0ms[0m
2018-11-15T14:25:05.946128823Z    [32;1mserver [0m  ["lineChanged"] { line: 2 } [32m+6ms[0m
2018-11-15T14:25:05.946465648Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:05.946605487Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2"}],"nsp":"/"} as 2["syncLine",{"line":"2"}] [32m+0ms[0m
2018-11-15T14:25:06.021515012Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"21"}]" [33m+77ms[0m
2018-11-15T14:25:06.021740298Z    [34;1mengine:socket [0mpacket [34m+77ms[0m
2018-11-15T14:25:06.022015828Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"21"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [32m+75ms[0m
2018-11-15T14:25:06.022245815Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"21"}]} [36m+77ms[0m
2018-11-15T14:25:06.022431251Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:25:06.022597130Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"21"}] [36m+0ms[0m
2018-11-15T14:25:06.022762988Z    [32;1mserver [0m  ["lineChanged"] { line: 21 } [32m+76ms[0m
2018-11-15T14:25:06.022962936Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:06.023142006Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"21"}],"nsp":"/"} as 2["syncLine",{"line":"21"}] [32m+1ms[0m
2018-11-15T14:25:06.027908195Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"213"}]" [33m+6ms[0m
2018-11-15T14:25:06.028063778Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:06.028305547Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"213"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [32m+5ms[0m
2018-11-15T14:25:06.028547954Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"213"}]} [36m+6ms[0m
2018-11-15T14:25:06.028778587Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"213"}] [36m+0ms[0m
2018-11-15T14:25:06.028972712Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"213"}] [36m+0ms[0m
2018-11-15T14:25:06.029173428Z    [32;1mserver [0m  ["lineChanged"] { line: 213 } [32m+7ms[0m
2018-11-15T14:25:06.029362718Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:06.029569498Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"213"}],"nsp":"/"} as 2["syncLine",{"line":"213"}] [32m+0ms[0m
2018-11-15T14:25:06.205651629Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"2133"}]" [33m+178ms[0m
2018-11-15T14:25:06.205879417Z    [34;1mengine:socket [0mpacket [34m+178ms[0m
2018-11-15T14:25:06.206099338Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"2133"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"2133"}]} [32m+176ms[0m
2018-11-15T14:25:06.206295658Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"2133"}]} [36m+178ms[0m
2018-11-15T14:25:06.206326522Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"2133"}] [36m+0ms[0m
2018-11-15T14:25:06.206406844Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"2133"}] [36m+0ms[0m
2018-11-15T14:25:06.206483990Z    [32;1mserver [0m  ["lineChanged"] { line: 2133 } [32m+177ms[0m
2018-11-15T14:25:06.206657881Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"2133"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:06.206753480Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"2133"}],"nsp":"/"} as 2["syncLine",{"line":"2133"}] [32m+0ms[0m
2018-11-15T14:25:06.335857293Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+130ms[0m
2018-11-15T14:25:06.335913021Z    [34;1mengine:socket [0mpacket [34m+130ms[0m
2018-11-15T14:25:06.336049742Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+129ms[0m
2018-11-15T14:25:06.336365885Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+130ms[0m
2018-11-15T14:25:06.336380229Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:06.336390344Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:06.336523669Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+130ms[0m
2018-11-15T14:25:06.336533968Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:06.336654455Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:06.341511909Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"2133"}]" [33m+6ms[0m
2018-11-15T14:25:06.341609384Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:06.341848714Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"2133"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"2133"}]} [32m+5ms[0m
2018-11-15T14:25:06.342025491Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"2133"}]} [36m+5ms[0m
2018-11-15T14:25:06.342125795Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"2133"}] [36m+0ms[0m
2018-11-15T14:25:06.342238194Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"2133"}] [36m+1ms[0m
2018-11-15T14:25:06.342326537Z    [32;1mserver [0m  ["evaluate"] { code: 2133 } [32m+6ms[0m
2018-11-15T14:25:06.342495860Z    [32;1mRepl [0m[bufferWrite(string = "2133", bufferInterval = 5, write = true)] [32m+402ms[0m
2018-11-15T14:25:06.342692689Z    [32;1mRepl [0m  this.process.write('2133' + '\n') [32m+0ms[0m
2018-11-15T14:25:06.342806540Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:06.343623082Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:06.343637559Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:06.343643320Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:06.343648500Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:06.343653866Z        return result !== '';
2018-11-15T14:25:06.343658701Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:06.343663935Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:06.343669314Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:06.343674475Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:06.343679403Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:06.343684672Z          if (condFunc()) {
2018-11-15T14:25:06.343700945Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:06.343707144Z            return resolve(value);
2018-11-15T14:25:06.343712212Z          }
2018-11-15T14:25:06.343717439Z          setTimeout(wait, interval);
2018-11-15T14:25:06.343723043Z        } [32m+0ms[0m
2018-11-15T14:25:06.343732428Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:06.343738719Z    [32;1mRepl [0m  [concatResult(data = 2133
2018-11-15T14:25:06.343744084Z  )] result: "" [32m+0ms[0m
2018-11-15T14:25:06.344278210Z    [32;1mRepl [0m  [concatResult(data = => 2133
2018-11-15T14:25:06.344294072Z  irb(main):012:0> )] result: "2133
2018-11-15T14:25:06.344299989Z  " [32m+0ms[0m
2018-11-15T14:25:06.344304908Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:06.344360698Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:06.344389348Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:06.344394778Z          if (condFunc()) {
2018-11-15T14:25:06.344399259Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:06.344439060Z            return resolve(value);
2018-11-15T14:25:06.344446455Z          }
2018-11-15T14:25:06.344451429Z          setTimeout(wait, interval);
2018-11-15T14:25:06.344456588Z        } [32m+0ms[0m
2018-11-15T14:25:06.344461735Z    [32;1mRepl [0m  [isDataReceived()] result: "2133
2018-11-15T14:25:06.344467199Z  => 2133
2018-11-15T14:25:06.344472182Z  irb(main):012:0> " [32m+1ms[0m
2018-11-15T14:25:06.344477543Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:06.344483385Z    [32;1mRepl [0m`let currResult = result` //==> "2133
2018-11-15T14:25:06.344488866Z  => 2133
2018-11-15T14:25:06.344493833Z  irb(main):012:0> " [32m+0ms[0m
2018-11-15T14:25:06.344499193Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:06.350069605Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:06.350095035Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:06.350123151Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:06.350130601Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:06.350136129Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:06.350141746Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:06.350147077Z        return result += data;
2018-11-15T14:25:06.350152245Z      })] [32m+0ms[0m
2018-11-15T14:25:06.350157456Z    [32;1mRepl [0m  resolve(result = "2133
2018-11-15T14:25:06.350162994Z  => 2133
2018-11-15T14:25:06.350168071Z  irb(main):012:0> ") [32m+0ms[0m
2018-11-15T14:25:06.350173529Z    [32;1mserver [0m  [emitOutput] output: 2133
2018-11-15T14:25:06.350178874Z  => 2133
2018-11-15T14:25:06.350184001Z  irb(main):012:0>  [32m+7ms[0m
2018-11-15T14:25:06.350208438Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:06.350217201Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}],"nsp":"/"} as 2["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}] [32m+0ms[0m
2018-11-15T14:25:06.350225226Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"2133\\r\\n=> 2133\\r\\nirb(main):012:0> \"}]"] [33m+407ms[0m
2018-11-15T14:25:06.350244604Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}]) [34m+8ms[0m
2018-11-15T14:25:06.350251545Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:06.350257231Z    [33;1mengine:ws [0mwriting "42["output",{"output":"2133\r\n=> 2133\r\nirb(main):012:0> "}]" [33m+8ms[0m
2018-11-15T14:25:06.996243114Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+646ms[0m
2018-11-15T14:25:06.996322025Z    [34;1mengine:socket [0mpacket [34m+646ms[0m
2018-11-15T14:25:06.996327514Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+646ms[0m
2018-11-15T14:25:06.996332357Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+653ms[0m
2018-11-15T14:25:06.996336561Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:06.996340466Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:06.996344247Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+646ms[0m
2018-11-15T14:25:06.996348237Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:06.996352522Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.002229410Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:25:07.002280201Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.002288895Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:25:07.002295959Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.002301963Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.002317145Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.002323571Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:07.002329058Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+652ms[0m
2018-11-15T14:25:07.002334495Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.002374049Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.002380658Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.002385974Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.002391011Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.002396178Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.002401201Z        return result !== '';
2018-11-15T14:25:07.002405977Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.002410969Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.002416495Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.002421230Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.002426228Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.002447900Z          if (condFunc()) {
2018-11-15T14:25:07.002453564Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.002458579Z            return resolve(value);
2018-11-15T14:25:07.002463211Z          }
2018-11-15T14:25:07.002467778Z          setTimeout(wait, interval);
2018-11-15T14:25:07.002472255Z        } [32m+0ms[0m
2018-11-15T14:25:07.002476960Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.002482102Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.002486924Z  irb(main):013:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.002491924Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.002496625Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.002502489Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.002507308Z          if (condFunc()) {
2018-11-15T14:25:07.002511997Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.002536467Z            return resolve(value);
2018-11-15T14:25:07.002541843Z          }
2018-11-15T14:25:07.002546759Z          setTimeout(wait, interval);
2018-11-15T14:25:07.002551549Z        } [32m+0ms[0m
2018-11-15T14:25:07.002556166Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.002561160Z  irb(main):013:0> " [32m+0ms[0m
2018-11-15T14:25:07.002573417Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:25:07.002580019Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.002584971Z  irb(main):013:0> " [32m+0ms[0m
2018-11-15T14:25:07.002589968Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.007971267Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.007988255Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.007992794Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.007996343Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.007999781Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.008003297Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.008006642Z        return result += data;
2018-11-15T14:25:07.008047829Z      })] [32m+0ms[0m
2018-11-15T14:25:07.008052603Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.008055951Z  irb(main):013:0> ") [32m+0ms[0m
2018-11-15T14:25:07.008059378Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.008062722Z  irb(main):013:0>  [32m+6ms[0m
2018-11-15T14:25:07.008066176Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):013:0> "}],"nsp":"/"} [32m+6ms[0m
2018-11-15T14:25:07.008070848Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):013:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):013:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.008075477Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):013:0> \"}]"] [33m+658ms[0m
2018-11-15T14:25:07.008079806Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):013:0> "}]) [34m+7ms[0m
2018-11-15T14:25:07.008083975Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.008087338Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):013:0> "}]" [33m+7ms[0m
2018-11-15T14:25:07.043973037Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+36ms[0m
2018-11-15T14:25:07.044060518Z    [34;1mengine:socket [0mpacket [34m+36ms[0m
2018-11-15T14:25:07.044067282Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+36ms[0m
2018-11-15T14:25:07.044102598Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+42ms[0m
2018-11-15T14:25:07.044108386Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.044112187Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.044115802Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+36ms[0m
2018-11-15T14:25:07.044119314Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.044123514Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.050409397Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:25:07.050435090Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.050439993Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:25:07.050486819Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.050491168Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.050495007Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.050498839Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:07.050502397Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+42ms[0m
2018-11-15T14:25:07.050505980Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.050509567Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.050513004Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.050516540Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.050520244Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.050536698Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.050541081Z        return result !== '';
2018-11-15T14:25:07.050544250Z      }, interval = 1, value = undefined)] [32m+1ms[0m
2018-11-15T14:25:07.050547539Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.050562890Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.050566455Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.050569564Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.050572773Z          if (condFunc()) {
2018-11-15T14:25:07.050575939Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.050579350Z            return resolve(value);
2018-11-15T14:25:07.050582533Z          }
2018-11-15T14:25:07.050585596Z          setTimeout(wait, interval);
2018-11-15T14:25:07.050588810Z        } [32m+0ms[0m
2018-11-15T14:25:07.050591994Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.050595437Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.050598639Z  irb(main):014:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.051712127Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.051724959Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.051728872Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.051732335Z          if (condFunc()) {
2018-11-15T14:25:07.051735613Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.051739210Z            return resolve(value);
2018-11-15T14:25:07.051742356Z          }
2018-11-15T14:25:07.051745442Z          setTimeout(wait, interval);
2018-11-15T14:25:07.051748643Z        } [32m+1ms[0m
2018-11-15T14:25:07.051751832Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.051755138Z  irb(main):014:0> " [32m+0ms[0m
2018-11-15T14:25:07.051774355Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.051779245Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.051782637Z  irb(main):014:0> " [32m+0ms[0m
2018-11-15T14:25:07.051785933Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.057499941Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.057525702Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.057533147Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.057591299Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.057612259Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.057619705Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.057645585Z        return result += data;
2018-11-15T14:25:07.057652301Z      })] [32m+0ms[0m
2018-11-15T14:25:07.057657481Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.057662712Z  irb(main):014:0> ") [32m+0ms[0m
2018-11-15T14:25:07.057667825Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.057671282Z  irb(main):014:0>  [32m+8ms[0m
2018-11-15T14:25:07.057674744Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):014:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:07.057679442Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):014:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):014:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.057684125Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):014:0> \"}]"] [33m+50ms[0m
2018-11-15T14:25:07.057688508Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):014:0> "}]) [34m+9ms[0m
2018-11-15T14:25:07.057692500Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.057696047Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):014:0> "}]" [33m+9ms[0m
2018-11-15T14:25:07.075922940Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+17ms[0m
2018-11-15T14:25:07.075979805Z    [34;1mengine:socket [0mpacket [34m+18ms[0m
2018-11-15T14:25:07.075990110Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+18ms[0m
2018-11-15T14:25:07.075997648Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+26ms[0m
2018-11-15T14:25:07.076005835Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.076012163Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.076018352Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+18ms[0m
2018-11-15T14:25:07.076024483Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.076031046Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.081084801Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.081103967Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.081108555Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.081113142Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:07.081117236Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.081121081Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.081161574Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.081166935Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+24ms[0m
2018-11-15T14:25:07.081170788Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.081416331Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.081550373Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.081880972Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.081891294Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.081895049Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.081898443Z        return result !== '';
2018-11-15T14:25:07.081901764Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.081905155Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.082372053Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.082385933Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.082391515Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.082394990Z          if (condFunc()) {
2018-11-15T14:25:07.082398310Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.082401857Z            return resolve(value);
2018-11-15T14:25:07.082405044Z          }
2018-11-15T14:25:07.082408058Z          setTimeout(wait, interval);
2018-11-15T14:25:07.082444415Z        } [32m+0ms[0m
2018-11-15T14:25:07.082449219Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:07.082464926Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.082468739Z  irb(main):015:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.083754807Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.083766562Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.083770606Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.083773972Z          if (condFunc()) {
2018-11-15T14:25:07.083777042Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.083780551Z            return resolve(value);
2018-11-15T14:25:07.083783759Z          }
2018-11-15T14:25:07.083786724Z          setTimeout(wait, interval);
2018-11-15T14:25:07.083789856Z        } [32m+1ms[0m
2018-11-15T14:25:07.083793027Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.083796430Z  irb(main):015:0> " [32m+0ms[0m
2018-11-15T14:25:07.083799915Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.083823046Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.083828384Z  irb(main):015:0> " [32m+0ms[0m
2018-11-15T14:25:07.083834291Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.089286098Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.089315189Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.089320153Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.089339168Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.089343890Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.089347615Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.089350965Z        return result += data;
2018-11-15T14:25:07.089354093Z      })] [32m+1ms[0m
2018-11-15T14:25:07.089357523Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.089360883Z  irb(main):015:0> ") [32m+0ms[0m
2018-11-15T14:25:07.089364168Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.089367493Z  irb(main):015:0>  [32m+9ms[0m
2018-11-15T14:25:07.089370891Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):015:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:07.089390328Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):015:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):015:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.089969285Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):015:0> \"}]"] [33m+32ms[0m
2018-11-15T14:25:07.089982359Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):015:0> "}]) [34m+9ms[0m
2018-11-15T14:25:07.089986931Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.089990359Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):015:0> "}]" [33m+9ms[0m
2018-11-15T14:25:07.115727507Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+26ms[0m
2018-11-15T14:25:07.115756067Z    [34;1mengine:socket [0mpacket [34m+26ms[0m
2018-11-15T14:25:07.116105199Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+26ms[0m
2018-11-15T14:25:07.116117271Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+35ms[0m
2018-11-15T14:25:07.116570508Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.116582278Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.116586670Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+27ms[0m
2018-11-15T14:25:07.116883097Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.116893651Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.120801415Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:25:07.120816000Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.120820706Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
2018-11-15T14:25:07.121288234Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
2018-11-15T14:25:07.121302712Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:07.121307411Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.121329037Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.121367059Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+32ms[0m
2018-11-15T14:25:07.121371162Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.122125036Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.122467608Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:07.122478555Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.122482386Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.122485912Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.122489489Z        return result !== '';
2018-11-15T14:25:07.122492627Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.122495965Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.122866609Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.122876428Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.122879850Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.122883156Z          if (condFunc()) {
2018-11-15T14:25:07.122887267Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.122892610Z            return resolve(value);
2018-11-15T14:25:07.122897321Z          }
2018-11-15T14:25:07.122903090Z          setTimeout(wait, interval);
2018-11-15T14:25:07.122908135Z        } [32m+0ms[0m
2018-11-15T14:25:07.122913231Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.123182744Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.123192128Z  irb(main):016:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.124721799Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.124737186Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.124741658Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.124745316Z          if (condFunc()) {
2018-11-15T14:25:07.124748548Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.124752084Z            return resolve(value);
2018-11-15T14:25:07.124755280Z          }
2018-11-15T14:25:07.124804471Z          setTimeout(wait, interval);
2018-11-15T14:25:07.124824327Z        } [32m+2ms[0m
2018-11-15T14:25:07.124830660Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.124836072Z  irb(main):016:0> " [32m+0ms[0m
2018-11-15T14:25:07.124841395Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.124847158Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.124852545Z  irb(main):016:0> " [32m+0ms[0m
2018-11-15T14:25:07.124900622Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.130321187Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.130343834Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.130352199Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.130413421Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.130420008Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.130425461Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.130430519Z        return result += data;
2018-11-15T14:25:07.130435336Z      })] [32m+0ms[0m
2018-11-15T14:25:07.130440453Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.130474124Z  irb(main):016:0> ") [32m+1ms[0m
2018-11-15T14:25:07.130482135Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.130487527Z  irb(main):016:0>  [32m+9ms[0m
2018-11-15T14:25:07.131091794Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):016:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:25:07.131105819Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):016:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):016:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.131111223Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):016:0> \"}]"] [33m+41ms[0m
2018-11-15T14:25:07.131115502Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):016:0> "}]) [34m+10ms[0m
2018-11-15T14:25:07.131119579Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.131122968Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):016:0> "}]" [33m+10ms[0m
2018-11-15T14:25:07.155631100Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+24ms[0m
2018-11-15T14:25:07.155690155Z    [34;1mengine:socket [0mpacket [34m+25ms[0m
2018-11-15T14:25:07.155975983Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
2018-11-15T14:25:07.156376118Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
2018-11-15T14:25:07.156387688Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.156391894Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.156395773Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
2018-11-15T14:25:07.156696177Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.156707117Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.160932638Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.160947792Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.160952339Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
2018-11-15T14:25:07.160957176Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
2018-11-15T14:25:07.160961314Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.160965099Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.160968997Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+4ms[0m
2018-11-15T14:25:07.160972590Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+30ms[0m
2018-11-15T14:25:07.160976371Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.161475032Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.161777188Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.161787635Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.162176897Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.162191132Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.162209164Z        return result !== '';
2018-11-15T14:25:07.162214811Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.162245672Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.162251255Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.162256112Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.162260396Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.162265211Z          if (condFunc()) {
2018-11-15T14:25:07.162269945Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.162275214Z            return resolve(value);
2018-11-15T14:25:07.162279888Z          }
2018-11-15T14:25:07.162284411Z          setTimeout(wait, interval);
2018-11-15T14:25:07.162289493Z        } [32m+0ms[0m
2018-11-15T14:25:07.162692113Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:07.162702264Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.162705926Z  irb(main):017:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.164127379Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.164138787Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.164142581Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.164145958Z          if (condFunc()) {
2018-11-15T14:25:07.164149077Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.164152581Z            return resolve(value);
2018-11-15T14:25:07.164155750Z          }
2018-11-15T14:25:07.164159018Z          setTimeout(wait, interval);
2018-11-15T14:25:07.164162190Z        } [32m+1ms[0m
2018-11-15T14:25:07.164165408Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.164168760Z  irb(main):017:0> " [32m+0ms[0m
2018-11-15T14:25:07.164172443Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.164208907Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.164212392Z  irb(main):017:0> " [32m+0ms[0m
2018-11-15T14:25:07.164215736Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:25:07.169651502Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.169675494Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.169680249Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.169683784Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.169687324Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.169690962Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.169712945Z        return result += data;
2018-11-15T14:25:07.169716375Z      })] [32m+0ms[0m
2018-11-15T14:25:07.169719724Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.169723098Z  irb(main):017:0> ") [32m+0ms[0m
2018-11-15T14:25:07.169726604Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.169729956Z  irb(main):017:0>  [32m+9ms[0m
2018-11-15T14:25:07.170342637Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):017:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:07.170355290Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):017:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):017:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.170360528Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):017:0> \"}]"] [33m+39ms[0m
2018-11-15T14:25:07.170365136Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):017:0> "}]) [34m+10ms[0m
2018-11-15T14:25:07.170369242Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.170372778Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):017:0> "}]" [33m+10ms[0m
2018-11-15T14:25:07.195497785Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+25ms[0m
2018-11-15T14:25:07.195803177Z    [34;1mengine:socket [0mpacket [34m+25ms[0m
2018-11-15T14:25:07.196299773Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+27ms[0m
2018-11-15T14:25:07.196749273Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+36ms[0m
2018-11-15T14:25:07.196762009Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.196766791Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.196770823Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+27ms[0m
2018-11-15T14:25:07.197123226Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.197134626Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.200641206Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:25:07.200658254Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.200662712Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
2018-11-15T14:25:07.200667455Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
2018-11-15T14:25:07.201282573Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.201294193Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.201300174Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+4ms[0m
2018-11-15T14:25:07.201305770Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+31ms[0m
2018-11-15T14:25:07.201312244Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.201814815Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.202142768Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.202152484Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.202156288Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.202159673Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.202163014Z        return result !== '';
2018-11-15T14:25:07.202166364Z      }, interval = 1, value = undefined)] [32m+1ms[0m
2018-11-15T14:25:07.202169712Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.202314488Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.202766000Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.202775627Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.202779250Z          if (condFunc()) {
2018-11-15T14:25:07.202782483Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.202800155Z            return resolve(value);
2018-11-15T14:25:07.202803849Z          }
2018-11-15T14:25:07.202806917Z          setTimeout(wait, interval);
2018-11-15T14:25:07.202810179Z        } [32m+0ms[0m
2018-11-15T14:25:07.202813461Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.202889034Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.202895161Z  irb(main):018:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.204129533Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.204141118Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.204144843Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.204148147Z          if (condFunc()) {
2018-11-15T14:25:07.204151358Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.204154858Z            return resolve(value);
2018-11-15T14:25:07.204158059Z          }
2018-11-15T14:25:07.204161083Z          setTimeout(wait, interval);
2018-11-15T14:25:07.204164315Z        } [32m+1ms[0m
2018-11-15T14:25:07.204167493Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.204170879Z  irb(main):018:0> " [32m+0ms[0m
2018-11-15T14:25:07.204174279Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.204177960Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.204203056Z  irb(main):018:0> " [32m+0ms[0m
2018-11-15T14:25:07.204206719Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:25:07.209653071Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.209670806Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.209675273Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.209679057Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.209796891Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.209806012Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.209809608Z        return result += data;
2018-11-15T14:25:07.209812926Z      })] [32m+0ms[0m
2018-11-15T14:25:07.209816478Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.209819808Z  irb(main):018:0> ") [32m+0ms[0m
2018-11-15T14:25:07.209834580Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.209838499Z  irb(main):018:0>  [32m+9ms[0m
2018-11-15T14:25:07.210337076Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:07.210349088Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):018:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):018:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.210354245Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):018:0> \"}]"] [33m+40ms[0m
2018-11-15T14:25:07.210358595Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):018:0> "}]) [34m+10ms[0m
2018-11-15T14:25:07.210363673Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.210369203Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):018:0> "}]" [33m+10ms[0m
2018-11-15T14:25:07.239009366Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+28ms[0m
2018-11-15T14:25:07.239425701Z    [34;1mengine:socket [0mpacket [34m+28ms[0m
2018-11-15T14:25:07.239794935Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+30ms[0m
2018-11-15T14:25:07.240270911Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+39ms[0m
2018-11-15T14:25:07.240284172Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.240424867Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.240431636Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+31ms[0m
2018-11-15T14:25:07.241031612Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.241043689Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.241681025Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+3ms[0m
2018-11-15T14:25:07.242066643Z    [34;1mengine:socket [0mpacket [34m+3ms[0m
2018-11-15T14:25:07.242461079Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+2ms[0m
2018-11-15T14:25:07.242919062Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+2ms[0m
2018-11-15T14:25:07.242943473Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.242948351Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.242952500Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+2ms[0m
2018-11-15T14:25:07.243035828Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
2018-11-15T14:25:07.243072035Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.243733697Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.244177702Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.244188548Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.244192302Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.244195782Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.244199321Z        return result !== '';
2018-11-15T14:25:07.244202537Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.244205908Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.244349889Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.244356589Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.244362502Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.244367057Z          if (condFunc()) {
2018-11-15T14:25:07.244372029Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.244377294Z            return resolve(value);
2018-11-15T14:25:07.244382956Z          }
2018-11-15T14:25:07.244415510Z          setTimeout(wait, interval);
2018-11-15T14:25:07.244422022Z        } [32m+1ms[0m
2018-11-15T14:25:07.244800591Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.244813109Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.244818486Z  irb(main):019:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.246320388Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.246338942Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.246346266Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.246486529Z          if (condFunc()) {
2018-11-15T14:25:07.246495945Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.246501650Z            return resolve(value);
2018-11-15T14:25:07.246506726Z          }
2018-11-15T14:25:07.246511541Z          setTimeout(wait, interval);
2018-11-15T14:25:07.246516539Z        } [32m+1ms[0m
2018-11-15T14:25:07.246521625Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.246527016Z  irb(main):019:0> " [32m+0ms[0m
2018-11-15T14:25:07.246532294Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:25:07.246537988Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.246562459Z  irb(main):019:0> " [32m+0ms[0m
2018-11-15T14:25:07.246570390Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.252069602Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.252091468Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.252124820Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.252130986Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.252136316Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.252141768Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.252146918Z        return result += data;
2018-11-15T14:25:07.252151980Z      })] [32m+0ms[0m
2018-11-15T14:25:07.252157159Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.252162556Z  irb(main):019:0> ") [32m+0ms[0m
2018-11-15T14:25:07.252167808Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.252173089Z  irb(main):019:0>  [32m+9ms[0m
2018-11-15T14:25:07.252178382Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):019:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:07.252353899Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):019:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):019:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.252363388Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):019:0> \"}]"] [33m+42ms[0m
2018-11-15T14:25:07.252504965Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):019:0> "}]) [34m+10ms[0m
2018-11-15T14:25:07.253079104Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:25:07.253094081Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):019:0> "}]" [33m+11ms[0m
2018-11-15T14:25:07.276307138Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+23ms[0m
2018-11-15T14:25:07.276917582Z    [34;1mengine:socket [0mpacket [34m+24ms[0m
2018-11-15T14:25:07.276935082Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
2018-11-15T14:25:07.277107184Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
2018-11-15T14:25:07.277621339Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.277636537Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.277790086Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
2018-11-15T14:25:07.277802619Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.277914662Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.282107479Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.282591114Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:07.283126883Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.283623720Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.284054977Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.284458285Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:07.284790355Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
2018-11-15T14:25:07.285089266Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
2018-11-15T14:25:07.285366788Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+1ms[0m
2018-11-15T14:25:07.285990397Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.286327349Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:07.286652905Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.286966845Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.287236316Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.287491211Z        return result !== '';
2018-11-15T14:25:07.287501323Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.287742173Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:07.287752085Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.287755542Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.287758782Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.287762074Z          if (condFunc()) {
2018-11-15T14:25:07.287765258Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.287768911Z            return resolve(value);
2018-11-15T14:25:07.287772062Z          }
2018-11-15T14:25:07.287775133Z          setTimeout(wait, interval);
2018-11-15T14:25:07.287778302Z        } [32m+0ms[0m
2018-11-15T14:25:07.288044731Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.288211650Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.288222031Z  irb(main):020:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.289461594Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.289480831Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.289487207Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.289492335Z          if (condFunc()) {
2018-11-15T14:25:07.289496901Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.289502116Z            return resolve(value);
2018-11-15T14:25:07.289506858Z          }
2018-11-15T14:25:07.289890953Z          setTimeout(wait, interval);
2018-11-15T14:25:07.289909856Z        } [32m+2ms[0m
2018-11-15T14:25:07.289913686Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.289917235Z  irb(main):020:0> " [32m+0ms[0m
2018-11-15T14:25:07.289920819Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.289924854Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.289950728Z  irb(main):020:0> " [32m+0ms[0m
2018-11-15T14:25:07.289955353Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.295235243Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.295261583Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:25:07.295266329Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.295760741Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.295776653Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.295783389Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.295788721Z        return result += data;
2018-11-15T14:25:07.295809815Z      })] [32m+0ms[0m
2018-11-15T14:25:07.295814781Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.295819735Z  irb(main):020:0> ") [32m+0ms[0m
2018-11-15T14:25:07.295824781Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.295830508Z  irb(main):020:0>  [32m+11ms[0m
2018-11-15T14:25:07.296113043Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):020:0> "}],"nsp":"/"} [32m+13ms[0m
2018-11-15T14:25:07.296424740Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):020:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):020:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.296695339Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):020:0> \"}]"] [33m+45ms[0m
2018-11-15T14:25:07.297057374Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):020:0> "}]) [34m+14ms[0m
2018-11-15T14:25:07.297075132Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.297531214Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):020:0> "}]" [33m+15ms[0m
2018-11-15T14:25:07.316160272Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+19ms[0m
2018-11-15T14:25:07.316677566Z    [34;1mengine:socket [0mpacket [34m+20ms[0m
2018-11-15T14:25:07.316855562Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+21ms[0m
2018-11-15T14:25:07.317081932Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+32ms[0m
2018-11-15T14:25:07.317326020Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.317336347Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.317553319Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+22ms[0m
2018-11-15T14:25:07.317727666Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.317893926Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.323721526Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
2018-11-15T14:25:07.323737616Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:07.323741879Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.323746553Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:07.323750507Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.323754239Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.323776882Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.323781513Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+27ms[0m
2018-11-15T14:25:07.323785116Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.323788814Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.323792305Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.323795717Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.323799094Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.323802456Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.323805921Z        return result !== '';
2018-11-15T14:25:07.323809046Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.323812350Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.323815974Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.323819206Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.323833516Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.323837086Z          if (condFunc()) {
2018-11-15T14:25:07.323840273Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.323856040Z            return resolve(value);
2018-11-15T14:25:07.323859960Z          }
2018-11-15T14:25:07.323863026Z          setTimeout(wait, interval);
2018-11-15T14:25:07.323866145Z        } [32m+0ms[0m
2018-11-15T14:25:07.323869306Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.323872830Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.323876056Z  irb(main):021:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.325042451Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.325053984Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.325071511Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.325075142Z          if (condFunc()) {
2018-11-15T14:25:07.325078318Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.325081865Z            return resolve(value);
2018-11-15T14:25:07.325102665Z          }
2018-11-15T14:25:07.325106795Z          setTimeout(wait, interval);
2018-11-15T14:25:07.325109961Z        } [32m+1ms[0m
2018-11-15T14:25:07.325113096Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.325116393Z  irb(main):021:0> " [32m+0ms[0m
2018-11-15T14:25:07.325119737Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.325123332Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.325126671Z  irb(main):021:0> " [32m+0ms[0m
2018-11-15T14:25:07.325129934Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.330949762Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:07.330972113Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.331013512Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.331020053Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.331030873Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.331041414Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.331063441Z        return result += data;
2018-11-15T14:25:07.331083391Z      })] [32m+0ms[0m
2018-11-15T14:25:07.331086882Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.331090173Z  irb(main):021:0> ") [32m+0ms[0m
2018-11-15T14:25:07.331093510Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.331096839Z  irb(main):021:0>  [32m+8ms[0m
2018-11-15T14:25:07.331100233Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):021:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:07.331104737Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):021:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):021:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.331109279Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):021:0> \"}]"] [33m+34ms[0m
2018-11-15T14:25:07.331113533Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):021:0> "}]) [34m+8ms[0m
2018-11-15T14:25:07.331117624Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.331120963Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):021:0> "}]" [33m+8ms[0m
2018-11-15T14:25:07.356550519Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+25ms[0m
2018-11-15T14:25:07.356605110Z    [34;1mengine:socket [0mpacket [34m+26ms[0m
2018-11-15T14:25:07.356610155Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+26ms[0m
2018-11-15T14:25:07.356615355Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
2018-11-15T14:25:07.356619710Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.356623806Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.356628083Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
2018-11-15T14:25:07.356631729Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.356635814Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.362893686Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.362939290Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.362971025Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.362976567Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.362980694Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.362984422Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.362988047Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:07.362991511Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+32ms[0m
2018-11-15T14:25:07.362995189Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.362998663Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.363015684Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.363019941Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.363023303Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.363026666Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.363030029Z        return result !== '';
2018-11-15T14:25:07.363033137Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.363036406Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.363040006Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.363043297Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.363046483Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.363049739Z          if (condFunc()) {
2018-11-15T14:25:07.363052790Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.363056271Z            return resolve(value);
2018-11-15T14:25:07.363074225Z          }
2018-11-15T14:25:07.363078468Z          setTimeout(wait, interval);
2018-11-15T14:25:07.363095148Z        } [32m+0ms[0m
2018-11-15T14:25:07.363099184Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.363102582Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.363105894Z  irb(main):022:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.364227780Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.364241252Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.364245286Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.364268000Z          if (condFunc()) {
2018-11-15T14:25:07.364288263Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.364292398Z            return resolve(value);
2018-11-15T14:25:07.364295681Z          }
2018-11-15T14:25:07.364298746Z          setTimeout(wait, interval);
2018-11-15T14:25:07.364301868Z        } [32m+1ms[0m
2018-11-15T14:25:07.364305084Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.364308498Z  irb(main):022:0> " [32m+1ms[0m
2018-11-15T14:25:07.364311899Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.364315529Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.364318910Z  irb(main):022:0> " [32m+0ms[0m
2018-11-15T14:25:07.364322309Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.370155216Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.370208978Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.370219515Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.370226551Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.370232500Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.370238214Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.370243418Z        return result += data;
2018-11-15T14:25:07.370248871Z      })] [32m+0ms[0m
2018-11-15T14:25:07.370253683Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.370257284Z  irb(main):022:0> ") [32m+0ms[0m
2018-11-15T14:25:07.370261043Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.370264470Z  irb(main):022:0>  [32m+7ms[0m
2018-11-15T14:25:07.370268030Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):022:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:07.370290089Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):022:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):022:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.370306609Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):022:0> \"}]"] [33m+39ms[0m
2018-11-15T14:25:07.370311388Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):022:0> "}]) [34m+8ms[0m
2018-11-15T14:25:07.370315379Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.370318860Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):022:0> "}]" [33m+8ms[0m
2018-11-15T14:25:07.396073352Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+26ms[0m
2018-11-15T14:25:07.396670371Z    [34;1mengine:socket [0mpacket [34m+26ms[0m
2018-11-15T14:25:07.396687109Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+27ms[0m
2018-11-15T14:25:07.396696240Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
2018-11-15T14:25:07.396871468Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.397323155Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.397334369Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+28ms[0m
2018-11-15T14:25:07.397338664Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.397343080Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.402948664Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
2018-11-15T14:25:07.402963747Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:07.402968373Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.402973251Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.402977302Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.402981096Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.402984785Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.403008694Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
2018-11-15T14:25:07.403030070Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.403567571Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.403578286Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.403582103Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.404009304Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.404019492Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.404023242Z        return result !== '';
2018-11-15T14:25:07.404026397Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.404029797Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.404033295Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.404036610Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.404039757Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.404043061Z          if (condFunc()) {
2018-11-15T14:25:07.404046138Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.404049541Z            return resolve(value);
2018-11-15T14:25:07.404069748Z          }
2018-11-15T14:25:07.404073780Z          setTimeout(wait, interval);
2018-11-15T14:25:07.404078056Z        } [32m+0ms[0m
2018-11-15T14:25:07.404082961Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.404266295Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.404514302Z  irb(main):023:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.404942439Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.404952862Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.404956216Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.404959520Z          if (condFunc()) {
2018-11-15T14:25:07.404962640Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.404966201Z            return resolve(value);
2018-11-15T14:25:07.404969355Z          }
2018-11-15T14:25:07.404972377Z          setTimeout(wait, interval);
2018-11-15T14:25:07.404975768Z        } [32m+1ms[0m
2018-11-15T14:25:07.404979001Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.405007224Z  irb(main):023:0> " [32m+0ms[0m
2018-11-15T14:25:07.405011899Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.405015608Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.405019013Z  irb(main):023:0> " [32m+0ms[0m
2018-11-15T14:25:07.405022275Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.410566313Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.410583353Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:25:07.410587652Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.410591185Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.410594560Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.410598649Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.410629069Z        return result += data;
2018-11-15T14:25:07.410635951Z      })] [32m+0ms[0m
2018-11-15T14:25:07.410640849Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.410647191Z  irb(main):023:0> ") [32m+0ms[0m
2018-11-15T14:25:07.410654651Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.410660277Z  irb(main):023:0>  [32m+8ms[0m
2018-11-15T14:25:07.410665583Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):023:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:07.410672692Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):023:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):023:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.410680092Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):023:0> \"}]"] [33m+41ms[0m
2018-11-15T14:25:07.410901070Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):023:0> "}]) [34m+8ms[0m
2018-11-15T14:25:07.411311620Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.411322817Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):023:0> "}]" [33m+9ms[0m
2018-11-15T14:25:07.436098373Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+24ms[0m
2018-11-15T14:25:07.436153926Z    [34;1mengine:socket [0mpacket [34m+25ms[0m
2018-11-15T14:25:07.436642991Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
2018-11-15T14:25:07.436672029Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
2018-11-15T14:25:07.436702650Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.436706985Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.437120970Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
2018-11-15T14:25:07.437132543Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.437138554Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.442179528Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.442201270Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:07.442229133Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.442236110Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:07.442240501Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.442244405Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.442248174Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.442251907Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+31ms[0m
2018-11-15T14:25:07.442255627Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.442727449Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.443072147Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.443082403Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.443086339Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.443089781Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.443506248Z        return result !== '';
2018-11-15T14:25:07.443516145Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.443530453Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:07.443534400Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.443537767Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.443540946Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.443544304Z          if (condFunc()) {
2018-11-15T14:25:07.443547386Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.443550773Z            return resolve(value);
2018-11-15T14:25:07.443569979Z          }
2018-11-15T14:25:07.443573938Z          setTimeout(wait, interval);
2018-11-15T14:25:07.443577095Z        } [32m+0ms[0m
2018-11-15T14:25:07.443580302Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.443982481Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.443992518Z  irb(main):024:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.443996367Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.443999643Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.444002795Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.444006018Z          if (condFunc()) {
2018-11-15T14:25:07.444009182Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.444012569Z            return resolve(value);
2018-11-15T14:25:07.444015658Z          }
2018-11-15T14:25:07.444018732Z          setTimeout(wait, interval);
2018-11-15T14:25:07.444021918Z        } [32m+0ms[0m
2018-11-15T14:25:07.444025052Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.444045847Z  irb(main):024:0> " [32m+0ms[0m
2018-11-15T14:25:07.444049238Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.444052858Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.444056208Z  irb(main):024:0> " [32m+0ms[0m
2018-11-15T14:25:07.444221979Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.449775460Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:07.449791420Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.449795849Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.449807679Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.449831417Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.449834980Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.449838289Z        return result += data;
2018-11-15T14:25:07.449841460Z      })] [32m+0ms[0m
2018-11-15T14:25:07.449844689Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.449847950Z  irb(main):024:0> ") [32m+0ms[0m
2018-11-15T14:25:07.449851419Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.449854719Z  irb(main):024:0>  [32m+8ms[0m
2018-11-15T14:25:07.449858171Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):024:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:07.450407046Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):024:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):024:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.450420380Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):024:0> \"}]"] [33m+40ms[0m
2018-11-15T14:25:07.450425095Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):024:0> "}]) [34m+9ms[0m
2018-11-15T14:25:07.450429105Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.450432431Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):024:0> "}]" [33m+9ms[0m
2018-11-15T14:25:07.477519482Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+27ms[0m
2018-11-15T14:25:07.477988604Z    [34;1mengine:socket [0mpacket [34m+27ms[0m
2018-11-15T14:25:07.478413433Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
2018-11-15T14:25:07.478426889Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+37ms[0m
2018-11-15T14:25:07.478432115Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.478828487Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.478839408Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+29ms[0m
2018-11-15T14:25:07.478843602Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.478848357Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.483944225Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.483962251Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:07.483966788Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.483971600Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:07.483976011Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.483979965Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.484111187Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.484119415Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+34ms[0m
2018-11-15T14:25:07.484123095Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.484397066Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.484730242Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.485026973Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.485351796Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.485602017Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.485841859Z        return result !== '';
2018-11-15T14:25:07.486073887Z      }, interval = 1, value = undefined)] [32m+1ms[0m
2018-11-15T14:25:07.486388884Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:07.486671353Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.486914457Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.487151619Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.487376688Z          if (condFunc()) {
2018-11-15T14:25:07.487615051Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.487884706Z            return resolve(value);
2018-11-15T14:25:07.488114868Z          }
2018-11-15T14:25:07.488393070Z          setTimeout(wait, interval);
2018-11-15T14:25:07.488401951Z        } [32m+0ms[0m
2018-11-15T14:25:07.488710031Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+2ms[0m
2018-11-15T14:25:07.488846340Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.488999126Z  irb(main):025:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.490198547Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.490210419Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.490214033Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.490217373Z          if (condFunc()) {
2018-11-15T14:25:07.490220564Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.490224061Z            return resolve(value);
2018-11-15T14:25:07.490227153Z          }
2018-11-15T14:25:07.490230227Z          setTimeout(wait, interval);
2018-11-15T14:25:07.490233479Z        } [32m+2ms[0m
2018-11-15T14:25:07.490236686Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.490239989Z  irb(main):025:0> " [32m+0ms[0m
2018-11-15T14:25:07.490471896Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.490482260Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.490485831Z  irb(main):025:0> " [32m+0ms[0m
2018-11-15T14:25:07.490631349Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.495943371Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.495962826Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.495967466Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.496377060Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.496387942Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.496391769Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.496395267Z        return result += data;
2018-11-15T14:25:07.496398464Z      })] [32m+0ms[0m
2018-11-15T14:25:07.496401910Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.496405467Z  irb(main):025:0> ") [32m+1ms[0m
2018-11-15T14:25:07.496409021Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.496412351Z  irb(main):025:0>  [32m+13ms[0m
2018-11-15T14:25:07.496596540Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):025:0> "}],"nsp":"/"} [32m+13ms[0m
2018-11-15T14:25:07.496879929Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):025:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):025:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.497153726Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):025:0> \"}]"] [33m+46ms[0m
2018-11-15T14:25:07.497164953Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):025:0> "}]) [34m+13ms[0m
2018-11-15T14:25:07.497532842Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:25:07.497545121Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):025:0> "}]" [33m+14ms[0m
2018-11-15T14:25:07.519134022Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+21ms[0m
2018-11-15T14:25:07.519592745Z    [34;1mengine:socket [0mpacket [34m+22ms[0m
2018-11-15T14:25:07.519853469Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+23ms[0m
2018-11-15T14:25:07.520033476Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+36ms[0m
2018-11-15T14:25:07.520266833Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.520540918Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.520551776Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+24ms[0m
2018-11-15T14:25:07.520745650Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.520926478Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.525160355Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.525174870Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.525179483Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
2018-11-15T14:25:07.525184276Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+4ms[0m
2018-11-15T14:25:07.525188501Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:07.525192359Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.525516339Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.525527739Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+29ms[0m
2018-11-15T14:25:07.525531662Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.526153058Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.526545815Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:07.526714604Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.526916753Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.526926373Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.526930024Z        return result !== '';
2018-11-15T14:25:07.526933189Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.526936478Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.527249404Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.527259770Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.527263350Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.527266721Z          if (condFunc()) {
2018-11-15T14:25:07.527269833Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.527273310Z            return resolve(value);
2018-11-15T14:25:07.527276452Z          }
2018-11-15T14:25:07.527279598Z          setTimeout(wait, interval);
2018-11-15T14:25:07.527282675Z        } [32m+0ms[0m
2018-11-15T14:25:07.527285836Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:07.527446273Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.527455400Z  irb(main):026:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.528682686Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.528693961Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.528697592Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.528700956Z          if (condFunc()) {
2018-11-15T14:25:07.528704147Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.528707683Z            return resolve(value);
2018-11-15T14:25:07.528718036Z          }
2018-11-15T14:25:07.528721630Z          setTimeout(wait, interval);
2018-11-15T14:25:07.528724881Z        } [32m+1ms[0m
2018-11-15T14:25:07.528728079Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.528731472Z  irb(main):026:0> " [32m+0ms[0m
2018-11-15T14:25:07.528744396Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.528958526Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.528968255Z  irb(main):026:0> " [32m+0ms[0m
2018-11-15T14:25:07.528971834Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.534289885Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:07.534306754Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.534311150Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.534314866Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.534318374Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.534322045Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.534325242Z        return result += data;
2018-11-15T14:25:07.534328451Z      })] [32m+0ms[0m
2018-11-15T14:25:07.534662984Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.534676356Z  irb(main):026:0> ") [32m+0ms[0m
2018-11-15T14:25:07.534680332Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.534683692Z  irb(main):026:0>  [32m+9ms[0m
2018-11-15T14:25:07.534687089Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):026:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:25:07.534954834Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):026:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):026:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.534965867Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):026:0> \"}]"] [33m+38ms[0m
2018-11-15T14:25:07.534970638Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):026:0> "}]) [34m+10ms[0m
2018-11-15T14:25:07.535275754Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.535286074Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):026:0> "}]" [33m+11ms[0m
2018-11-15T14:25:07.558597858Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+23ms[0m
2018-11-15T14:25:07.558985220Z    [34;1mengine:socket [0mpacket [34m+24ms[0m
2018-11-15T14:25:07.559560691Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+25ms[0m
2018-11-15T14:25:07.559795319Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+34ms[0m
2018-11-15T14:25:07.559972047Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.560211662Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.560222685Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+26ms[0m
2018-11-15T14:25:07.560423344Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.560711021Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.560944357Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+2ms[0m
2018-11-15T14:25:07.561182562Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:25:07.561357473Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
2018-11-15T14:25:07.561567526Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+2ms[0m
2018-11-15T14:25:07.561789537Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.561799553Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.561998270Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
2018-11-15T14:25:07.562007995Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+27ms[0m
2018-11-15T14:25:07.562430910Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.562779875Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.563163194Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.563353747Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:25:07.563595685Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.563619680Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.563623832Z        return result !== '';
2018-11-15T14:25:07.563627000Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.563631026Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.563949231Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.563958902Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.563962348Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.563965570Z          if (condFunc()) {
2018-11-15T14:25:07.563968757Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.563972230Z            return resolve(value);
2018-11-15T14:25:07.563975481Z          }
2018-11-15T14:25:07.563978519Z          setTimeout(wait, interval);
2018-11-15T14:25:07.563981602Z        } [32m+0ms[0m
2018-11-15T14:25:07.563984762Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.564161571Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.564170447Z  irb(main):027:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.565874147Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.565887740Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.565891747Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.565895201Z          if (condFunc()) {
2018-11-15T14:25:07.565898430Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.565902103Z            return resolve(value);
2018-11-15T14:25:07.565905254Z          }
2018-11-15T14:25:07.565908241Z          setTimeout(wait, interval);
2018-11-15T14:25:07.565911457Z        } [32m+2ms[0m
2018-11-15T14:25:07.565914618Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.565934428Z  irb(main):027:0> " [32m+0ms[0m
2018-11-15T14:25:07.565938754Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.565942508Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.565945865Z  irb(main):027:0> " [32m+0ms[0m
2018-11-15T14:25:07.565949186Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.571774311Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.571816601Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:25:07.571822242Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.571825940Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.571829671Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.571833325Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.571836698Z        return result += data;
2018-11-15T14:25:07.571839837Z      })] [32m+0ms[0m
2018-11-15T14:25:07.571843041Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.571846243Z  irb(main):027:0> ") [32m+0ms[0m
2018-11-15T14:25:07.571849598Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.571852832Z  irb(main):027:0>  [32m+10ms[0m
2018-11-15T14:25:07.571856152Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):027:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:25:07.571860529Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):027:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):027:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.571865371Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):027:0> \"}]"] [33m+37ms[0m
2018-11-15T14:25:07.571869539Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):027:0> "}]) [34m+11ms[0m
2018-11-15T14:25:07.571886848Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.571890600Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):027:0> "}]" [33m+11ms[0m
2018-11-15T14:25:07.599597506Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+27ms[0m
2018-11-15T14:25:07.599650912Z    [34;1mengine:socket [0mpacket [34m+28ms[0m
2018-11-15T14:25:07.599656348Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+28ms[0m
2018-11-15T14:25:07.599661218Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+38ms[0m
2018-11-15T14:25:07.599665519Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.599669480Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.599713589Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+28ms[0m
2018-11-15T14:25:07.599719240Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.599723426Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.615885093Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+16ms[0m
2018-11-15T14:25:07.615936867Z    [34;1mengine:socket [0mpacket [34m+15ms[0m
2018-11-15T14:25:07.615942101Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+15ms[0m
2018-11-15T14:25:07.615946906Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+15ms[0m
2018-11-15T14:25:07.615951023Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.615954946Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:07.615958938Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+16ms[0m
2018-11-15T14:25:07.615962690Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+44ms[0m
2018-11-15T14:25:07.615966477Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.615969869Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.615973410Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.615976936Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.616000949Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.616004426Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.616007852Z        return result !== '';
2018-11-15T14:25:07.616011026Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.616014306Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.616017863Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.616021210Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.616024369Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.616027569Z          if (condFunc()) {
2018-11-15T14:25:07.616030638Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.616047509Z            return resolve(value);
2018-11-15T14:25:07.616051012Z          }
2018-11-15T14:25:07.616054042Z          setTimeout(wait, interval);
2018-11-15T14:25:07.616057180Z        } [32m+0ms[0m
2018-11-15T14:25:07.616079409Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.616084226Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.616087542Z  irb(main):028:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.617288248Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.617301181Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.617305184Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.617308530Z          if (condFunc()) {
2018-11-15T14:25:07.617311824Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.617343266Z            return resolve(value);
2018-11-15T14:25:07.617347984Z          }
2018-11-15T14:25:07.617351069Z          setTimeout(wait, interval);
2018-11-15T14:25:07.617354255Z        } [32m+1ms[0m
2018-11-15T14:25:07.617357504Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.617360845Z  irb(main):028:0> " [32m+1ms[0m
2018-11-15T14:25:07.617384631Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.617389825Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.617393246Z  irb(main):028:0> " [32m+0ms[0m
2018-11-15T14:25:07.617396612Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.623411489Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.623426153Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.623430559Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.623434124Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.623437596Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.623476676Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.623480786Z        return result += data;
2018-11-15T14:25:07.623483932Z      })] [32m+0ms[0m
2018-11-15T14:25:07.623487158Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.623504928Z  irb(main):028:0> ") [32m+0ms[0m
2018-11-15T14:25:07.623509009Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.623512345Z  irb(main):028:0>  [32m+7ms[0m
2018-11-15T14:25:07.623515688Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):028:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:07.623520363Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):028:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):028:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.623525035Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):028:0> \"}]"] [33m+52ms[0m
2018-11-15T14:25:07.623529273Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):028:0> "}]) [34m+9ms[0m
2018-11-15T14:25:07.623533251Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.623550625Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):028:0> "}]" [33m+9ms[0m
2018-11-15T14:25:07.654092142Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
2018-11-15T14:25:07.654145844Z    [34;1mengine:socket [0mpacket [34m+30ms[0m
2018-11-15T14:25:07.654151075Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+30ms[0m
2018-11-15T14:25:07.654156173Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+38ms[0m
2018-11-15T14:25:07.654160334Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.654164433Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.654168230Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+31ms[0m
2018-11-15T14:25:07.654172133Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.654176196Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.654802065Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
2018-11-15T14:25:07.654817336Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:07.655045117Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+1ms[0m
2018-11-15T14:25:07.655895015Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+2ms[0m
2018-11-15T14:25:07.655908388Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.655912966Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.655916750Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+2ms[0m
2018-11-15T14:25:07.655920434Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
2018-11-15T14:25:07.655924026Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.656287315Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.656675891Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.656685529Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.656689122Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.656692533Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.656695871Z        return result !== '';
2018-11-15T14:25:07.656699071Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.656702413Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.656705905Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.656709100Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.656736662Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.656740750Z          if (condFunc()) {
2018-11-15T14:25:07.656744100Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.656876605Z            return resolve(value);
2018-11-15T14:25:07.659099238Z          }
2018-11-15T14:25:07.659112879Z          setTimeout(wait, interval);
2018-11-15T14:25:07.659116762Z        } [32m+0ms[0m
2018-11-15T14:25:07.659120293Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:07.659290793Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.659572472Z  irb(main):029:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:07.659941960Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.660209726Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.660558806Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.660833550Z          if (condFunc()) {
2018-11-15T14:25:07.661097272Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.661361158Z            return resolve(value);
2018-11-15T14:25:07.661600784Z          }
2018-11-15T14:25:07.661611083Z          setTimeout(wait, interval);
2018-11-15T14:25:07.661614434Z        } [32m+1ms[0m
2018-11-15T14:25:07.661935583Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.662018155Z  irb(main):029:0> " [32m+2ms[0m
2018-11-15T14:25:07.662022104Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.662025967Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.662055367Z  irb(main):029:0> " [32m+0ms[0m
2018-11-15T14:25:07.662060486Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.667291225Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:07.668897453Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.669872443Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:25:07.669972337Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.670018034Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.670053733Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.670124056Z        return result += data;
2018-11-15T14:25:07.670164209Z      })] [32m+1ms[0m
2018-11-15T14:25:07.670273431Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.670313131Z  irb(main):029:0> ") [32m+1ms[0m
2018-11-15T14:25:07.670431030Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.670485872Z  irb(main):029:0>  [32m+15ms[0m
2018-11-15T14:25:07.670621572Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):029:0> "}],"nsp":"/"} [32m+16ms[0m
2018-11-15T14:25:07.670727913Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):029:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):029:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.670840978Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):029:0> \"}]"] [33m+47ms[0m
2018-11-15T14:25:07.671186544Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):029:0> "}]) [34m+16ms[0m
2018-11-15T14:25:07.671206565Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.671210724Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):029:0> "}]" [33m+16ms[0m
2018-11-15T14:25:07.678489874Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+8ms[0m
2018-11-15T14:25:07.678505488Z    [34;1mengine:socket [0mpacket [34m+8ms[0m
2018-11-15T14:25:07.678841300Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+8ms[0m
2018-11-15T14:25:07.678852115Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+23ms[0m
2018-11-15T14:25:07.679034854Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.679330516Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.679444071Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+9ms[0m
2018-11-15T14:25:07.679718339Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.679727957Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.685202562Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
2018-11-15T14:25:07.685217202Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:07.685356524Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:25:07.685366718Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.685371125Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.685376828Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.685382564Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:07.685510997Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+15ms[0m
2018-11-15T14:25:07.685520520Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.685524243Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.685536467Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.685839650Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.685921458Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.685928522Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.685932055Z        return result !== '';
2018-11-15T14:25:07.685935183Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.686068739Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.686077164Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.686080663Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.686083853Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.686087079Z          if (condFunc()) {
2018-11-15T14:25:07.686090119Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.686093616Z            return resolve(value);
2018-11-15T14:25:07.686096735Z          }
2018-11-15T14:25:07.686099773Z          setTimeout(wait, interval);
2018-11-15T14:25:07.686102917Z        } [32m+0ms[0m
2018-11-15T14:25:07.686188857Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:07.686195675Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.686204615Z  irb(main):030:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.687379350Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.687391355Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.687395199Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.687398555Z          if (condFunc()) {
2018-11-15T14:25:07.687401827Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.687405350Z            return resolve(value);
2018-11-15T14:25:07.687408467Z          }
2018-11-15T14:25:07.687411434Z          setTimeout(wait, interval);
2018-11-15T14:25:07.687414650Z        } [32m+1ms[0m
2018-11-15T14:25:07.687417844Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.687421116Z  irb(main):030:0> " [32m+0ms[0m
2018-11-15T14:25:07.687424456Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.687545347Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.687607597Z  irb(main):030:0> " [32m+0ms[0m
2018-11-15T14:25:07.687613357Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.692657612Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.692679889Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.692764454Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.692786494Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.692790950Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.692794662Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.692797942Z        return result += data;
2018-11-15T14:25:07.692801086Z      })] [32m+0ms[0m
2018-11-15T14:25:07.692804348Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.692807654Z  irb(main):030:0> ") [32m+0ms[0m
2018-11-15T14:25:07.692846937Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.692867980Z  irb(main):030:0>  [32m+7ms[0m
2018-11-15T14:25:07.692996142Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:07.693090062Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):030:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):030:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.693238312Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):030:0> \"}]"] [33m+23ms[0m
2018-11-15T14:25:07.693331534Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):030:0> "}]) [34m+8ms[0m
2018-11-15T14:25:07.693339696Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.693416902Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):030:0> "}]" [33m+8ms[0m
2018-11-15T14:25:07.723765776Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
2018-11-15T14:25:07.723815009Z    [34;1mengine:socket [0mpacket [34m+30ms[0m
2018-11-15T14:25:07.724040797Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
2018-11-15T14:25:07.724419599Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+39ms[0m
2018-11-15T14:25:07.724570352Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.724763360Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.725017962Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+32ms[0m
2018-11-15T14:25:07.725124823Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.725342305Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
2018-11-15T14:25:07.725686631Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+2ms[0m
2018-11-15T14:25:07.725698735Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:25:07.725877201Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
2018-11-15T14:25:07.726122096Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
2018-11-15T14:25:07.726302716Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:07.726485952Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.726681448Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+2ms[0m
2018-11-15T14:25:07.726714813Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+34ms[0m
2018-11-15T14:25:07.726880210Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.727406149Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.727552435Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.727607828Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.727786476Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.727795588Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.727799351Z        return result !== '';
2018-11-15T14:25:07.727802611Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.727890082Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.728035273Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.728059202Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.728065779Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.728070823Z          if (condFunc()) {
2018-11-15T14:25:07.728101169Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.728107561Z            return resolve(value);
2018-11-15T14:25:07.728112724Z          }
2018-11-15T14:25:07.728117669Z          setTimeout(wait, interval);
2018-11-15T14:25:07.728122927Z        } [32m+0ms[0m
2018-11-15T14:25:07.728257647Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.728292601Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.728299951Z  irb(main):031:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:07.729362440Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.729374595Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.729378640Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.729382197Z          if (condFunc()) {
2018-11-15T14:25:07.729385414Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.729389299Z            return resolve(value);
2018-11-15T14:25:07.729397726Z          }
2018-11-15T14:25:07.729557089Z          setTimeout(wait, interval);
2018-11-15T14:25:07.729568536Z        } [32m+1ms[0m
2018-11-15T14:25:07.729651329Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.729703214Z  irb(main):031:0> " [32m+0ms[0m
2018-11-15T14:25:07.729917892Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.730043966Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.730053483Z  irb(main):031:0> " [32m+0ms[0m
2018-11-15T14:25:07.730183770Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:25:07.735420383Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.735435034Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.735590244Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.735803560Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.735819432Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.735831457Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.735835090Z        return result += data;
2018-11-15T14:25:07.735838299Z      })] [32m+0ms[0m
2018-11-15T14:25:07.735940381Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.736098954Z  irb(main):031:0> ") [32m+0ms[0m
2018-11-15T14:25:07.736201945Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.736290676Z  irb(main):031:0>  [32m+10ms[0m
2018-11-15T14:25:07.736515528Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):031:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:25:07.736613281Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):031:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):031:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.736880116Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):031:0> \"}]"] [33m+43ms[0m
2018-11-15T14:25:07.737055539Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):031:0> "}]) [34m+11ms[0m
2018-11-15T14:25:07.737066589Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.737250262Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):031:0> "}]" [33m+12ms[0m
2018-11-15T14:25:07.758755407Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+21ms[0m
2018-11-15T14:25:07.758791277Z    [34;1mengine:socket [0mpacket [34m+22ms[0m
2018-11-15T14:25:07.758926755Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+22ms[0m
2018-11-15T14:25:07.759030776Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+32ms[0m
2018-11-15T14:25:07.759136027Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.759324095Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+1ms[0m
2018-11-15T14:25:07.759483763Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+23ms[0m
2018-11-15T14:25:07.759715165Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.759876129Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.765176383Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+7ms[0m
2018-11-15T14:25:07.765204448Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:07.765298494Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:25:07.765537023Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.765739539Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.765933357Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.765959504Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:07.766014107Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+30ms[0m
2018-11-15T14:25:07.766111322Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.766619821Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:07.766802076Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.766965417Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.767130363Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.767141325Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.767145195Z        return result !== '';
2018-11-15T14:25:07.767148645Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.767393483Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:07.767524885Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.767535278Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.767540098Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.767545117Z          if (condFunc()) {
2018-11-15T14:25:07.767549980Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.767556698Z            return resolve(value);
2018-11-15T14:25:07.767562333Z          }
2018-11-15T14:25:07.767566670Z          setTimeout(wait, interval);
2018-11-15T14:25:07.767570959Z        } [32m+0ms[0m
2018-11-15T14:25:07.767660675Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.767901672Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.767926689Z  irb(main):032:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.769248828Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.769261133Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.769264903Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.769268423Z          if (condFunc()) {
2018-11-15T14:25:07.769271711Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.769275354Z            return resolve(value);
2018-11-15T14:25:07.769278589Z          }
2018-11-15T14:25:07.769281680Z          setTimeout(wait, interval);
2018-11-15T14:25:07.769284927Z        } [32m+2ms[0m
2018-11-15T14:25:07.769288156Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.769291629Z  irb(main):032:0> " [32m+0ms[0m
2018-11-15T14:25:07.769356626Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.769524106Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.769534484Z  irb(main):032:0> " [32m+0ms[0m
2018-11-15T14:25:07.769693875Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.774980288Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.775141088Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.775231770Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:25:07.775378423Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.775387616Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.775391447Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.775394944Z        return result += data;
2018-11-15T14:25:07.775398286Z      })] [32m+0ms[0m
2018-11-15T14:25:07.775457891Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.775479886Z  irb(main):032:0> ") [32m+0ms[0m
2018-11-15T14:25:07.775664610Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.775673445Z  irb(main):032:0>  [32m+10ms[0m
2018-11-15T14:25:07.775815767Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):032:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:25:07.776009798Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):032:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):032:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.776151887Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):032:0> \"}]"] [33m+39ms[0m
2018-11-15T14:25:07.776317395Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):032:0> "}]) [34m+11ms[0m
2018-11-15T14:25:07.776490565Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.776646700Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):032:0> "}]" [33m+11ms[0m
2018-11-15T14:25:07.798258825Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+22ms[0m
2018-11-15T14:25:07.798463442Z    [34;1mengine:socket [0mpacket [34m+22ms[0m
2018-11-15T14:25:07.798657148Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+23ms[0m
2018-11-15T14:25:07.798779288Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+33ms[0m
2018-11-15T14:25:07.798810405Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.798871423Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.799038515Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+23ms[0m
2018-11-15T14:25:07.799177604Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.799310908Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
2018-11-15T14:25:07.804698222Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.804714523Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:07.804957420Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.805057147Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.805129371Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.805291623Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:07.805302824Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
2018-11-15T14:25:07.805401335Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+30ms[0m
2018-11-15T14:25:07.805413663Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.805865527Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.805996322Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.806005015Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.806080569Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.806208963Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.806216898Z        return result !== '';
2018-11-15T14:25:07.806220206Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.806345381Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:07.806353082Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.806356771Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.806360118Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.806363328Z          if (condFunc()) {
2018-11-15T14:25:07.806366369Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.806369782Z            return resolve(value);
2018-11-15T14:25:07.806372998Z          }
2018-11-15T14:25:07.806376045Z          setTimeout(wait, interval);
2018-11-15T14:25:07.806379168Z        } [32m+0ms[0m
2018-11-15T14:25:07.806441104Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.806654799Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.806668351Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.806673658Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.806678644Z          if (condFunc()) {
2018-11-15T14:25:07.806707047Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.806833087Z            return resolve(value);
2018-11-15T14:25:07.806855683Z          }
2018-11-15T14:25:07.806859542Z          setTimeout(wait, interval);
2018-11-15T14:25:07.806862694Z        } [32m+0ms[0m
2018-11-15T14:25:07.806921441Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.807129515Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.807148194Z  irb(main):033:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:07.808290624Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.808302450Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.808306266Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.808309728Z          if (condFunc()) {
2018-11-15T14:25:07.808319286Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.808322998Z            return resolve(value);
2018-11-15T14:25:07.808449031Z          }
2018-11-15T14:25:07.808458413Z          setTimeout(wait, interval);
2018-11-15T14:25:07.808461920Z        } [32m+1ms[0m
2018-11-15T14:25:07.808509324Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.808518591Z  irb(main):033:0> " [32m+0ms[0m
2018-11-15T14:25:07.808637644Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.808687271Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.808708681Z  irb(main):033:0> " [32m+0ms[0m
2018-11-15T14:25:07.808848281Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.813997729Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.814142508Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.814287325Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+1ms[0m
2018-11-15T14:25:07.814448129Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.814461055Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.814465407Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.814468769Z        return result += data;
2018-11-15T14:25:07.814472098Z      })] [32m+0ms[0m
2018-11-15T14:25:07.814533692Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.814543398Z  irb(main):033:0> ") [32m+0ms[0m
2018-11-15T14:25:07.814662052Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.814670177Z  irb(main):033:0>  [32m+9ms[0m
2018-11-15T14:25:07.814834933Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):033:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:25:07.814980608Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):033:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):033:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.815181020Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):033:0> \"}]"] [33m+40ms[0m
2018-11-15T14:25:07.815192508Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):033:0> "}]) [34m+11ms[0m
2018-11-15T14:25:07.815294695Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.815476675Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):033:0> "}]" [33m+11ms[0m
2018-11-15T14:25:07.845860642Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
2018-11-15T14:25:07.845887334Z    [34;1mengine:socket [0mpacket [34m+30ms[0m
2018-11-15T14:25:07.846065361Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
2018-11-15T14:25:07.846993999Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+41ms[0m
2018-11-15T14:25:07.847022877Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.847033597Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.847037956Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+32ms[0m
2018-11-15T14:25:07.847042002Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:07.847046391Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.847050736Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
2018-11-15T14:25:07.847054559Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:07.847057952Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
2018-11-15T14:25:07.847062074Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+0ms[0m
2018-11-15T14:25:07.847123253Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.847200207Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:07.847365912Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
2018-11-15T14:25:07.847553920Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+33ms[0m
2018-11-15T14:25:07.847566563Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.847933755Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.848103080Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:07.848113420Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.848290130Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.848299868Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.848303441Z        return result !== '';
2018-11-15T14:25:07.848306622Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.848438282Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.848572153Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.848579591Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.848582967Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.848586233Z          if (condFunc()) {
2018-11-15T14:25:07.848589300Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.848593052Z            return resolve(value);
2018-11-15T14:25:07.848596275Z          }
2018-11-15T14:25:07.848599326Z          setTimeout(wait, interval);
2018-11-15T14:25:07.848602486Z        } [32m+0ms[0m
2018-11-15T14:25:07.848760181Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.848948076Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.848957928Z  irb(main):034:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.850116920Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.850128323Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.850131821Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.850145152Z          if (condFunc()) {
2018-11-15T14:25:07.850149272Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.850152899Z            return resolve(value);
2018-11-15T14:25:07.850156150Z          }
2018-11-15T14:25:07.850307220Z          setTimeout(wait, interval);
2018-11-15T14:25:07.850332305Z        } [32m+2ms[0m
2018-11-15T14:25:07.850345684Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.850349804Z  irb(main):034:0> " [32m+0ms[0m
2018-11-15T14:25:07.850410785Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.850561139Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.850569857Z  irb(main):034:0> " [32m+0ms[0m
2018-11-15T14:25:07.850648614Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.855809349Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.855823339Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.855924760Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.855933720Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.855937286Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.855940880Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.855944101Z        return result += data;
2018-11-15T14:25:07.855947297Z      })] [32m+0ms[0m
2018-11-15T14:25:07.856028941Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.856036297Z  irb(main):034:0> ") [32m+0ms[0m
2018-11-15T14:25:07.856039805Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.856068518Z  irb(main):034:0>  [32m+8ms[0m
2018-11-15T14:25:07.856151234Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):034:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:07.856232290Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):034:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):034:0> "}] [32m+1ms[0m
2018-11-15T14:25:07.856329443Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):034:0> \"}]"] [33m+41ms[0m
2018-11-15T14:25:07.856422153Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):034:0> "}]) [34m+10ms[0m
2018-11-15T14:25:07.856429827Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.856533637Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):034:0> "}]" [33m+10ms[0m
2018-11-15T14:25:07.887240771Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+30ms[0m
2018-11-15T14:25:07.887267575Z    [34;1mengine:socket [0mpacket [34m+31ms[0m
2018-11-15T14:25:07.887382240Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+31ms[0m
2018-11-15T14:25:07.887408898Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+40ms[0m
2018-11-15T14:25:07.887413443Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.890753559Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.890861587Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+35ms[0m
2018-11-15T14:25:07.890953421Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+3ms[0m
2018-11-15T14:25:07.890961638Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.893087674Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:07.893097966Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:07.893199845Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+3ms[0m
2018-11-15T14:25:07.893298388Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:07.893306522Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.893323602Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.893398090Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+3ms[0m
2018-11-15T14:25:07.893405306Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+38ms[0m
2018-11-15T14:25:07.893409146Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.894091241Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.894194559Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:07.894202389Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.894207063Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.894212130Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.894216252Z        return result !== '';
2018-11-15T14:25:07.894226556Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.894297654Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.894304510Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.894307941Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.894311105Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.894329782Z          if (condFunc()) {
2018-11-15T14:25:07.894338342Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.894342206Z            return resolve(value);
2018-11-15T14:25:07.894345396Z          }
2018-11-15T14:25:07.894348450Z          setTimeout(wait, interval);
2018-11-15T14:25:07.894351551Z        } [32m+0ms[0m
2018-11-15T14:25:07.894354744Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.894436281Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.894443046Z  irb(main):035:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.895663553Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.895674068Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.895677510Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.895680778Z          if (condFunc()) {
2018-11-15T14:25:07.895683866Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.895687361Z            return resolve(value);
2018-11-15T14:25:07.895690544Z          }
2018-11-15T14:25:07.895693601Z          setTimeout(wait, interval);
2018-11-15T14:25:07.895696789Z        } [32m+1ms[0m
2018-11-15T14:25:07.895699902Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.895703176Z  irb(main):035:0> " [32m+0ms[0m
2018-11-15T14:25:07.895706509Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.895814364Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.895822607Z  irb(main):035:0> " [32m+0ms[0m
2018-11-15T14:25:07.895826059Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.900967461Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.900990069Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.901003030Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.901029437Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.901033896Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.901037349Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.901040517Z        return result += data;
2018-11-15T14:25:07.901050861Z      })] [32m+0ms[0m
2018-11-15T14:25:07.901054181Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.901057571Z  irb(main):035:0> ") [32m+0ms[0m
2018-11-15T14:25:07.901188555Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.901196810Z  irb(main):035:0>  [32m+7ms[0m
2018-11-15T14:25:07.901200583Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):035:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:07.901205189Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):035:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):035:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.901209686Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):035:0> \"}]"] [33m+45ms[0m
2018-11-15T14:25:07.901213927Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):035:0> "}]) [34m+8ms[0m
2018-11-15T14:25:07.901218115Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.901221449Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):035:0> "}]" [33m+9ms[0m
2018-11-15T14:25:07.919449416Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+18ms[0m
2018-11-15T14:25:07.919486757Z    [34;1mengine:socket [0mpacket [34m+18ms[0m
2018-11-15T14:25:07.919491289Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+19ms[0m
2018-11-15T14:25:07.919496463Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+26ms[0m
2018-11-15T14:25:07.919500704Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.919504547Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.919508237Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+19ms[0m
2018-11-15T14:25:07.919589858Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.919626391Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.924768285Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+5ms[0m
2018-11-15T14:25:07.924784491Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:07.924877693Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:07.924887335Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:07.924891933Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.924895933Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.924975180Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:07.924982553Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+24ms[0m
2018-11-15T14:25:07.925001595Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:07.925005240Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.925338327Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.925348797Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:25:07.925454517Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.925475305Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.925481627Z        return result !== '';
2018-11-15T14:25:07.925486556Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.925512748Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.925520375Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.925524164Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.925527436Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.925530773Z          if (condFunc()) {
2018-11-15T14:25:07.925534351Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.925537925Z            return resolve(value);
2018-11-15T14:25:07.925541007Z          }
2018-11-15T14:25:07.925553972Z          setTimeout(wait, interval);
2018-11-15T14:25:07.925557386Z        } [32m+0ms[0m
2018-11-15T14:25:07.925560630Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.925641630Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.925648975Z  irb(main):036:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.925652512Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.925655841Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.925675281Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.925679712Z          if (condFunc()) {
2018-11-15T14:25:07.925682840Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.925686203Z            return resolve(value);
2018-11-15T14:25:07.925689367Z          }
2018-11-15T14:25:07.925692334Z          setTimeout(wait, interval);
2018-11-15T14:25:07.925695478Z        } [32m+0ms[0m
2018-11-15T14:25:07.925698552Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.925701869Z  irb(main):036:0> " [32m+0ms[0m
2018-11-15T14:25:07.925705164Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.925708747Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.925712072Z  irb(main):036:0> " [32m+0ms[0m
2018-11-15T14:25:07.925720172Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.930878702Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.930894932Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.930899231Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.930902705Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.930906113Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.930909671Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.930912908Z        return result += data;
2018-11-15T14:25:07.930915945Z      })] [32m+0ms[0m
2018-11-15T14:25:07.930935648Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.930940150Z  irb(main):036:0> ") [32m+0ms[0m
2018-11-15T14:25:07.931074062Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.931082664Z  irb(main):036:0>  [32m+6ms[0m
2018-11-15T14:25:07.931094975Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):036:0> "}],"nsp":"/"} [32m+6ms[0m
2018-11-15T14:25:07.931100216Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):036:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):036:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.931104978Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):036:0> \"}]"] [33m+29ms[0m
2018-11-15T14:25:07.931109288Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):036:0> "}]) [34m+6ms[0m
2018-11-15T14:25:07.931113256Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.931116728Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):036:0> "}]" [33m+6ms[0m
2018-11-15T14:25:07.975466249Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+45ms[0m
2018-11-15T14:25:07.975493811Z    [34;1mengine:socket [0mpacket [34m+45ms[0m
2018-11-15T14:25:07.975514620Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+45ms[0m
2018-11-15T14:25:07.975631288Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+51ms[0m
2018-11-15T14:25:07.975640502Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.975644507Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:07.975648685Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+45ms[0m
2018-11-15T14:25:07.975652488Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.975656686Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:07.975937925Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+0ms[0m
2018-11-15T14:25:07.975947100Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:25:07.976028690Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
2018-11-15T14:25:07.976037095Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+0ms[0m
2018-11-15T14:25:07.976059161Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.976076034Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:07.976185350Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+0ms[0m
2018-11-15T14:25:07.976193756Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+45ms[0m
2018-11-15T14:25:07.976197510Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+1ms[0m
2018-11-15T14:25:07.976200898Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:07.976204332Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:07.976207830Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:07.976211217Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:07.976214550Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:07.976233851Z        return result !== '';
2018-11-15T14:25:07.976237447Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:07.976522963Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:07.976537640Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.976541536Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.976544733Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.976547962Z          if (condFunc()) {
2018-11-15T14:25:07.976551036Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.976554531Z            return resolve(value);
2018-11-15T14:25:07.976590605Z          }
2018-11-15T14:25:07.976594268Z          setTimeout(wait, interval);
2018-11-15T14:25:07.976597399Z        } [32m+0ms[0m
2018-11-15T14:25:07.976600625Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:07.976693714Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:07.976700923Z  irb(main):037:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:07.977776789Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:07.977800948Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:07.977805237Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:07.977808491Z          if (condFunc()) {
2018-11-15T14:25:07.977811562Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:07.977821365Z            return resolve(value);
2018-11-15T14:25:07.977824755Z          }
2018-11-15T14:25:07.977827853Z          setTimeout(wait, interval);
2018-11-15T14:25:07.977831060Z        } [32m+1ms[0m
2018-11-15T14:25:07.977834267Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:07.977837546Z  irb(main):037:0> " [32m+0ms[0m
2018-11-15T14:25:07.977840885Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:07.977844442Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:07.977847781Z  irb(main):037:0> " [32m+0ms[0m
2018-11-15T14:25:07.977946899Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:07.983024413Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:07.983038013Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:07.983042171Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:07.983203529Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:07.983216098Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:07.983221330Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:07.983226188Z        return result += data;
2018-11-15T14:25:07.983231223Z      })] [32m+0ms[0m
2018-11-15T14:25:07.983236409Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:07.983241370Z  irb(main):037:0> ") [32m+0ms[0m
2018-11-15T14:25:07.983269348Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:07.983278668Z  irb(main):037:0>  [32m+8ms[0m
2018-11-15T14:25:07.983285063Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):037:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:07.983293100Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):037:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):037:0> "}] [32m+0ms[0m
2018-11-15T14:25:07.983309026Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):037:0> \"}]"] [33m+53ms[0m
2018-11-15T14:25:07.983402889Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):037:0> "}]) [34m+8ms[0m
2018-11-15T14:25:07.983411128Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:07.983440147Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):037:0> "}]" [33m+8ms[0m
2018-11-15T14:25:07.989158807Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+5ms[0m
2018-11-15T14:25:07.989174813Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:07.989324564Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+6ms[0m
2018-11-15T14:25:07.989334377Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+14ms[0m
2018-11-15T14:25:07.989338693Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:07.989342450Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:07.989346100Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+6ms[0m
2018-11-15T14:25:07.989481471Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:07.989491633Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:08.036351444Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+47ms[0m
2018-11-15T14:25:08.036415391Z    [34;1mengine:socket [0mpacket [34m+46ms[0m
2018-11-15T14:25:08.036671160Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+47ms[0m
2018-11-15T14:25:08.036683833Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+47ms[0m
2018-11-15T14:25:08.036688600Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:08.036692868Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:08.036696669Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+47ms[0m
2018-11-15T14:25:08.036700825Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.036761780Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:08.088507098Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+53ms[0m
2018-11-15T14:25:08.088579468Z    [34;1mengine:socket [0mpacket [34m+53ms[0m
2018-11-15T14:25:08.088745209Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+52ms[0m
2018-11-15T14:25:08.088756011Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+52ms[0m
2018-11-15T14:25:08.088760620Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:08.088764656Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:08.088784468Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+52ms[0m
2018-11-15T14:25:08.088789052Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.088793357Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:08.219434995Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+131ms[0m
2018-11-15T14:25:08.219512404Z    [34;1mengine:socket [0mpacket [34m+131ms[0m
2018-11-15T14:25:08.219644997Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+131ms[0m
2018-11-15T14:25:08.219670634Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+131ms[0m
2018-11-15T14:25:08.219675875Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.219693649Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.219698125Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+131ms[0m
2018-11-15T14:25:08.219702072Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.219706370Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:08.224107979Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+4ms[0m
2018-11-15T14:25:08.224177016Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:08.224389025Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+5ms[0m
2018-11-15T14:25:08.224400050Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+5ms[0m
2018-11-15T14:25:08.224417698Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:08.224421963Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:08.224425593Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+5ms[0m
2018-11-15T14:25:08.224466206Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+242ms[0m
2018-11-15T14:25:08.224477185Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:25:08.224832725Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:08.225026377Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:08.225035180Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:08.225038927Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:08.225042364Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:08.225045747Z        return result !== '';
2018-11-15T14:25:08.225088148Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:08.225098404Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:08.225102132Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.225122089Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.225125371Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.225128702Z          if (condFunc()) {
2018-11-15T14:25:08.225131833Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.225135455Z            return resolve(value);
2018-11-15T14:25:08.225138586Z          }
2018-11-15T14:25:08.225141587Z          setTimeout(wait, interval);
2018-11-15T14:25:08.225144692Z        } [32m+0ms[0m
2018-11-15T14:25:08.225147980Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:08.225218326Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:25:08.225225539Z  => 123
2018-11-15T14:25:08.225228870Z  irb(main):038:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:08.226319756Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.226329964Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.226333338Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.226343404Z          if (condFunc()) {
2018-11-15T14:25:08.226346796Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.226350297Z            return resolve(value);
2018-11-15T14:25:08.226353420Z          }
2018-11-15T14:25:08.226356569Z          setTimeout(wait, interval);
2018-11-15T14:25:08.226359660Z        } [32m+1ms[0m
2018-11-15T14:25:08.226362763Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:25:08.226366155Z  => 123
2018-11-15T14:25:08.226369283Z  irb(main):038:0> " [32m+0ms[0m
2018-11-15T14:25:08.226404515Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:08.226408212Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:25:08.226411703Z  => 123
2018-11-15T14:25:08.226414844Z  irb(main):038:0> " [32m+0ms[0m
2018-11-15T14:25:08.226500533Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:08.231633886Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:08.231673144Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:08.231678523Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:08.231689859Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:08.231696129Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:08.231702242Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:08.231717444Z        return result += data;
2018-11-15T14:25:08.231723096Z      })] [32m+0ms[0m
2018-11-15T14:25:08.231764264Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:25:08.231771819Z  => 123
2018-11-15T14:25:08.231776212Z  irb(main):038:0> ") [32m+0ms[0m
2018-11-15T14:25:08.231780739Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:25:08.231785314Z  => 123
2018-11-15T14:25:08.231789554Z  irb(main):038:0>  [32m+7ms[0m
2018-11-15T14:25:08.231907815Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:08.231921535Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}] [32m+0ms[0m
2018-11-15T14:25:08.231938756Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):038:0> \"}]"] [33m+248ms[0m
2018-11-15T14:25:08.231970116Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}]) [34m+7ms[0m
2018-11-15T14:25:08.231976478Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:08.231981342Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):038:0> "}]" [33m+8ms[0m
2018-11-15T14:25:08.249563676Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+18ms[0m
2018-11-15T14:25:08.249671921Z    [34;1mengine:socket [0mpacket [34m+18ms[0m
2018-11-15T14:25:08.249760395Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+18ms[0m
2018-11-15T14:25:08.249769821Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+25ms[0m
2018-11-15T14:25:08.249774121Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:08.249778550Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:08.249782638Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+18ms[0m
2018-11-15T14:25:08.249905161Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.249914530Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:08.254859166Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
2018-11-15T14:25:08.254883745Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:08.254903811Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+5ms[0m
2018-11-15T14:25:08.254992232Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
2018-11-15T14:25:08.255000883Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:08.255069458Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:08.255075545Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+5ms[0m
2018-11-15T14:25:08.255079363Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.255097253Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:08.309705069Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+55ms[0m
2018-11-15T14:25:08.309790714Z    [34;1mengine:socket [0mpacket [34m+55ms[0m
2018-11-15T14:25:08.309945942Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+55ms[0m
2018-11-15T14:25:08.310347819Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+55ms[0m
2018-11-15T14:25:08.310361644Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:08.310366203Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:08.310370304Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+55ms[0m
2018-11-15T14:25:08.310392735Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.310397805Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:08.450881200Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1231"}]" [33m+141ms[0m
2018-11-15T14:25:08.450946725Z    [34;1mengine:socket [0mpacket [34m+141ms[0m
2018-11-15T14:25:08.451124519Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1231"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [32m+141ms[0m
2018-11-15T14:25:08.451140698Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1231"}]} [36m+141ms[0m
2018-11-15T14:25:08.451146161Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:25:08.451150427Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1231"}] [36m+0ms[0m
2018-11-15T14:25:08.451154239Z    [32;1mserver [0m  ["lineChanged"] { line: 1231 } [32m+141ms[0m
2018-11-15T14:25:08.451157932Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:08.451258489Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1231"}],"nsp":"/"} as 2["syncLine",{"line":"1231"}] [32m+0ms[0m
2018-11-15T14:25:08.451308810Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12312"}]" [33m+1ms[0m
2018-11-15T14:25:08.451321222Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:08.451433990Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [32m+0ms[0m
2018-11-15T14:25:08.451451643Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12312"}]} [36m+1ms[0m
2018-11-15T14:25:08.451455597Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:25:08.451459224Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12312"}] [36m+0ms[0m
2018-11-15T14:25:08.451462785Z    [32;1mserver [0m  ["lineChanged"] { line: 12312 } [32m+1ms[0m
2018-11-15T14:25:08.451577384Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.451618532Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12312"}],"nsp":"/"} as 2["syncLine",{"line":"12312"}] [32m+0ms[0m
2018-11-15T14:25:08.505396552Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123123"}]" [33m+53ms[0m
2018-11-15T14:25:08.505491955Z    [34;1mengine:socket [0mpacket [34m+54ms[0m
2018-11-15T14:25:08.505656342Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [32m+54ms[0m
2018-11-15T14:25:08.505671794Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123123"}]} [36m+54ms[0m
2018-11-15T14:25:08.505676952Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:25:08.505681195Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123123"}] [36m+0ms[0m
2018-11-15T14:25:08.505685034Z    [32;1mserver [0m  ["lineChanged"] { line: 123123 } [32m+54ms[0m
2018-11-15T14:25:08.505724701Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.505729242Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123123"}],"nsp":"/"} as 2["syncLine",{"line":"123123"}] [32m+0ms[0m
2018-11-15T14:25:08.567403052Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+63ms[0m
2018-11-15T14:25:08.567504516Z    [34;1mengine:socket [0mpacket [34m+62ms[0m
2018-11-15T14:25:08.567654585Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+62ms[0m
2018-11-15T14:25:08.567735933Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+62ms[0m
2018-11-15T14:25:08.567749314Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.567753853Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.567811128Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+62ms[0m
2018-11-15T14:25:08.567816703Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.567887307Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:08.572907638Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123123"}]" [33m+5ms[0m
2018-11-15T14:25:08.572953012Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:08.573084287Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [32m+5ms[0m
2018-11-15T14:25:08.573105682Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123123"}]} [36m+5ms[0m
2018-11-15T14:25:08.573109835Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:25:08.573203572Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123123"}] [36m+0ms[0m
2018-11-15T14:25:08.573211276Z    [32;1mserver [0m  ["evaluate"] { code: 123123 } [32m+6ms[0m
2018-11-15T14:25:08.573215097Z    [32;1mRepl [0m[bufferWrite(string = "123123", bufferInterval = 5, write = true)] [32m+342ms[0m
2018-11-15T14:25:08.573218790Z    [32;1mRepl [0m  this.process.write('123123' + '\n') [32m+0ms[0m
2018-11-15T14:25:08.575389602Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:08.575402925Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:08.575407451Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:08.575952765Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:08.575962984Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:08.576024782Z        return result !== '';
2018-11-15T14:25:08.576030115Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:08.576049884Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:08.576078675Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.576082264Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.576085502Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.576088739Z          if (condFunc()) {
2018-11-15T14:25:08.576091938Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.576095441Z            return resolve(value);
2018-11-15T14:25:08.576098597Z          }
2018-11-15T14:25:08.576101746Z          setTimeout(wait, interval);
2018-11-15T14:25:08.576105018Z        } [32m+0ms[0m
2018-11-15T14:25:08.576108705Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:08.576112381Z    [32;1mRepl [0m  [concatResult(data = 123123
2018-11-15T14:25:08.576115803Z  )] result: "" [32m+0ms[0m
2018-11-15T14:25:08.576121031Z    [32;1mRepl [0m  [concatResult(data = => 123123
2018-11-15T14:25:08.576124503Z  irb(main):039:0> )] result: "123123
2018-11-15T14:25:08.576127802Z  " [32m+2ms[0m
2018-11-15T14:25:08.576131066Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.576134439Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.576155823Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.576159887Z          if (condFunc()) {
2018-11-15T14:25:08.576162943Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.576166450Z            return resolve(value);
2018-11-15T14:25:08.576169634Z          }
2018-11-15T14:25:08.576172660Z          setTimeout(wait, interval);
2018-11-15T14:25:08.576175832Z        } [32m+0ms[0m
2018-11-15T14:25:08.576179119Z    [32;1mRepl [0m  [isDataReceived()] result: "123123
2018-11-15T14:25:08.576182445Z  => 123123
2018-11-15T14:25:08.576185543Z  irb(main):039:0> " [32m+0ms[0m
2018-11-15T14:25:08.576188901Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:08.576192522Z    [32;1mRepl [0m`let currResult = result` //==> "123123
2018-11-15T14:25:08.576195890Z  => 123123
2018-11-15T14:25:08.576198952Z  irb(main):039:0> " [32m+0ms[0m
2018-11-15T14:25:08.576202217Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:08.581216701Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:08.581232726Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:08.581236980Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:08.581240541Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:08.581244105Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:08.581247598Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:08.581250771Z        return result += data;
2018-11-15T14:25:08.581253830Z      })] [32m+0ms[0m
2018-11-15T14:25:08.581257089Z    [32;1mRepl [0m  resolve(result = "123123
2018-11-15T14:25:08.581260390Z  => 123123
2018-11-15T14:25:08.581263457Z  irb(main):039:0> ") [32m+0ms[0m
2018-11-15T14:25:08.581277491Z    [32;1mserver [0m  [emitOutput] output: 123123
2018-11-15T14:25:08.581281038Z  => 123123
2018-11-15T14:25:08.581284054Z  irb(main):039:0>  [32m+7ms[0m
2018-11-15T14:25:08.581287286Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:08.581292085Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}],"nsp":"/"} as 2["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}] [32m+0ms[0m
2018-11-15T14:25:08.581297168Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123123\\r\\n=> 123123\\r\\nirb(main):039:0> \"}]"] [33m+349ms[0m
2018-11-15T14:25:08.581301624Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}]) [34m+8ms[0m
2018-11-15T14:25:08.581305669Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:08.581308944Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123123\r\n=> 123123\r\nirb(main):039:0> "}]" [33m+9ms[0m
2018-11-15T14:25:08.788289794Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+206ms[0m
2018-11-15T14:25:08.788332703Z    [34;1mengine:socket [0mpacket [34m+208ms[0m
2018-11-15T14:25:08.789001578Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+208ms[0m
2018-11-15T14:25:08.789022568Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+216ms[0m
2018-11-15T14:25:08.789079219Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.789086603Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.789092579Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+208ms[0m
2018-11-15T14:25:08.789098248Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.789104755Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:08.793534769Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:08.793560280Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:08.793619040Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:08.793685373Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:08.793731085Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:08.793753664Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:08.793881770Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+5ms[0m
2018-11-15T14:25:08.793891282Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+213ms[0m
2018-11-15T14:25:08.793895177Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:08.794226731Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:08.794301443Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:08.794359727Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:08.794366328Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:08.794369734Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:08.794388741Z        return result !== '';
2018-11-15T14:25:08.794392581Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:08.794439200Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:08.794445747Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.794456896Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.794460451Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.794463705Z          if (condFunc()) {
2018-11-15T14:25:08.794467120Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.794470765Z            return resolve(value);
2018-11-15T14:25:08.794473893Z          }
2018-11-15T14:25:08.794517361Z          setTimeout(wait, interval);
2018-11-15T14:25:08.794523130Z        } [32m+0ms[0m
2018-11-15T14:25:08.794526487Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:08.794578402Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.794584980Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.794599786Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.794603932Z          if (condFunc()) {
2018-11-15T14:25:08.794607016Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.794610399Z            return resolve(value);
2018-11-15T14:25:08.794613504Z          }
2018-11-15T14:25:08.794616812Z          setTimeout(wait, interval);
2018-11-15T14:25:08.794619922Z        } [32m+0ms[0m
2018-11-15T14:25:08.794623010Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:08.794682986Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:08.794690108Z  irb(main):040:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:08.795816493Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.795837342Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.795841610Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.795845051Z          if (condFunc()) {
2018-11-15T14:25:08.795848236Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.795851925Z            return resolve(value);
2018-11-15T14:25:08.795855074Z          }
2018-11-15T14:25:08.795858077Z          setTimeout(wait, interval);
2018-11-15T14:25:08.795861211Z        } [32m+1ms[0m
2018-11-15T14:25:08.795942115Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:08.795949783Z  irb(main):040:0> " [32m+0ms[0m
2018-11-15T14:25:08.795953394Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:08.795957115Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:08.795967316Z  irb(main):040:0> " [32m+0ms[0m
2018-11-15T14:25:08.796068536Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:08.801141102Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:08.801241092Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:08.801250217Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:08.801253879Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:08.801257222Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:08.801260642Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:08.801263986Z        return result += data;
2018-11-15T14:25:08.801267058Z      })] [32m+0ms[0m
2018-11-15T14:25:08.801270239Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:08.801273578Z  irb(main):040:0> ") [32m+0ms[0m
2018-11-15T14:25:08.801339184Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:08.801346267Z  irb(main):040:0>  [32m+8ms[0m
2018-11-15T14:25:08.801349751Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):040:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:08.801354278Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):040:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):040:0> "}] [32m+0ms[0m
2018-11-15T14:25:08.801359035Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):040:0> \"}]"] [33m+221ms[0m
2018-11-15T14:25:08.801407302Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):040:0> "}]) [34m+8ms[0m
2018-11-15T14:25:08.801413961Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:08.801417358Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):040:0> "}]" [33m+8ms[0m
2018-11-15T14:25:08.946575390Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+145ms[0m
2018-11-15T14:25:08.946695483Z    [34;1mengine:socket [0mpacket [34m+145ms[0m
2018-11-15T14:25:08.946704245Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+145ms[0m
2018-11-15T14:25:08.946709418Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+153ms[0m
2018-11-15T14:25:08.946735823Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.946740728Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:08.946827745Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+145ms[0m
2018-11-15T14:25:08.946837740Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:08.946842175Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:08.952901716Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:08.952997934Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:08.953010922Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:25:08.953096672Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:08.953108340Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:08.953115038Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:08.953120974Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+7ms[0m
2018-11-15T14:25:08.953198890Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+152ms[0m
2018-11-15T14:25:08.953207055Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:08.953210959Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:08.953214474Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:08.953217957Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:08.953221298Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:08.953224682Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:08.953228015Z        return result !== '';
2018-11-15T14:25:08.953231173Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:08.953592598Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:08.953653666Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.953675557Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.953679838Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.953683123Z          if (condFunc()) {
2018-11-15T14:25:08.953686196Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.953689643Z            return resolve(value);
2018-11-15T14:25:08.953692843Z          }
2018-11-15T14:25:08.953695837Z          setTimeout(wait, interval);
2018-11-15T14:25:08.953698956Z        } [32m+0ms[0m
2018-11-15T14:25:08.953702092Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:08.953766437Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:08.953773311Z  irb(main):041:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:08.954891984Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:08.954904268Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:08.954908151Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:08.954911652Z          if (condFunc()) {
2018-11-15T14:25:08.954914916Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:08.954918652Z            return resolve(value);
2018-11-15T14:25:08.954921812Z          }
2018-11-15T14:25:08.954925022Z          setTimeout(wait, interval);
2018-11-15T14:25:08.954928243Z        } [32m+1ms[0m
2018-11-15T14:25:08.954931650Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:08.954935182Z  irb(main):041:0> " [32m+0ms[0m
2018-11-15T14:25:08.954955331Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:08.958213144Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:08.958228704Z  irb(main):041:0> " [32m+0ms[0m
2018-11-15T14:25:08.958232912Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:08.960141576Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:08.960154568Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+1ms[0m
2018-11-15T14:25:08.960222599Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:08.960233048Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:08.960239422Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:08.960273939Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:08.960280977Z        return result += data;
2018-11-15T14:25:08.960286725Z      })] [32m+0ms[0m
2018-11-15T14:25:08.960291646Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:08.960297569Z  irb(main):041:0> ") [32m+0ms[0m
2018-11-15T14:25:08.960303028Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:08.960308536Z  irb(main):041:0>  [32m+7ms[0m
2018-11-15T14:25:08.960383989Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):041:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:08.960395928Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):041:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):041:0> "}] [32m+0ms[0m
2018-11-15T14:25:08.960400818Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):041:0> \"}]"] [33m+159ms[0m
2018-11-15T14:25:08.960405147Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):041:0> "}]) [34m+8ms[0m
2018-11-15T14:25:08.960409041Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:08.960461809Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):041:0> "}]" [33m+8ms[0m
2018-11-15T14:25:09.021695632Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+61ms[0m
2018-11-15T14:25:09.021725057Z    [34;1mengine:socket [0mpacket [34m+61ms[0m
2018-11-15T14:25:09.021804056Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+61ms[0m
2018-11-15T14:25:09.021813339Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+68ms[0m
2018-11-15T14:25:09.021817792Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:09.022111802Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:09.022187851Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+62ms[0m
2018-11-15T14:25:09.022279160Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:09.022288159Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:09.026532863Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+5ms[0m
2018-11-15T14:25:09.026650714Z    [34;1mengine:socket [0mpacket [34m+5ms[0m
2018-11-15T14:25:09.026808184Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+4ms[0m
2018-11-15T14:25:09.026818822Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+5ms[0m
2018-11-15T14:25:09.026823102Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:09.026826971Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:09.026830617Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+4ms[0m
2018-11-15T14:25:09.026834172Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.026838288Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:09.151479992Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+125ms[0m
2018-11-15T14:25:09.151509099Z    [34;1mengine:socket [0mpacket [34m+125ms[0m
2018-11-15T14:25:09.151680890Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+125ms[0m
2018-11-15T14:25:09.151696032Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+125ms[0m
2018-11-15T14:25:09.151700759Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:09.151704897Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:09.151708717Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+125ms[0m
2018-11-15T14:25:09.151783010Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.151791383Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:09.157741198Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+6ms[0m
2018-11-15T14:25:09.157844280Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:09.157897473Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+6ms[0m
2018-11-15T14:25:09.158034464Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+6ms[0m
2018-11-15T14:25:09.158043495Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:09.158047860Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:09.158051645Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+6ms[0m
2018-11-15T14:25:09.158055354Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.158146070Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:09.158240140Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+1ms[0m
2018-11-15T14:25:09.158248451Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:09.158376564Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+1ms[0m
2018-11-15T14:25:09.158404820Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+1ms[0m
2018-11-15T14:25:09.158408934Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:09.158412611Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:09.158416121Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+1ms[0m
2018-11-15T14:25:09.158419619Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+198ms[0m
2018-11-15T14:25:09.158423151Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:25:09.158821516Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:09.158960064Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:09.158968454Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:09.158971954Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:09.158975332Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:09.158978783Z        return result !== '';
2018-11-15T14:25:09.158982017Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:09.158985373Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:09.158995360Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:09.159034411Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:09.159038956Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:09.159046987Z          if (condFunc()) {
2018-11-15T14:25:09.159050532Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:09.159054031Z            return resolve(value);
2018-11-15T14:25:09.159057307Z          }
2018-11-15T14:25:09.159077198Z          setTimeout(wait, interval);
2018-11-15T14:25:09.159080608Z        } [32m+0ms[0m
2018-11-15T14:25:09.159143176Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:09.159150296Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:25:09.159153745Z  => 123
2018-11-15T14:25:09.159157008Z  irb(main):042:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:09.160271640Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:09.160284392Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:09.160288488Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:09.160291849Z          if (condFunc()) {
2018-11-15T14:25:09.160294971Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:09.160298611Z            return resolve(value);
2018-11-15T14:25:09.160301694Z          }
2018-11-15T14:25:09.160304811Z          setTimeout(wait, interval);
2018-11-15T14:25:09.160342103Z        } [32m+2ms[0m
2018-11-15T14:25:09.160346784Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:25:09.160350286Z  => 123
2018-11-15T14:25:09.160353431Z  irb(main):042:0> " [32m+0ms[0m
2018-11-15T14:25:09.160374928Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:09.160447090Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:25:09.160454279Z  => 123
2018-11-15T14:25:09.160457549Z  irb(main):042:0> " [32m+0ms[0m
2018-11-15T14:25:09.160460935Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:09.165543887Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:09.165587293Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:09.165614675Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:09.165626372Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:09.165630171Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:09.165640974Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:09.165645124Z        return result += data;
2018-11-15T14:25:09.165648291Z      })] [32m+0ms[0m
2018-11-15T14:25:09.165755768Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:25:09.165764073Z  => 123
2018-11-15T14:25:09.165767438Z  irb(main):042:0> ") [32m+0ms[0m
2018-11-15T14:25:09.165770803Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:25:09.165774080Z  => 123
2018-11-15T14:25:09.165777475Z  irb(main):042:0>  [32m+7ms[0m
2018-11-15T14:25:09.165780811Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:09.165785849Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}] [32m+0ms[0m
2018-11-15T14:25:09.165790798Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):042:0> \"}]"] [33m+205ms[0m
2018-11-15T14:25:09.165795391Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]) [34m+7ms[0m
2018-11-15T14:25:09.165871787Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:09.165879429Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):042:0> "}]" [33m+7ms[0m
2018-11-15T14:25:09.327482688Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+162ms[0m
2018-11-15T14:25:09.327613147Z    [34;1mengine:socket [0mpacket [34m+162ms[0m
2018-11-15T14:25:09.327736171Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+162ms[0m
2018-11-15T14:25:09.327746053Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+169ms[0m
2018-11-15T14:25:09.327750533Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:09.327754610Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:09.327758651Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+162ms[0m
2018-11-15T14:25:09.327928888Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.327938263Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:09.333774429Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:25:09.333836919Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:09.333876858Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
2018-11-15T14:25:09.334012579Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
2018-11-15T14:25:09.334029611Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:09.334033779Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:09.334117616Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:25:09.334129462Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.334136835Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+1ms[0m
2018-11-15T14:25:09.334230339Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
2018-11-15T14:25:09.334242055Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:09.334322299Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
2018-11-15T14:25:09.334467363Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
2018-11-15T14:25:09.334476158Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:09.334479924Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:09.334483654Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+1ms[0m
2018-11-15T14:25:09.334548543Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.334556138Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:09.334663660Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+0ms[0m
2018-11-15T14:25:09.334671688Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:25:09.334824653Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+0ms[0m
2018-11-15T14:25:09.334833454Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+0ms[0m
2018-11-15T14:25:09.334837382Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:09.334849647Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:09.334853760Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+0ms[0m
2018-11-15T14:25:09.334919756Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+169ms[0m
2018-11-15T14:25:09.334927112Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
2018-11-15T14:25:09.335302513Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:09.335441712Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+1ms[0m
2018-11-15T14:25:09.335450002Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:09.335453471Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:09.335456853Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:09.335470197Z        return result !== '';
2018-11-15T14:25:09.335473479Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:09.335476813Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:09.335565977Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:09.335573599Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:09.335576888Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:09.335580139Z          if (condFunc()) {
2018-11-15T14:25:09.335583417Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:09.335587032Z            return resolve(value);
2018-11-15T14:25:09.335590158Z          }
2018-11-15T14:25:09.335593214Z          setTimeout(wait, interval);
2018-11-15T14:25:09.335596409Z        } [32m+0ms[0m
2018-11-15T14:25:09.335599530Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:09.335610442Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:09.335614045Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:09.335617220Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:09.335634748Z          if (condFunc()) {
2018-11-15T14:25:09.335653935Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:09.335658139Z            return resolve(value);
2018-11-15T14:25:09.335661234Z          }
2018-11-15T14:25:09.335664216Z          setTimeout(wait, interval);
2018-11-15T14:25:09.335667434Z        } [32m+0ms[0m
2018-11-15T14:25:09.335670557Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:09.335739193Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:25:09.335754376Z  => 12
2018-11-15T14:25:09.335765019Z  irb(main):043:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:09.336864519Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:09.336880034Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:09.336885949Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:09.336890994Z          if (condFunc()) {
2018-11-15T14:25:09.336921607Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:09.336926636Z            return resolve(value);
2018-11-15T14:25:09.336929748Z          }
2018-11-15T14:25:09.336932776Z          setTimeout(wait, interval);
2018-11-15T14:25:09.336935845Z        } [32m+1ms[0m
2018-11-15T14:25:09.336939091Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:25:09.336942474Z  => 12
2018-11-15T14:25:09.336945566Z  irb(main):043:0> " [32m+0ms[0m
2018-11-15T14:25:09.336948968Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:09.336952642Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:25:09.336956031Z  => 12
2018-11-15T14:25:09.336959034Z  irb(main):043:0> " [32m+0ms[0m
2018-11-15T14:25:09.336962312Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:09.342145152Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:09.342169152Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:09.342190012Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:09.342195092Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:09.342198703Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:09.342202206Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:09.342205535Z        return result += data;
2018-11-15T14:25:09.342215903Z      })] [32m+1ms[0m
2018-11-15T14:25:09.342219409Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:25:09.342222843Z  => 12
2018-11-15T14:25:09.342225985Z  irb(main):043:0> ") [32m+0ms[0m
2018-11-15T14:25:09.342236189Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:25:09.342239671Z  => 12
2018-11-15T14:25:09.342242740Z  irb(main):043:0>  [32m+8ms[0m
2018-11-15T14:25:09.342340407Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:09.342359545Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}] [32m+0ms[0m
2018-11-15T14:25:09.342365033Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):043:0> \"}]"] [33m+177ms[0m
2018-11-15T14:25:09.342369738Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}]) [34m+8ms[0m
2018-11-15T14:25:09.342373820Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:09.342377226Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):043:0> "}]" [33m+8ms[0m
2018-11-15T14:25:09.349465138Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+7ms[0m
2018-11-15T14:25:09.349501257Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:09.349691550Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+7ms[0m
2018-11-15T14:25:09.349703451Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+15ms[0m
2018-11-15T14:25:09.349708182Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:25:09.349712230Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:25:09.349739731Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+7ms[0m
2018-11-15T14:25:09.349829434Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.349847450Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:25:09.550938570Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"31"}]" [33m+201ms[0m
2018-11-15T14:25:09.550976439Z    [34;1mengine:socket [0mpacket [34m+201ms[0m
2018-11-15T14:25:09.551200207Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"31"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [32m+201ms[0m
2018-11-15T14:25:09.551214604Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"31"}]} [36m+201ms[0m
2018-11-15T14:25:09.551219592Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:25:09.551223433Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"31"}] [36m+0ms[0m
2018-11-15T14:25:09.551227061Z    [32;1mserver [0m  ["lineChanged"] { line: 31 } [32m+201ms[0m
2018-11-15T14:25:09.551230672Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:09.551236892Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"31"}],"nsp":"/"} as 2["syncLine",{"line":"31"}] [32m+0ms[0m
2018-11-15T14:25:09.556442272Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"312"}]" [33m+6ms[0m
2018-11-15T14:25:09.556648226Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:09.556659028Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"312"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [32m+5ms[0m
2018-11-15T14:25:09.556664348Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"312"}]} [36m+6ms[0m
2018-11-15T14:25:09.556668709Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:25:09.556825850Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"312"}] [36m+0ms[0m
2018-11-15T14:25:09.556834691Z    [32;1mserver [0m  ["lineChanged"] { line: 312 } [32m+6ms[0m
2018-11-15T14:25:09.556838639Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.556843097Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"312"}],"nsp":"/"} as 2["syncLine",{"line":"312"}] [32m+0ms[0m
2018-11-15T14:25:09.598330948Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3123"}]" [33m+42ms[0m
2018-11-15T14:25:09.598375003Z    [34;1mengine:socket [0mpacket [34m+42ms[0m
2018-11-15T14:25:09.598551905Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [32m+42ms[0m
2018-11-15T14:25:09.598562494Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3123"}]} [36m+42ms[0m
2018-11-15T14:25:09.598566758Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
2018-11-15T14:25:09.598570731Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3123"}] [36m+0ms[0m
2018-11-15T14:25:09.598574450Z    [32;1mserver [0m  ["lineChanged"] { line: 3123 } [32m+42ms[0m
2018-11-15T14:25:09.598594705Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:09.598599638Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3123"}],"nsp":"/"} as 2["syncLine",{"line":"3123"}] [32m+0ms[0m
2018-11-15T14:25:10.201638316Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+603ms[0m
2018-11-15T14:25:10.201683232Z    [34;1mengine:socket [0mpacket [34m+603ms[0m
2018-11-15T14:25:10.201818072Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+603ms[0m
2018-11-15T14:25:10.201836399Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+603ms[0m
2018-11-15T14:25:10.201841447Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:10.201845448Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:10.201923218Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+603ms[0m
2018-11-15T14:25:10.201930338Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:10.201934710Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:10.202140923Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3123"}]" [33m+0ms[0m
2018-11-15T14:25:10.202157353Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:25:10.202334696Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [32m+1ms[0m
2018-11-15T14:25:10.202343913Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3123"}]} [36m+1ms[0m
2018-11-15T14:25:10.202347974Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3123"}] [36m+0ms[0m
2018-11-15T14:25:10.202351599Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3123"}] [36m+0ms[0m
2018-11-15T14:25:10.202355337Z    [32;1mserver [0m  ["evaluate"] { code: 3123 } [32m+1ms[0m
2018-11-15T14:25:10.202358774Z    [32;1mRepl [0m[bufferWrite(string = "3123", bufferInterval = 5, write = true)] [32m+860ms[0m
2018-11-15T14:25:10.202362398Z    [32;1mRepl [0m  this.process.write('3123' + '\n') [32m+0ms[0m
2018-11-15T14:25:10.202365854Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:10.205215165Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:10.205227853Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:10.205231950Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:10.205235664Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:10.205239170Z        return result !== '';
2018-11-15T14:25:10.205256266Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:10.205275125Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:10.205279580Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:10.205282849Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:10.205286007Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:10.205289285Z          if (condFunc()) {
2018-11-15T14:25:10.205293089Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:10.205312738Z            return resolve(value);
2018-11-15T14:25:10.205316605Z          }
2018-11-15T14:25:10.205319689Z          setTimeout(wait, interval);
2018-11-15T14:25:10.205322896Z        } [32m+0ms[0m
2018-11-15T14:25:10.205326180Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:10.205329661Z    [32;1mRepl [0m  [concatResult(data = 3123
2018-11-15T14:25:10.205340009Z  )] result: "" [32m+0ms[0m
2018-11-15T14:25:10.205761301Z    [32;1mRepl [0m  [concatResult(data = => 3123
2018-11-15T14:25:10.205797155Z  irb(main):044:0> )] result: "3123
2018-11-15T14:25:10.205801512Z  " [32m+3ms[0m
2018-11-15T14:25:10.205804960Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:10.205808615Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:10.205811950Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:10.205815258Z          if (condFunc()) {
2018-11-15T14:25:10.205818437Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:10.205821961Z            return resolve(value);
2018-11-15T14:25:10.205825147Z          }
2018-11-15T14:25:10.205828252Z          setTimeout(wait, interval);
2018-11-15T14:25:10.205831416Z        } [32m+0ms[0m
2018-11-15T14:25:10.205834696Z    [32;1mRepl [0m  [isDataReceived()] result: "3123
2018-11-15T14:25:10.205838092Z  => 3123
2018-11-15T14:25:10.205841185Z  irb(main):044:0> " [32m+0ms[0m
2018-11-15T14:25:10.205844491Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:10.205869479Z    [32;1mRepl [0m`let currResult = result` //==> "3123
2018-11-15T14:25:10.205877381Z  => 3123
2018-11-15T14:25:10.205882281Z  irb(main):044:0> " [32m+0ms[0m
2018-11-15T14:25:10.205887498Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:10.211104549Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:10.211124112Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:10.211130515Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:10.211135890Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:10.211141278Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:10.211146957Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:10.211152346Z        return result += data;
2018-11-15T14:25:10.211155663Z      })] [32m+0ms[0m
2018-11-15T14:25:10.211158978Z    [32;1mRepl [0m  resolve(result = "3123
2018-11-15T14:25:10.211162606Z  => 3123
2018-11-15T14:25:10.211165762Z  irb(main):044:0> ") [32m+0ms[0m
2018-11-15T14:25:10.211169640Z    [32;1mserver [0m  [emitOutput] output: 3123
2018-11-15T14:25:10.211172966Z  => 3123
2018-11-15T14:25:10.211206143Z  irb(main):044:0>  [32m+8ms[0m
2018-11-15T14:25:10.211211818Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:10.211216722Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}],"nsp":"/"} as 2["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}] [32m+0ms[0m
2018-11-15T14:25:10.211221594Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3123\\r\\n=> 3123\\r\\nirb(main):044:0> \"}]"] [33m+868ms[0m
2018-11-15T14:25:10.211226107Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}]) [34m+9ms[0m
2018-11-15T14:25:10.211230221Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:10.211233633Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3123\r\n=> 3123\r\nirb(main):044:0> "}]" [33m+9ms[0m
2018-11-15T14:25:10.630856520Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+420ms[0m
2018-11-15T14:25:10.630885811Z    [34;1mengine:socket [0mpacket [34m+420ms[0m
2018-11-15T14:25:10.630980253Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+420ms[0m
2018-11-15T14:25:10.630990301Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+428ms[0m
2018-11-15T14:25:10.630994803Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:10.631008022Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:10.631012047Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+420ms[0m
2018-11-15T14:25:10.631110174Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:10.631127063Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:10.657485484Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+27ms[0m
2018-11-15T14:25:10.657647455Z    [34;1mengine:socket [0mpacket [34m+27ms[0m
2018-11-15T14:25:10.657657997Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+27ms[0m
2018-11-15T14:25:10.657663318Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+27ms[0m
2018-11-15T14:25:10.657681158Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:10.657685455Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:10.657780862Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+27ms[0m
2018-11-15T14:25:10.657788784Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:10.657801920Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:10.714249953Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"123"}]" [33m+57ms[0m
2018-11-15T14:25:10.714385432Z    [34;1mengine:socket [0mpacket [34m+57ms[0m
2018-11-15T14:25:10.714395455Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"123"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [32m+57ms[0m
2018-11-15T14:25:10.714410667Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"123"}]} [36m+57ms[0m
2018-11-15T14:25:10.714416496Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:10.714422258Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"123"}] [36m+0ms[0m
2018-11-15T14:25:10.714496501Z    [32;1mserver [0m  ["lineChanged"] { line: 123 } [32m+57ms[0m
2018-11-15T14:25:10.714504034Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:10.714508732Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"123"}],"nsp":"/"} as 2["syncLine",{"line":"123"}] [32m+0ms[0m
2018-11-15T14:25:10.812317888Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+98ms[0m
2018-11-15T14:25:10.812346487Z    [34;1mengine:socket [0mpacket [34m+98ms[0m
2018-11-15T14:25:10.812453558Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+98ms[0m
2018-11-15T14:25:10.812464233Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+98ms[0m
2018-11-15T14:25:10.812468640Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:10.812557087Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:10.812599116Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+98ms[0m
2018-11-15T14:25:10.812715318Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:10.812725194Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:10.818242586Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"123"}]" [33m+6ms[0m
2018-11-15T14:25:10.818354637Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:10.818368805Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"123"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [32m+6ms[0m
2018-11-15T14:25:10.818456389Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"123"}]} [36m+6ms[0m
2018-11-15T14:25:10.818465346Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:10.818469614Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"123"}] [36m+0ms[0m
2018-11-15T14:25:10.818473503Z    [32;1mserver [0m  ["evaluate"] { code: 123 } [32m+6ms[0m
2018-11-15T14:25:10.818555628Z    [32;1mRepl [0m[bufferWrite(string = "123", bufferInterval = 5, write = true)] [32m+608ms[0m
2018-11-15T14:25:10.818563716Z    [32;1mRepl [0m  this.process.write('123' + '\n') [32m+0ms[0m
2018-11-15T14:25:10.818567764Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:10.818571446Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:10.818575155Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:10.818578564Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:10.818980968Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:10.818998111Z        return result !== '';
2018-11-15T14:25:10.819001624Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:10.819059786Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:10.819067053Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:10.819070675Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:10.819073925Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:10.819077241Z          if (condFunc()) {
2018-11-15T14:25:10.819101009Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:10.819105753Z            return resolve(value);
2018-11-15T14:25:10.819109020Z          }
2018-11-15T14:25:10.819112207Z          setTimeout(wait, interval);
2018-11-15T14:25:10.819115366Z        } [32m+0ms[0m
2018-11-15T14:25:10.819118636Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:10.819191287Z    [32;1mRepl [0m  [concatResult(data = 123
2018-11-15T14:25:10.819198908Z  => 123
2018-11-15T14:25:10.819202262Z  irb(main):045:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:10.820324602Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:10.820338658Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:10.820345273Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:10.820350622Z          if (condFunc()) {
2018-11-15T14:25:10.820355374Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:10.820361002Z            return resolve(value);
2018-11-15T14:25:10.820365956Z          }
2018-11-15T14:25:10.820369197Z          setTimeout(wait, interval);
2018-11-15T14:25:10.820372543Z        } [32m+1ms[0m
2018-11-15T14:25:10.820455463Z    [32;1mRepl [0m  [isDataReceived()] result: "123
2018-11-15T14:25:10.820463197Z  => 123
2018-11-15T14:25:10.820466497Z  irb(main):045:0> " [32m+0ms[0m
2018-11-15T14:25:10.820469860Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:10.820473636Z    [32;1mRepl [0m`let currResult = result` //==> "123
2018-11-15T14:25:10.820477062Z  => 123
2018-11-15T14:25:10.820480203Z  irb(main):045:0> " [32m+0ms[0m
2018-11-15T14:25:10.820483519Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:10.825596445Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:10.825710123Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:10.825724727Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:10.825730873Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:10.825735849Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:10.825740881Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:10.825763795Z        return result += data;
2018-11-15T14:25:10.825770083Z      })] [32m+0ms[0m
2018-11-15T14:25:10.825841465Z    [32;1mRepl [0m  resolve(result = "123
2018-11-15T14:25:10.825860490Z  => 123
2018-11-15T14:25:10.825864003Z  irb(main):045:0> ") [32m+0ms[0m
2018-11-15T14:25:10.825867554Z    [32;1mserver [0m  [emitOutput] output: 123
2018-11-15T14:25:10.825870915Z  => 123
2018-11-15T14:25:10.825873981Z  irb(main):045:0>  [32m+7ms[0m
2018-11-15T14:25:10.825877337Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:10.825933160Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}],"nsp":"/"} as 2["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}] [32m+0ms[0m
2018-11-15T14:25:10.825952379Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"123\\r\\n=> 123\\r\\nirb(main):045:0> \"}]"] [33m+615ms[0m
2018-11-15T14:25:10.826021259Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}]) [34m+7ms[0m
2018-11-15T14:25:10.826029155Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:10.826072699Z    [33;1mengine:ws [0mwriting "42["output",{"output":"123\r\n=> 123\r\nirb(main):045:0> "}]" [33m+7ms[0m
2018-11-15T14:25:11.012193790Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+186ms[0m
2018-11-15T14:25:11.012265170Z    [34;1mengine:socket [0mpacket [34m+187ms[0m
2018-11-15T14:25:11.012373085Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+187ms[0m
2018-11-15T14:25:11.012504700Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+194ms[0m
2018-11-15T14:25:11.012531175Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.012597190Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.012625989Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+187ms[0m
2018-11-15T14:25:11.012709474Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:11.012722993Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:11.012959472Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+1ms[0m
2018-11-15T14:25:11.012989090Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:25:11.013176612Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+0ms[0m
2018-11-15T14:25:11.013397774Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+1ms[0m
2018-11-15T14:25:11.013410704Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:11.013416076Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:11.013475453Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+1ms[0m
2018-11-15T14:25:11.013560312Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+188ms[0m
2018-11-15T14:25:11.013571232Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:11.013895262Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:11.014089955Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:11.014103080Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:11.014109311Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:11.014114392Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:11.014119760Z        return result !== '';
2018-11-15T14:25:11.014124800Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:11.014130157Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:11.014224585Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.014233025Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.014263480Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.014268121Z          if (condFunc()) {
2018-11-15T14:25:11.014271196Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.014274703Z            return resolve(value);
2018-11-15T14:25:11.014277801Z          }
2018-11-15T14:25:11.014280957Z          setTimeout(wait, interval);
2018-11-15T14:25:11.014284068Z        } [32m+0ms[0m
2018-11-15T14:25:11.014287194Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+1ms[0m
2018-11-15T14:25:11.014298157Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:11.014301848Z  irb(main):046:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:11.015458111Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.015473754Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.015480588Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.015485914Z          if (condFunc()) {
2018-11-15T14:25:11.015529821Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.015535789Z            return resolve(value);
2018-11-15T14:25:11.015540567Z          }
2018-11-15T14:25:11.015545443Z          setTimeout(wait, interval);
2018-11-15T14:25:11.015558160Z        } [32m+1ms[0m
2018-11-15T14:25:11.015621335Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:11.015628342Z  irb(main):046:0> " [32m+0ms[0m
2018-11-15T14:25:11.015809602Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:11.015825216Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:11.015832342Z  irb(main):046:0> " [32m+0ms[0m
2018-11-15T14:25:11.015837453Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:11.020758226Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:11.021000305Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:11.021016094Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:11.021022843Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:11.021028262Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:11.021033761Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:11.021038616Z        return result += data;
2018-11-15T14:25:11.021043651Z      })] [32m+0ms[0m
2018-11-15T14:25:11.021203595Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:11.021216498Z  irb(main):046:0> ") [32m+1ms[0m
2018-11-15T14:25:11.021312080Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:11.021323926Z  irb(main):046:0>  [32m+8ms[0m
2018-11-15T14:25:11.021528656Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):046:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:11.021686724Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):046:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):046:0> "}] [32m+0ms[0m
2018-11-15T14:25:11.021700836Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):046:0> \"}]"] [33m+196ms[0m
2018-11-15T14:25:11.021820438Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):046:0> "}]) [34m+9ms[0m
2018-11-15T14:25:11.021833808Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:11.021979980Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):046:0> "}]" [33m+9ms[0m
2018-11-15T14:25:11.155302074Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+134ms[0m
2018-11-15T14:25:11.155423983Z    [34;1mengine:socket [0mpacket [34m+134ms[0m
2018-11-15T14:25:11.155590799Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+134ms[0m
2018-11-15T14:25:11.155703493Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+142ms[0m
2018-11-15T14:25:11.155799800Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:11.155945228Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:11.155954788Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+134ms[0m
2018-11-15T14:25:11.156113145Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:11.156181279Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+1ms[0m
2018-11-15T14:25:11.202909594Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+47ms[0m
2018-11-15T14:25:11.202969907Z    [34;1mengine:socket [0mpacket [34m+47ms[0m
2018-11-15T14:25:11.203074696Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+46ms[0m
2018-11-15T14:25:11.203257088Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+48ms[0m
2018-11-15T14:25:11.203302707Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.203328992Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.203416322Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+48ms[0m
2018-11-15T14:25:11.203576259Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:11.203587070Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:11.203811347Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
2018-11-15T14:25:11.203906254Z    [34;1mengine:socket [0mpacket [34m+1ms[0m
2018-11-15T14:25:11.204052298Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+0ms[0m
2018-11-15T14:25:11.204509860Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
2018-11-15T14:25:11.204546974Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.204693651Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.204758559Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+1ms[0m
2018-11-15T14:25:11.204890733Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:11.205002756Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:11.205242615Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+2ms[0m
2018-11-15T14:25:11.205329491Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:25:11.205535431Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+1ms[0m
2018-11-15T14:25:11.205690077Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+1ms[0m
2018-11-15T14:25:11.205757189Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.205836309Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.206038115Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+1ms[0m
2018-11-15T14:25:11.206083388Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+184ms[0m
2018-11-15T14:25:11.206219379Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+1ms[0m
2018-11-15T14:25:11.206759748Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:11.206968009Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:11.206983828Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:11.207081233Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:11.207090017Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:11.207093630Z        return result !== '';
2018-11-15T14:25:11.207097005Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:11.207185930Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:11.207193090Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.207196658Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.207199960Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.207203229Z          if (condFunc()) {
2018-11-15T14:25:11.207206346Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.207209802Z            return resolve(value);
2018-11-15T14:25:11.207213021Z          }
2018-11-15T14:25:11.207216070Z          setTimeout(wait, interval);
2018-11-15T14:25:11.207219259Z        } [32m+0ms[0m
2018-11-15T14:25:11.207341690Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:11.207572108Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:25:11.207582286Z  => 12
2018-11-15T14:25:11.207585977Z  irb(main):047:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:11.207718284Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.207727414Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.207730771Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.207739649Z          if (condFunc()) {
2018-11-15T14:25:11.207742782Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.207746238Z            return resolve(value);
2018-11-15T14:25:11.207749385Z          }
2018-11-15T14:25:11.207756923Z          setTimeout(wait, interval);
2018-11-15T14:25:11.207760136Z        } [32m+0ms[0m
2018-11-15T14:25:11.207843909Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:25:11.207853520Z  => 12
2018-11-15T14:25:11.207864810Z  irb(main):047:0> " [32m+0ms[0m
2018-11-15T14:25:11.207868682Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:11.207975013Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:25:11.207983813Z  => 12
2018-11-15T14:25:11.207987176Z  irb(main):047:0> " [32m+0ms[0m
2018-11-15T14:25:11.208103739Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:11.213252743Z    [32;1mRepl [0m  [setInterval()] [32m+6ms[0m
2018-11-15T14:25:11.213266415Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:11.213382574Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:11.213498036Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:11.213507942Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:11.213511841Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:11.213515254Z        return result += data;
2018-11-15T14:25:11.213518356Z      })] [32m+0ms[0m
2018-11-15T14:25:11.213652973Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:25:11.213663276Z  => 12
2018-11-15T14:25:11.213666841Z  irb(main):047:0> ") [32m+0ms[0m
2018-11-15T14:25:11.213785962Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:25:11.213794741Z  => 12
2018-11-15T14:25:11.213798077Z  irb(main):047:0>  [32m+8ms[0m
2018-11-15T14:25:11.213957102Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}],"nsp":"/"} [32m+8ms[0m
2018-11-15T14:25:11.214143620Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}] [32m+0ms[0m
2018-11-15T14:25:11.214270799Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):047:0> \"}]"] [33m+193ms[0m
2018-11-15T14:25:11.214337624Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}]) [34m+9ms[0m
2018-11-15T14:25:11.214399824Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:11.214500752Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):047:0> "}]" [33m+9ms[0m
2018-11-15T14:25:11.263240501Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+48ms[0m
2018-11-15T14:25:11.263270615Z    [34;1mengine:socket [0mpacket [34m+49ms[0m
2018-11-15T14:25:11.263454437Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+50ms[0m
2018-11-15T14:25:11.263618251Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+58ms[0m
2018-11-15T14:25:11.263807704Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:25:11.263946688Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:25:11.263995094Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+50ms[0m
2018-11-15T14:25:11.264190343Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:11.264201740Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+0ms[0m
2018-11-15T14:25:11.372107320Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+109ms[0m
2018-11-15T14:25:11.372134653Z    [34;1mengine:socket [0mpacket [34m+108ms[0m
2018-11-15T14:25:11.372395091Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+108ms[0m
2018-11-15T14:25:11.372570901Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+109ms[0m
2018-11-15T14:25:11.372695104Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.372819236Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.372884329Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+109ms[0m
2018-11-15T14:25:11.373010369Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:11.373104657Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:11.378658819Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+7ms[0m
2018-11-15T14:25:11.378675523Z    [34;1mengine:socket [0mpacket [34m+7ms[0m
2018-11-15T14:25:11.378820874Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+6ms[0m
2018-11-15T14:25:11.379042681Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+6ms[0m
2018-11-15T14:25:11.379146232Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:25:11.379205097Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:25:11.379212168Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+7ms[0m
2018-11-15T14:25:11.379300923Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+166ms[0m
2018-11-15T14:25:11.379448591Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:25:11.380004535Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:11.380150735Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:11.380193572Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:25:11.380302755Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:11.380315022Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:11.380318893Z        return result !== '';
2018-11-15T14:25:11.380322148Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:11.380489244Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:11.380558866Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.380568240Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.380571829Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.380580117Z          if (condFunc()) {
2018-11-15T14:25:11.380583544Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.380587163Z            return resolve(value);
2018-11-15T14:25:11.380590435Z          }
2018-11-15T14:25:11.380593601Z          setTimeout(wait, interval);
2018-11-15T14:25:11.380596794Z        } [32m+0ms[0m
2018-11-15T14:25:11.380600219Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:11.380782195Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:25:11.380791692Z  => 3
2018-11-15T14:25:11.380795252Z  irb(main):048:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:11.381953818Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.381978340Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.381988953Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.382008391Z          if (condFunc()) {
2018-11-15T14:25:11.382012448Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.382016103Z            return resolve(value);
2018-11-15T14:25:11.382019193Z          }
2018-11-15T14:25:11.382022257Z          setTimeout(wait, interval);
2018-11-15T14:25:11.382025482Z        } [32m+1ms[0m
2018-11-15T14:25:11.382090439Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:25:11.382101108Z  => 3
2018-11-15T14:25:11.382104543Z  irb(main):048:0> " [32m+0ms[0m
2018-11-15T14:25:11.382144284Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:11.382157478Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:25:11.382161391Z  => 3
2018-11-15T14:25:11.382179701Z  irb(main):048:0> " [32m+1ms[0m
2018-11-15T14:25:11.382338784Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:11.387484118Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:11.387566288Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:11.387727351Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:11.387897215Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:11.387906804Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:11.387910641Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:11.387914010Z        return result += data;
2018-11-15T14:25:11.387917272Z      })] [32m+0ms[0m
2018-11-15T14:25:11.388071473Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:25:11.388095702Z  => 3
2018-11-15T14:25:11.388102352Z  irb(main):048:0> ") [32m+0ms[0m
2018-11-15T14:25:11.388278417Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:25:11.388292282Z  => 3
2018-11-15T14:25:11.388297811Z  irb(main):048:0>  [32m+9ms[0m
2018-11-15T14:25:11.388486843Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:25:11.388659751Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}] [32m+0ms[0m
2018-11-15T14:25:11.388843940Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):048:0> \"}]"] [33m+174ms[0m
2018-11-15T14:25:11.388982394Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]) [34m+10ms[0m
2018-11-15T14:25:11.389167817Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:11.389300002Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):048:0> "}]" [33m+11ms[0m
2018-11-15T14:25:11.509847576Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+120ms[0m
2018-11-15T14:25:11.509964828Z    [34;1mengine:socket [0mpacket [34m+121ms[0m
2018-11-15T14:25:11.510130571Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+121ms[0m
2018-11-15T14:25:11.510261335Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+132ms[0m
2018-11-15T14:25:11.510416930Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.510492755Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.510636963Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+122ms[0m
2018-11-15T14:25:11.510829693Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:11.510839788Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:11.516010772Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:11.516025544Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:11.516156701Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+5ms[0m
2018-11-15T14:25:11.516298708Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:11.516308432Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:11.516405463Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:11.516520161Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:11.516527822Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+129ms[0m
2018-11-15T14:25:11.516634706Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:11.516642363Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:11.517012148Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:11.517114369Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:11.517212756Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:11.517220256Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:11.517223800Z        return result !== '';
2018-11-15T14:25:11.517227144Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:11.517230465Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+1ms[0m
2018-11-15T14:25:11.517291919Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.517298350Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.517301835Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.517305118Z          if (condFunc()) {
2018-11-15T14:25:11.517308246Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.517311704Z            return resolve(value);
2018-11-15T14:25:11.517314915Z          }
2018-11-15T14:25:11.517317939Z          setTimeout(wait, interval);
2018-11-15T14:25:11.517321061Z        } [32m+0ms[0m
2018-11-15T14:25:11.517324203Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:11.517441906Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:11.517451038Z  irb(main):049:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:11.519796581Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.519806805Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.519810473Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.519813827Z          if (condFunc()) {
2018-11-15T14:25:11.519817056Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.519820552Z            return resolve(value);
2018-11-15T14:25:11.519823653Z          }
2018-11-15T14:25:11.519826660Z          setTimeout(wait, interval);
2018-11-15T14:25:11.519837059Z        } [32m+2ms[0m
2018-11-15T14:25:11.519840660Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:11.519843965Z  irb(main):049:0> " [32m+0ms[0m
2018-11-15T14:25:11.519880612Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:11.519884334Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:11.519887675Z  irb(main):049:0> " [32m+0ms[0m
2018-11-15T14:25:11.519896593Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:11.525252135Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:11.525267325Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:11.525271594Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:11.525275040Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:11.525278531Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:11.525282000Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:11.525285690Z        return result += data;
2018-11-15T14:25:11.525288854Z      })] [32m+0ms[0m
2018-11-15T14:25:11.525292067Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:11.525295334Z  irb(main):049:0> ") [32m+0ms[0m
2018-11-15T14:25:11.525323320Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:11.525326875Z  irb(main):049:0>  [32m+8ms[0m
2018-11-15T14:25:11.525330309Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:11.525334943Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):049:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):049:0> "}] [32m+0ms[0m
2018-11-15T14:25:11.525339643Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):049:0> \"}]"] [33m+136ms[0m
2018-11-15T14:25:11.525344071Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):049:0> "}]) [34m+10ms[0m
2018-11-15T14:25:11.525348120Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:11.525351485Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):049:0> "}]" [33m+10ms[0m
2018-11-15T14:25:11.698660888Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+173ms[0m
2018-11-15T14:25:11.698713116Z    [34;1mengine:socket [0mpacket [34m+173ms[0m
2018-11-15T14:25:11.698718777Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+174ms[0m
2018-11-15T14:25:11.698723578Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+182ms[0m
2018-11-15T14:25:11.698727559Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.698731142Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.698734676Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+174ms[0m
2018-11-15T14:25:11.698738270Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:11.698742537Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:11.704903668Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:11.704925274Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:11.704930001Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+6ms[0m
2018-11-15T14:25:11.704952028Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+6ms[0m
2018-11-15T14:25:11.704956476Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:11.704960301Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:11.704964082Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:11.704967695Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+180ms[0m
2018-11-15T14:25:11.704971349Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:11.704974746Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:11.704978237Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:11.704981711Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:11.704985018Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:11.704988345Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:11.705031514Z        return result !== '';
2018-11-15T14:25:11.705036351Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:11.705039701Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:11.705047479Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.705051082Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.705054237Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.705057492Z          if (condFunc()) {
2018-11-15T14:25:11.705060535Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.705064036Z            return resolve(value);
2018-11-15T14:25:11.705067148Z          }
2018-11-15T14:25:11.705070154Z          setTimeout(wait, interval);
2018-11-15T14:25:11.705073274Z        } [32m+0ms[0m
2018-11-15T14:25:11.705076540Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:11.705174858Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:11.705189164Z  )] result: "" [32m+0ms[0m
2018-11-15T14:25:11.705333057Z    [32;1mRepl [0m  [concatResult(data = irb(main):050:0> )] result: "
2018-11-15T14:25:11.705342334Z  " [32m+1ms[0m
2018-11-15T14:25:11.706523889Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.706542036Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.706547897Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.706552496Z          if (condFunc()) {
2018-11-15T14:25:11.706556872Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.706561596Z            return resolve(value);
2018-11-15T14:25:11.706595984Z          }
2018-11-15T14:25:11.706602845Z          setTimeout(wait, interval);
2018-11-15T14:25:11.706607341Z        } [32m+1ms[0m
2018-11-15T14:25:11.706611571Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:11.706616846Z  irb(main):050:0> " [32m+0ms[0m
2018-11-15T14:25:11.706621856Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:11.706628771Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:11.706633969Z  irb(main):050:0> " [32m+0ms[0m
2018-11-15T14:25:11.706639278Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:11.712137766Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:11.712162906Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:11.712167813Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:11.712171442Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:11.712175025Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:11.712178690Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:11.712182182Z        return result += data;
2018-11-15T14:25:11.712185344Z      })] [32m+0ms[0m
2018-11-15T14:25:11.712188750Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:11.712192178Z  irb(main):050:0> ") [32m+0ms[0m
2018-11-15T14:25:11.712195510Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:11.712198888Z  irb(main):050:0>  [32m+7ms[0m
2018-11-15T14:25:11.712202253Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):050:0> "}],"nsp":"/"} [32m+7ms[0m
2018-11-15T14:25:11.712206744Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):050:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):050:0> "}] [32m+0ms[0m
2018-11-15T14:25:11.712211589Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):050:0> \"}]"] [33m+187ms[0m
2018-11-15T14:25:11.712215985Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):050:0> "}]) [34m+7ms[0m
2018-11-15T14:25:11.712219905Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:11.712223373Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):050:0> "}]" [33m+7ms[0m
2018-11-15T14:25:11.887415085Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"1"}]" [33m+175ms[0m
2018-11-15T14:25:11.887475890Z    [34;1mengine:socket [0mpacket [34m+175ms[0m
2018-11-15T14:25:11.887483972Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"1"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [32m+175ms[0m
2018-11-15T14:25:11.887491361Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"1"}]} [36m+182ms[0m
2018-11-15T14:25:11.887497900Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"1"}] [36m+1ms[0m
2018-11-15T14:25:11.887534547Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"1"}] [36m+0ms[0m
2018-11-15T14:25:11.887560907Z    [32;1mserver [0m  ["lineChanged"] { line: 1 } [32m+176ms[0m
2018-11-15T14:25:11.887567971Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:11.887574415Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"1"}],"nsp":"/"} as 2["syncLine",{"line":"1"}] [32m+0ms[0m
2018-11-15T14:25:11.893744367Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"12"}]" [33m+6ms[0m
2018-11-15T14:25:11.893906334Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:11.893949540Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"12"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [32m+6ms[0m
2018-11-15T14:25:11.894027262Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"12"}]} [36m+6ms[0m
2018-11-15T14:25:11.894034224Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.894040216Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.894047395Z    [32;1mserver [0m  ["lineChanged"] { line: 12 } [32m+6ms[0m
2018-11-15T14:25:11.894053393Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:11.894060124Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"12"}],"nsp":"/"} as 2["syncLine",{"line":"12"}] [32m+0ms[0m
2018-11-15T14:25:11.894137152Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+1ms[0m
2018-11-15T14:25:11.894890702Z    [34;1mengine:socket [0mpacket [34m+2ms[0m
2018-11-15T14:25:11.895158843Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+1ms[0m
2018-11-15T14:25:11.895175347Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+1ms[0m
2018-11-15T14:25:11.895182659Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.895188948Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:11.895224581Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+1ms[0m
2018-11-15T14:25:11.895232909Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:11.895254997Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:11.895262778Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"12"}]" [33m+1ms[0m
2018-11-15T14:25:11.895389424Z    [34;1mengine:socket [0mpacket [34m+0ms[0m
2018-11-15T14:25:11.895402122Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"12"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [32m+1ms[0m
2018-11-15T14:25:11.895513751Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"12"}]} [36m+1ms[0m
2018-11-15T14:25:11.895659694Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.895775945Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"12"}] [36m+0ms[0m
2018-11-15T14:25:11.895915601Z    [32;1mserver [0m  ["evaluate"] { code: 12 } [32m+1ms[0m
2018-11-15T14:25:11.896029623Z    [32;1mRepl [0m[bufferWrite(string = "12", bufferInterval = 5, write = true)] [32m+184ms[0m
2018-11-15T14:25:11.896150828Z    [32;1mRepl [0m  this.process.write('12' + '\n') [32m+0ms[0m
2018-11-15T14:25:11.896874267Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+1ms[0m
2018-11-15T14:25:11.896885337Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:11.896889615Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:11.896893225Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:11.896896622Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:11.896900219Z        return result !== '';
2018-11-15T14:25:11.896903409Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:11.896906724Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:11.896910196Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.896913823Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.896936659Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.896941088Z          if (condFunc()) {
2018-11-15T14:25:11.896944258Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.896947662Z            return resolve(value);
2018-11-15T14:25:11.896961372Z          }
2018-11-15T14:25:11.896964691Z          setTimeout(wait, interval);
2018-11-15T14:25:11.896976462Z        } [32m+0ms[0m
2018-11-15T14:25:11.896980065Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:11.896983468Z    [32;1mRepl [0m  [concatResult(data = 12
2018-11-15T14:25:11.896986796Z  => 12
2018-11-15T14:25:11.897239199Z  )] result: "" [32m+0ms[0m
2018-11-15T14:25:11.897279010Z    [32;1mRepl [0m  [concatResult(data = irb(main):051:0> )] result: "12
2018-11-15T14:25:11.897289075Z  => 12
2018-11-15T14:25:11.897292776Z  " [32m+1ms[0m
2018-11-15T14:25:11.898432612Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:11.898454291Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:11.898458801Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:11.898615674Z          if (condFunc()) {
2018-11-15T14:25:11.898654091Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:11.898659846Z            return resolve(value);
2018-11-15T14:25:11.898663234Z          }
2018-11-15T14:25:11.898666282Z          setTimeout(wait, interval);
2018-11-15T14:25:11.898707378Z        } [32m+1ms[0m
2018-11-15T14:25:11.898949725Z    [32;1mRepl [0m  [isDataReceived()] result: "12
2018-11-15T14:25:11.898962850Z  => 12
2018-11-15T14:25:11.899031880Z  irb(main):051:0> " [32m+0ms[0m
2018-11-15T14:25:11.899041549Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:11.899265229Z    [32;1mRepl [0m`let currResult = result` //==> "12
2018-11-15T14:25:11.899279752Z  => 12
2018-11-15T14:25:11.899394042Z  irb(main):051:0> " [32m+0ms[0m
2018-11-15T14:25:11.899403465Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+1ms[0m
2018-11-15T14:25:11.904499312Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:11.904789113Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:11.904798977Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:11.904802911Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:11.904806547Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:11.904810160Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:11.904813689Z        return result += data;
2018-11-15T14:25:11.904828728Z      })] [32m+0ms[0m
2018-11-15T14:25:11.904833212Z    [32;1mRepl [0m  resolve(result = "12
2018-11-15T14:25:11.904838577Z  => 12
2018-11-15T14:25:11.904843280Z  irb(main):051:0> ") [32m+0ms[0m
2018-11-15T14:25:11.904849908Z    [32;1mserver [0m  [emitOutput] output: 12
2018-11-15T14:25:11.904855374Z  => 12
2018-11-15T14:25:11.904935748Z  irb(main):051:0>  [32m+9ms[0m
2018-11-15T14:25:11.905214159Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} [32m+9ms[0m
2018-11-15T14:25:11.905290879Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}],"nsp":"/"} as 2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}] [32m+1ms[0m
2018-11-15T14:25:11.905619571Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"12\\r\\n=> 12\\r\\nirb(main):051:0> \"}]"] [33m+194ms[0m
2018-11-15T14:25:11.905688665Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]) [34m+11ms[0m
2018-11-15T14:25:11.905765462Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:11.906095343Z    [33;1mengine:ws [0mwriting "42["output",{"output":"12\r\n=> 12\r\nirb(main):051:0> "}]" [33m+11ms[0m
2018-11-15T14:25:11.984645840Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":"3"}]" [33m+79ms[0m
2018-11-15T14:25:11.984922273Z    [34;1mengine:socket [0mpacket [34m+79ms[0m
2018-11-15T14:25:11.985151862Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":"3"}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [32m+80ms[0m
2018-11-15T14:25:11.985358489Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":"3"}]} [36m+90ms[0m
2018-11-15T14:25:11.985670197Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:25:11.985746441Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":"3"}] [36m+0ms[0m
2018-11-15T14:25:11.985865620Z    [32;1mserver [0m  ["lineChanged"] { line: 3 } [32m+81ms[0m
2018-11-15T14:25:11.986075770Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:11.986222570Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":"3"}],"nsp":"/"} as 2["syncLine",{"line":"3"}] [32m+1ms[0m
2018-11-15T14:25:12.085648433Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+101ms[0m
2018-11-15T14:25:12.085951697Z    [34;1mengine:socket [0mpacket [34m+101ms[0m
2018-11-15T14:25:12.086198097Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+100ms[0m
2018-11-15T14:25:12.086370290Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+101ms[0m
2018-11-15T14:25:12.086540031Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:12.086709524Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:12.086815169Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+101ms[0m
2018-11-15T14:25:12.086999193Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+0ms[0m
2018-11-15T14:25:12.087184874Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+1ms[0m
2018-11-15T14:25:12.091318654Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":"3"}]" [33m+6ms[0m
2018-11-15T14:25:12.091487901Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:12.091708075Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":"3"}] as {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [32m+4ms[0m
2018-11-15T14:25:12.091937716Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":"3"}]} [36m+5ms[0m
2018-11-15T14:25:12.092095479Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":"3"}] [36m+0ms[0m
2018-11-15T14:25:12.092281975Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":"3"}] [36m+1ms[0m
2018-11-15T14:25:12.092466077Z    [32;1mserver [0m  ["evaluate"] { code: 3 } [32m+6ms[0m
2018-11-15T14:25:12.092645052Z    [32;1mRepl [0m[bufferWrite(string = "3", bufferInterval = 5, write = true)] [32m+188ms[0m
2018-11-15T14:25:12.092878609Z    [32;1mRepl [0m  this.process.write('3' + '\n') [32m+0ms[0m
2018-11-15T14:25:12.093383679Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:12.093394481Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:12.093398542Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+1ms[0m
2018-11-15T14:25:12.093402270Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:12.093417887Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:12.093450534Z        return result !== '';
2018-11-15T14:25:12.093463996Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:12.093467751Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:12.093471244Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:12.093474491Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:12.093477633Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:12.093480832Z          if (condFunc()) {
2018-11-15T14:25:12.093483912Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:12.093487270Z            return resolve(value);
2018-11-15T14:25:12.093490350Z          }
2018-11-15T14:25:12.093493391Z          setTimeout(wait, interval);
2018-11-15T14:25:12.093588619Z        } [32m+0ms[0m
2018-11-15T14:25:12.093740012Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:12.094032201Z    [32;1mRepl [0m  [concatResult(data = 3
2018-11-15T14:25:12.094045847Z  => 3
2018-11-15T14:25:12.094169132Z  irb(main):052:0> )] result: "" [32m+0ms[0m
2018-11-15T14:25:12.095517995Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:12.095530850Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:12.095534953Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:12.095538332Z          if (condFunc()) {
2018-11-15T14:25:12.095541519Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:12.095654822Z            return resolve(value);
2018-11-15T14:25:12.095821200Z          }
2018-11-15T14:25:12.095832056Z          setTimeout(wait, interval);
2018-11-15T14:25:12.095835775Z        } [32m+2ms[0m
2018-11-15T14:25:12.095999101Z    [32;1mRepl [0m  [isDataReceived()] result: "3
2018-11-15T14:25:12.096008767Z  => 3
2018-11-15T14:25:12.096012251Z  irb(main):052:0> " [32m+0ms[0m
2018-11-15T14:25:12.096273842Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+1ms[0m
2018-11-15T14:25:12.096293274Z    [32;1mRepl [0m`let currResult = result` //==> "3
2018-11-15T14:25:12.096302173Z  => 3
2018-11-15T14:25:12.096307392Z  irb(main):052:0> " [32m+0ms[0m
2018-11-15T14:25:12.096472445Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:12.101722311Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:12.101925676Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:12.102047657Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:12.102276666Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:12.102285463Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:12.102289295Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:12.102292666Z        return result += data;
2018-11-15T14:25:12.102295815Z      })] [32m+1ms[0m
2018-11-15T14:25:12.102543257Z    [32;1mRepl [0m  resolve(result = "3
2018-11-15T14:25:12.102555439Z  => 3
2018-11-15T14:25:12.102559438Z  irb(main):052:0> ") [32m+0ms[0m
2018-11-15T14:25:12.102788985Z    [32;1mserver [0m  [emitOutput] output: 3
2018-11-15T14:25:12.102798331Z  => 3
2018-11-15T14:25:12.102801897Z  irb(main):052:0>  [32m+10ms[0m
2018-11-15T14:25:12.102805767Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}],"nsp":"/"} [32m+11ms[0m
2018-11-15T14:25:12.102885468Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}],"nsp":"/"} as 2["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}] [32m+0ms[0m
2018-11-15T14:25:12.103022429Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"3\\r\\n=> 3\\r\\nirb(main):052:0> \"}]"] [33m+197ms[0m
2018-11-15T14:25:12.103245058Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}]) [34m+11ms[0m
2018-11-15T14:25:12.103255365Z    [34;1mengine:socket [0mflushing buffer to transport [34m+1ms[0m
2018-11-15T14:25:12.103582137Z    [33;1mengine:ws [0mwriting "42["output",{"output":"3\r\n=> 3\r\nirb(main):052:0> "}]" [33m+12ms[0m
2018-11-15T14:25:12.196991010Z    [33;1mengine:ws [0mreceived "42["lineChanged",{"line":""}]" [33m+93ms[0m
2018-11-15T14:25:12.197027968Z    [34;1mengine:socket [0mpacket [34m+93ms[0m
2018-11-15T14:25:12.197276781Z    [32;1msocket.io-parser [0mdecoded 2["lineChanged",{"line":""}] as {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [32m+95ms[0m
2018-11-15T14:25:12.197484949Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["lineChanged",{"line":""}]} [36m+105ms[0m
2018-11-15T14:25:12.197645555Z    [36;1msocket.io:socket [0memitting event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:12.197852140Z    [36;1msocket.io:socket [0mdispatching an event ["lineChanged",{"line":""}] [36m+0ms[0m
2018-11-15T14:25:12.198112804Z    [32;1mserver [0m  ["lineChanged"] { line:  } [32m+95ms[0m
2018-11-15T14:25:12.198289859Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} [32m+1ms[0m
2018-11-15T14:25:12.198487833Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["syncLine",{"line":""}],"nsp":"/"} as 2["syncLine",{"line":""}] [32m+0ms[0m
2018-11-15T14:25:12.202208971Z    [33;1mengine:ws [0mreceived "42["evaluate",{"code":""}]" [33m+6ms[0m
2018-11-15T14:25:12.202433228Z    [34;1mengine:socket [0mpacket [34m+6ms[0m
2018-11-15T14:25:12.202671542Z    [32;1msocket.io-parser [0mdecoded 2["evaluate",{"code":""}] as {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [32m+4ms[0m
2018-11-15T14:25:12.202880020Z    [36;1msocket.io:socket [0mgot packet {"type":2,"nsp":"/","data":["evaluate",{"code":""}]} [36m+5ms[0m
2018-11-15T14:25:12.203039374Z    [36;1msocket.io:socket [0memitting event ["evaluate",{"code":""}] [36m+0ms[0m
2018-11-15T14:25:12.203241643Z    [36;1msocket.io:socket [0mdispatching an event ["evaluate",{"code":""}] [36m+1ms[0m
2018-11-15T14:25:12.203480984Z    [32;1mserver [0m  ["evaluate"] { code:  } [32m+6ms[0m
2018-11-15T14:25:12.203491119Z    [32;1mRepl [0m[bufferWrite(string = "", bufferInterval = 5, write = true)] [32m+101ms[0m
2018-11-15T14:25:12.204010043Z    [32;1mRepl [0m  this.process.write('' + '\n') [32m+0ms[0m
2018-11-15T14:25:12.204026409Z    [32;1mRepl [0mthis.process.on("data", concatResult) [32m+0ms[0m
2018-11-15T14:25:12.204031363Z    [32;1mRepl [0m  `return new Promise(async (resolve = function () { [native code] }) => {` [32m+0ms[0m
2018-11-15T14:25:12.204035129Z    [32;1mRepl [0m  `await this.untilCondIsMet(isDataReceived)` [32m+0ms[0m
2018-11-15T14:25:12.204038603Z    [32;1mRepl [0m[untilCondIsMet(condFunc = () => {
2018-11-15T14:25:12.204041897Z        debug('  [isDataReceived()] result: "%s"', result)
2018-11-15T14:25:12.204045328Z        return result !== '';
2018-11-15T14:25:12.204048421Z      }, interval = 1, value = undefined)] [32m+0ms[0m
2018-11-15T14:25:12.204051729Z    [32;1mRepl [0m  `return new Promise((resolve) => {` resolve: function () { [native code] } [32m+0ms[0m
2018-11-15T14:25:12.204055118Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:12.204065795Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:12.204069497Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:12.204072714Z          if (condFunc()) {
2018-11-15T14:25:12.204075849Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:12.204079331Z            return resolve(value);
2018-11-15T14:25:12.204082434Z          }
2018-11-15T14:25:12.204085448Z          setTimeout(wait, interval);
2018-11-15T14:25:12.204088560Z        } [32m+0ms[0m
2018-11-15T14:25:12.204092128Z    [32;1mRepl [0m  [isDataReceived()] result: "" [32m+0ms[0m
2018-11-15T14:25:12.204304715Z    [32;1mRepl [0m  [concatResult(data = 
2018-11-15T14:25:12.204317238Z  irb(main):053:0> )] result: "" [32m+1ms[0m
2018-11-15T14:25:12.205529159Z    [32;1mRepl [0m    [wait()] wait: function wait() {
2018-11-15T14:25:12.205540490Z          debug('    [wait()] wait: %s', wait);
2018-11-15T14:25:12.205550565Z          // @todo: Check where `resolve(value)` is getting returned to...
2018-11-15T14:25:12.205554110Z          if (condFunc()) {
2018-11-15T14:25:12.205557391Z            debug('if (condFunc()) --> return resolve(value = "%s")', value);
2018-11-15T14:25:12.205560798Z            return resolve(value);
2018-11-15T14:25:12.205563980Z          }
2018-11-15T14:25:12.205567077Z          setTimeout(wait, interval);
2018-11-15T14:25:12.205570180Z        } [32m+1ms[0m
2018-11-15T14:25:12.205707200Z    [32;1mRepl [0m  [isDataReceived()] result: "
2018-11-15T14:25:12.205830159Z  irb(main):053:0> " [32m+0ms[0m
2018-11-15T14:25:12.206009927Z    [32;1mRepl [0mif (condFunc()) --> return resolve(value = "undefined") [32m+0ms[0m
2018-11-15T14:25:12.206180451Z    [32;1mRepl [0m`let currResult = result` //==> "
2018-11-15T14:25:12.206188816Z  irb(main):053:0> " [32m+1ms[0m
2018-11-15T14:25:12.206352621Z    [32;1mRepl [0mafter `setInterval` has returned #==> intervalId: "[object Object]" [32m+0ms[0m
2018-11-15T14:25:12.211725079Z    [32;1mRepl [0m  [setInterval()] [32m+5ms[0m
2018-11-15T14:25:12.211747812Z    [32;1mRepl [0m  clearInterval(intervalId = [object Object]) [32m+0ms[0m
2018-11-15T14:25:12.212008117Z    [32;1mRepl [0mthis.removeListener('data', concatResult) [32m+0ms[0m
2018-11-15T14:25:12.212019333Z    [32;1mRepl [0m[removeListener(event = data, func = (data) => {
2018-11-15T14:25:12.212023093Z        debug('  [concatResult(data = %s)] result: "%s"', data, result)
2018-11-15T14:25:12.212156673Z        // @todo: Check if return is necessary here.
2018-11-15T14:25:12.212194917Z        return result += data;
2018-11-15T14:25:12.212200722Z      })] [32m+0ms[0m
2018-11-15T14:25:12.212392729Z    [32;1mRepl [0m  resolve(result = "
2018-11-15T14:25:12.212405630Z  irb(main):053:0> ") [32m+1ms[0m
2018-11-15T14:25:12.212579437Z    [32;1mserver [0m  [emitOutput] output: 
2018-11-15T14:25:12.212589740Z  irb(main):053:0>  [32m+9ms[0m
2018-11-15T14:25:12.212808807Z    [32;1msocket.io-parser [0mencoding packet {"type":2,"data":["output",{"output":"\r\nirb(main):053:0> "}],"nsp":"/"} [32m+10ms[0m
2018-11-15T14:25:12.212987930Z    [32;1msocket.io-parser [0mencoded {"type":2,"data":["output",{"output":"\r\nirb(main):053:0> "}],"nsp":"/"} as 2["output",{"output":"\r\nirb(main):053:0> "}] [32m+0ms[0m
2018-11-15T14:25:12.213191270Z    [33;1msocket.io:client [0mwriting packet ["2[\"output\",{\"output\":\"\\r\\nirb(main):053:0> \"}]"] [33m+111ms[0m
2018-11-15T14:25:12.213369148Z    [34;1mengine:socket [0msending packet "message" (2["output",{"output":"\r\nirb(main):053:0> "}]) [34m+11ms[0m
2018-11-15T14:25:12.213557016Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:12.213754243Z    [33;1mengine:ws [0mwriting "42["output",{"output":"\r\nirb(main):053:0> "}]" [33m+11ms[0m
2018-11-15T14:25:28.422607661Z    [33;1mengine:ws [0mreceived "2" [33m+16s[0m
2018-11-15T14:25:28.422690690Z    [34;1mengine:socket [0mpacket [34m+16s[0m
2018-11-15T14:25:28.422700306Z    [34;1mengine:socket [0mgot ping [34m+0ms[0m
2018-11-15T14:25:28.422705974Z    [34;1mengine:socket [0msending packet "pong" (undefined) [34m+0ms[0m
2018-11-15T14:25:28.422711652Z    [34;1mengine:socket [0mflushing buffer to transport [34m+0ms[0m
2018-11-15T14:25:28.422717369Z    [33;1mengine:ws [0mwriting "3" [33m+1ms[0m
2018-11-15T14:27:07.506617056Z  ^C
